<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="memory_8cpp" kind="file">
    <compoundname>memory.cpp</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="memory_8h" local="yes">../include/memory.h</includes>
    <incdepgraph>
      <node id="315">
        <label>stdlib.h</label>
      </node>
      <node id="318">
        <label>Eigen/Dense</label>
      </node>
      <node id="321">
        <label>unistd.h</label>
      </node>
      <node id="319">
        <label>iostream</label>
      </node>
      <node id="314">
        <label>/home/huijin/git/CCEX/src/memory.cpp</label>
        <link refid="memory.cpp"/>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
      </node>
      <node id="316">
        <label>../include/memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="317" relation="include">
        </childnode>
      </node>
      <node id="320">
        <label>mpi.h</label>
      </node>
      <node id="317">
        <label>utilities.h</label>
        <link refid="utilities_8h_source"/>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="memory_8cpp_1a3cb8db1d55063ce809ca15698555d1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* allocInt1d</definition>
        <argsstring>(size_t m)</argsstring>
        <name>allocInt1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="5" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="5" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a10d56311c506ff61bd1e0ed9b19c293c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int **</type>
        <definition>int** allocInt2d</definition>
        <argsstring>(size_t m, size_t n)</argsstring>
        <name>allocInt2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="9" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="9" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1af5f58611b4753685463223935135b711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int ***</type>
        <definition>int*** allocInt3d</definition>
        <argsstring>(size_t m, size_t n, size_t l)</argsstring>
        <name>allocInt3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="13" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a10eb6c8390d29cc8f33e0ea56b6ee9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocInt1d</definition>
        <argsstring>(int **ptr, size_t newrow)</argsstring>
        <name>reallocInt1d</name>
        <param>
          <type>int **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="17" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a0404e6c1166ae1c0d933738b732c67f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocInt2d</definition>
        <argsstring>(int ***ptr, size_t oldrow, size_t newrow, size_t col)</argsstring>
        <name>reallocInt2d</name>
        <param>
          <type>int ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="21" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a75f338991cc82d1c6fca0b66f207ca67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocInt3d</definition>
        <argsstring>(int ****ptr, size_t oldrow, size_t newrow, size_t col1, size_t col2)</argsstring>
        <name>reallocInt3d</name>
        <param>
          <type>int ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="25" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a2d2931bbb7e0f10a2b1863f387c525a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeInt1d</definition>
        <argsstring>(int **ptr)</argsstring>
        <name>freeInt1d</name>
        <param>
          <type>int **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="29" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a68bfeb1b2a0a0f15f9377384ca69c08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeInt2d</definition>
        <argsstring>(int ***ptr, size_t m)</argsstring>
        <name>freeInt2d</name>
        <param>
          <type>int ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="33" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ac74f85e3ab97b01cd30c0d46526970af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeInt3d</definition>
        <argsstring>(int ****ptr, size_t m, size_t n)</argsstring>
        <name>freeInt3d</name>
        <param>
          <type>int ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="37" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a5b6cbba6ea5a6163d38e651bdf01184f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* allocDouble1d</definition>
        <argsstring>(size_t m)</argsstring>
        <name>allocDouble1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="42" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a8b57b170601f16ea432d9d46e36d9de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double **</type>
        <definition>double** allocDouble2d</definition>
        <argsstring>(size_t m, size_t n)</argsstring>
        <name>allocDouble2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="46" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a59b376e2bdbfb20b3e5a64b94e034c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double ***</type>
        <definition>double*** allocDouble3d</definition>
        <argsstring>(size_t m, size_t n, size_t l)</argsstring>
        <name>allocDouble3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="50" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ae443161b6e9abc8ebdfcc78fc7f41cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDouble1d</definition>
        <argsstring>(double **ptr, size_t newrow)</argsstring>
        <name>reallocDouble1d</name>
        <param>
          <type>double **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="54" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a4064bc02973da353c0e15ccba52fa2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDouble2d</definition>
        <argsstring>(double ***ptr, size_t oldrow, size_t newrow, size_t col)</argsstring>
        <name>reallocDouble2d</name>
        <param>
          <type>double ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="58" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1accd1ea1d834fa90eb69b4a1a60a6c8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDouble3d</definition>
        <argsstring>(double ****ptr, size_t oldrow, size_t newrow, size_t col1, size_t col2)</argsstring>
        <name>reallocDouble3d</name>
        <param>
          <type>double ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="62" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1abc35d0114f94dc82fcd0e172d3328858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDouble1d</definition>
        <argsstring>(double **ptr)</argsstring>
        <name>freeDouble1d</name>
        <param>
          <type>double **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="66" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aa69535e3c103c2f26fdd32acc7bd6eaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDouble2d</definition>
        <argsstring>(double ***ptr, size_t m)</argsstring>
        <name>freeDouble2d</name>
        <param>
          <type>double ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="70" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aec282ca23f89d1bfb485424fa4fccea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDouble3d</definition>
        <argsstring>(double ****ptr, size_t m, size_t n)</argsstring>
        <name>freeDouble3d</name>
        <param>
          <type>double ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="74" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a532ae5e19c8fd778b4c964176a7b1418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float* allocFloat1d</definition>
        <argsstring>(size_t m)</argsstring>
        <name>allocFloat1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="79" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a45b0ad39e132be4e80d4cb36dd7a837f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float **</type>
        <definition>float** allocFloat2d</definition>
        <argsstring>(size_t m, size_t n)</argsstring>
        <name>allocFloat2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="83" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a448f8a97b5642a40a305be37783ddd3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float ***</type>
        <definition>float*** allocFloat3d</definition>
        <argsstring>(size_t m, size_t n, size_t l)</argsstring>
        <name>allocFloat3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="87" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aee87abbe73442e0cbd97ebda24bd79d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocFloat1d</definition>
        <argsstring>(float **ptr, size_t newrow)</argsstring>
        <name>reallocFloat1d</name>
        <param>
          <type>float **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="91" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ab48436f9e9de0d2c4cf1c8a498f623af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocFloat2d</definition>
        <argsstring>(float ***ptr, size_t oldrow, size_t newrow, size_t col)</argsstring>
        <name>reallocFloat2d</name>
        <param>
          <type>float ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="95" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a76ee96e1f60e3a253dc3ad7daa28527e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocFloat3d</definition>
        <argsstring>(float ****ptr, size_t oldrow, size_t newrow, size_t col1, size_t col2)</argsstring>
        <name>reallocFloat3d</name>
        <param>
          <type>float ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="99" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1abc1142ec4de2ca14707d793174fd0f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeFloat1d</definition>
        <argsstring>(float **ptr)</argsstring>
        <name>freeFloat1d</name>
        <param>
          <type>float **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="103" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a2e4119d480261486ac6f679e08e31ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeFloat2d</definition>
        <argsstring>(float ***ptr, size_t m)</argsstring>
        <name>freeFloat2d</name>
        <param>
          <type>float ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="107" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1acfe219819fa297c10aa2c0f7b971d689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeFloat3d</definition>
        <argsstring>(float ****ptr, size_t m, size_t n)</argsstring>
        <name>freeFloat3d</name>
        <param>
          <type>float ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="111" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a1e932cd487007fdbd1ecbf2735074e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* allocChar1d</definition>
        <argsstring>(size_t m)</argsstring>
        <name>allocChar1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="116" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a40e1314389e6d75466689cd0ad221576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** allocChar2d</definition>
        <argsstring>(size_t m, size_t n)</argsstring>
        <name>allocChar2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="120" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a362685c323bcf9bb2c964ed3ce6efb3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char ***</type>
        <definition>char*** allocChar3d</definition>
        <argsstring>(size_t m, size_t n, size_t l)</argsstring>
        <name>allocChar3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="124" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a3f9aff48853931f2c180b7876938379c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocChar1d</definition>
        <argsstring>(char **ptr, size_t newrow)</argsstring>
        <name>reallocChar1d</name>
        <param>
          <type>char **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="128" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a35d549313b1dce7ed8bfcf38580fb532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocChar2d</definition>
        <argsstring>(char ***ptr, size_t oldrow, size_t newrow, size_t col)</argsstring>
        <name>reallocChar2d</name>
        <param>
          <type>char ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="132" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aa5dcaabef2cac3790016b34f88a5a6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocChar3d</definition>
        <argsstring>(char ****ptr, size_t oldrow, size_t newrow, size_t col1, size_t col2)</argsstring>
        <name>reallocChar3d</name>
        <param>
          <type>char ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="136" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a5177edfbc8cf0f07d0a1e4e24edc9118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeChar1d</definition>
        <argsstring>(char **ptr)</argsstring>
        <name>freeChar1d</name>
        <param>
          <type>char **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="140" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1af666c88324ad27080d462ec6c1fa87d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeChar2d</definition>
        <argsstring>(char ***ptr, size_t m)</argsstring>
        <name>freeChar2d</name>
        <param>
          <type>char ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="144" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a2c22e55cc0e94c3a77895bc12d00ea08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeChar3d</definition>
        <argsstring>(char ****ptr, size_t m, size_t n)</argsstring>
        <name>freeChar3d</name>
        <param>
          <type>char ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="148" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a0d95fc022c2c62fad196f20a66e8603a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd *</type>
        <definition>MatrixXcd* allocMatrixXcd1d</definition>
        <argsstring>(size_t m)</argsstring>
        <name>allocMatrixXcd1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="153" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a7348d898d8effef9f72ad069373d0f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd **</type>
        <definition>MatrixXcd** allocMatrixXcd2d</definition>
        <argsstring>(size_t m, size_t n)</argsstring>
        <name>allocMatrixXcd2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="158" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="158" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aa3e85b06be5594f4fb46e32013c5d97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd ***</type>
        <definition>MatrixXcd*** allocMatrixXcd3d</definition>
        <argsstring>(size_t m, size_t n, size_t l)</argsstring>
        <name>allocMatrixXcd3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="166" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="166" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a18ae919c8a78c8d6d6e66e10dbc6103c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeMatrixXcd1d</definition>
        <argsstring>(MatrixXcd **ptr)</argsstring>
        <name>freeMatrixXcd1d</name>
        <param>
          <type>MatrixXcd **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="177" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a3c3534e208dd35b87947214940871c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeMatrixXcd2d</definition>
        <argsstring>(MatrixXcd ***ptr, size_t m)</argsstring>
        <name>freeMatrixXcd2d</name>
        <param>
          <type>MatrixXcd ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="182" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a76ad4248c8e0c37ba210082494e02ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeMatrixXcd3d</definition>
        <argsstring>(MatrixXcd ****ptr, size_t m, size_t n)</argsstring>
        <name>freeMatrixXcd3d</name>
        <param>
          <type>MatrixXcd ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="190" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a123fb36d3877af7b86546215ba0a89e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> *</type>
        <definition>DoubleTensor* allocDoubleTensor1d</definition>
        <argsstring>(size_t m)</argsstring>
        <name>allocDoubleTensor1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="204" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a46b66a5e79d6d21560ccd332c880c511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> **</type>
        <definition>DoubleTensor** allocDoubleTensor2d</definition>
        <argsstring>(size_t m, size_t n)</argsstring>
        <name>allocDoubleTensor2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="209" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a7dc8d8e2faf060b6ff08059297abed6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> ***</type>
        <definition>DoubleTensor*** allocDoubleTensor3d</definition>
        <argsstring>(size_t m, size_t n, size_t l)</argsstring>
        <name>allocDoubleTensor3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="214" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ad5ce8e72390637d3079ce74b5b5276ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDoubleTensor1d</definition>
        <argsstring>(DoubleTensor **ptr, size_t newrow)</argsstring>
        <name>reallocDoubleTensor1d</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="220" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a08cf471a6b8caa128a17eae73d457fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDoubleTensor2d</definition>
        <argsstring>(DoubleTensor ***ptr, size_t oldrow, size_t newrow, size_t col)</argsstring>
        <name>reallocDoubleTensor2d</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="225" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a0106be117f3b2350b4b2afa1364f89dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDoubleTensor3d</definition>
        <argsstring>(DoubleTensor ****ptr, size_t oldrow, size_t newrow, size_t col1, size_t col2)</argsstring>
        <name>reallocDoubleTensor3d</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="230" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ae0e177577e93e434d1b241f5fd507f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDoubleTensor1d</definition>
        <argsstring>(DoubleTensor **ptr)</argsstring>
        <name>freeDoubleTensor1d</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="236" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a6f912a61d9ea2bf679c97508969d6d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDoubleTensor2d</definition>
        <argsstring>(DoubleTensor ***ptr, size_t m)</argsstring>
        <name>freeDoubleTensor2d</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="241" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aff71313f16bb4038f8ac37811a137f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDoubleTensor3d</definition>
        <argsstring>(DoubleTensor ****ptr, size_t m, size_t n)</argsstring>
        <name>freeDoubleTensor3d</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="246" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a90014f92012f81695395348c6346d412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> *</type>
        <definition>DoubleComplex* allocDoubleComplex1d</definition>
        <argsstring>(size_t m)</argsstring>
        <name>allocDoubleComplex1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="252" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a60d78f631ba707ce3430506afce6f895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> **</type>
        <definition>DoubleComplex** allocDoubleComplex2d</definition>
        <argsstring>(size_t m, size_t n)</argsstring>
        <name>allocDoubleComplex2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="257" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a40670625363357f25b4f31e60ceec21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> ***</type>
        <definition>DoubleComplex*** allocDoubleComplex3d</definition>
        <argsstring>(size_t m, size_t n, size_t l)</argsstring>
        <name>allocDoubleComplex3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="262" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ae5e9201a0d7eba9376116c0e7e516c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDoubleComplex1d</definition>
        <argsstring>(DoubleComplex **ptr, size_t newrow)</argsstring>
        <name>reallocDoubleComplex1d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="268" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a753aff622b31db47c4dde50c7d2fe523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDoubleComplex2d</definition>
        <argsstring>(DoubleComplex ***ptr, size_t oldrow, size_t newrow, size_t col)</argsstring>
        <name>reallocDoubleComplex2d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="273" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a97db2e3f49698994d16492331f046619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocDoubleComplex3d</definition>
        <argsstring>(DoubleComplex ****ptr, size_t oldrow, size_t newrow, size_t col1, size_t col2)</argsstring>
        <name>reallocDoubleComplex3d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="278" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ac482987cd156fd7f449f994ba04c4aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDoubleComplex1d</definition>
        <argsstring>(DoubleComplex **ptr)</argsstring>
        <name>freeDoubleComplex1d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="284" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a4d2ab08a9b82b6e01b55ca0def658d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDoubleComplex2d</definition>
        <argsstring>(DoubleComplex ***ptr, size_t m)</argsstring>
        <name>freeDoubleComplex2d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="289" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="289" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a67ebc006a328305f7b2b54d42619d41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeDoubleComplex3d</definition>
        <argsstring>(DoubleComplex ****ptr, size_t m, size_t n)</argsstring>
        <name>freeDoubleComplex3d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="294" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="294" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aa265fda5937761764ca1b338547b205f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* allocArray1d</definition>
        <argsstring>(size_t m, size_t size)</argsstring>
        <name>allocArray1d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="303" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a235014f3aef0304a918cff31a174632d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** allocArray2d</definition>
        <argsstring>(size_t m, size_t n, size_t size)</argsstring>
        <name>allocArray2d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="313" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="313" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a0a99c65092aea575f0d54b01c8b0f58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void ***</type>
        <definition>void*** allocArray3d</definition>
        <argsstring>(size_t m, size_t n, size_t l, size_t size)</argsstring>
        <name>allocArray3d</name>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="326" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="326" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a7ecd70ee2110d66f4763fccc4743e0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocArray1d</definition>
        <argsstring>(void **ptr, size_t newrow, size_t size)</argsstring>
        <name>reallocArray1d</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="339" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="339" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ab0597e5b06582506367d5f8a98bd8561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocArray2d</definition>
        <argsstring>(void ***ptr, size_t oldrow, size_t newrow, size_t col, size_t size)</argsstring>
        <name>reallocArray2d</name>
        <param>
          <type>void ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="348" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="348" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ac883ccfb6471f54d9297c348ce98f8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reallocArray3d</definition>
        <argsstring>(void ****ptr, size_t oldrow, size_t newrow, size_t col1, size_t col2, size_t size)</argsstring>
        <name>reallocArray3d</name>
        <param>
          <type>void ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="359" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="359" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a8c1377d960254d7416bf5849d699987d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeArray1d</definition>
        <argsstring>(void **ptr)</argsstring>
        <name>freeArray1d</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="371" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="371" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a02d990dcd44bda3d08548665c2bf2759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeArray2d</definition>
        <argsstring>(void ***ptr, size_t m)</argsstring>
        <name>freeArray2d</name>
        <param>
          <type>void ***</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="382" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="382" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ace4692e5df32da5ce249abfabf5ec389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeArray3d</definition>
        <argsstring>(void ****ptr, size_t m, size_t n)</argsstring>
        <name>freeArray3d</name>
        <param>
          <type>void ****</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="394" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="394" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ad5d71981509d1512d901f36f73a557e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyInt1d</definition>
        <argsstring>(int *dest, const int *src, size_t m)</argsstring>
        <name>copyInt1d</name>
        <param>
          <type>int *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="408" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a059231751c16694f0f3d629242223bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyInt1dPart</definition>
        <argsstring>(int *dest, const int *src, size_t ista, size_t iend)</argsstring>
        <name>copyInt1dPart</name>
        <param>
          <type>int *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ista</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="412" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="412" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1ae815774c7b7993dd93b370a3cf99e4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyInt2d</definition>
        <argsstring>(int **dest, const int **src, size_t m, size_t n)</argsstring>
        <name>copyInt2d</name>
        <param>
          <type>int **</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const int **</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="416" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="416" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1aee4e6efbd0296d3fba195aedade37a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyInt3d</definition>
        <argsstring>(int ***dest, const int ***src, size_t m, size_t n, size_t l)</argsstring>
        <name>copyInt3d</name>
        <param>
          <type>int ***</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const int ***</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="422" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="422" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1abe5b5b7e1666a108b705cef64f38d5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDouble1d</definition>
        <argsstring>(double *dest, const double *src, size_t m)</argsstring>
        <name>copyDouble1d</name>
        <param>
          <type>double *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="432" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="432" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a3a3e972507eacf11b8d94caa3b6f13bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDouble2d</definition>
        <argsstring>(double **dest, const double **src, size_t m, size_t n)</argsstring>
        <name>copyDouble2d</name>
        <param>
          <type>double **</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const double **</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="436" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="436" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a68324efa77ad0f4a53e69329743787bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDouble3d</definition>
        <argsstring>(double ***dest, const double ***src, size_t m, size_t n, size_t l)</argsstring>
        <name>copyDouble3d</name>
        <param>
          <type>double ***</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const double ***</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="442" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="442" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a220ec545dbcdab16953f79746d1f7e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyFloat1d</definition>
        <argsstring>(float *dest, const float *src, size_t m)</argsstring>
        <name>copyFloat1d</name>
        <param>
          <type>float *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="451" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="451" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1adcbf32562a15b9ea14ea956f04d205bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyFloat2d</definition>
        <argsstring>(float **dest, const float **src, size_t m, size_t n)</argsstring>
        <name>copyFloat2d</name>
        <param>
          <type>float **</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const float **</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="455" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="455" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a76ec9e3e65b9d294f6dbf876cb648ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyFloat3d</definition>
        <argsstring>(float ***dest, const float ***src, size_t m, size_t n, size_t l)</argsstring>
        <name>copyFloat3d</name>
        <param>
          <type>float ***</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const float ***</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="461" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="461" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a90f66d9d360764ca1712b2216dc70b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDoubleComplex1d</definition>
        <argsstring>(DoubleComplex *dest, const DoubleComplex *src, size_t m)</argsstring>
        <name>copyDoubleComplex1d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="470" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="470" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a0f6e684e9f767f9951e04253937db492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDoubleComplex2d</definition>
        <argsstring>(DoubleComplex **dest, const DoubleComplex **src, size_t m, size_t n)</argsstring>
        <name>copyDoubleComplex2d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> **</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> **</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="474" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="474" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a32787cc5ce73f1085b3b065dbd744598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDoubleComplex3d</definition>
        <argsstring>(DoubleComplex ***dest, const DoubleComplex ***src, size_t m, size_t n, size_t l)</argsstring>
        <name>copyDoubleComplex3d</name>
        <param>
          <type><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> ***</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref> ***</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="480" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="480" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1abd8437cea1eb6e0cf9c6a4f23ee6a698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDoubleTensor</definition>
        <argsstring>(DoubleTensor *dest, const DoubleTensor src)</argsstring>
        <name>copyDoubleTensor</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref></type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="489" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="489" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="memory_8cpp_1a452cbec85f095191f00ec64a3e836b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copyDoubleTensor1d</definition>
        <argsstring>(DoubleTensor **dest, const DoubleTensor *src, size_t m)</argsstring>
        <name>copyDoubleTensor1d</name>
        <param>
          <type><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> **</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/memory.cpp" line="495" column="1" bodyfile="/home/huijin/git/CCEX/src/memory.cpp" bodystart="495" bodyend="497"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>allocation<sp/>for<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>allocInt1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)allocArray1d(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>allocInt2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**)allocArray2d(m,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***<sp/>allocInt3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***)allocArray3d(m,<sp/>n,<sp/>l,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocInt1d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow){</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr,newrow,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocInt2d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,oldrow,newrow,col,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocInt3d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col2){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,oldrow,newrow,col1,col2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeInt1d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**ptr)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeInt2d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,<sp/>m);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeInt3d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>allocation<sp/>for<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>allocDouble1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)allocArray1d(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>allocDouble2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**)allocArray2d(m,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>allocDouble3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***)allocArray3d(m,<sp/>n,<sp/>l,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDouble1d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr,newrow,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDouble2d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,oldrow,newrow,col,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDouble3d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col2){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,oldrow,newrow,col1,col2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDouble1d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**ptr)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDouble2d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,<sp/>m);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDouble3d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>allocation<sp/>for<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>allocFloat1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)allocArray1d(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/>allocFloat2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**)allocArray2d(m,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">***<sp/>allocFloat3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">***)allocArray3d(m,<sp/>n,<sp/>l,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocFloat1d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr,newrow,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocFloat2d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,oldrow,newrow,col,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocFloat3d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col2){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,oldrow,newrow,col1,col2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeFloat1d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**ptr)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeFloat2d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,<sp/>m);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeFloat3d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>allocation<sp/>for<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>allocChar1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)allocArray1d(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>allocChar2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)allocArray2d(m,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>allocChar3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***)allocArray3d(m,<sp/>n,<sp/>l,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocChar1d(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr,newrow,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocChar2d(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,oldrow,newrow,col,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocChar3d(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col2){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,oldrow,newrow,col1,col2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeChar1d(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeChar2d(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,<sp/>m);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeChar3d(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatrixXcd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">MatrixXcd*<sp/>allocMatrixXcd1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd*<sp/>array<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd[m];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">MatrixXcd**<sp/>allocMatrixXcd2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd**<sp/>array<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd*[m];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd[n];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">MatrixXcd***<sp/>allocMatrixXcd3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd***<sp/>array<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd**[m];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd*[n];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array[i][j]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd[l];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeMatrixXcd1d(MatrixXcd<sp/>**ptr)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>*ptr;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeMatrixXcd2d(MatrixXcd<sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>(*ptr)[i];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>*ptr;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeMatrixXcd3d(MatrixXcd<sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>(*ptr)[i][j];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>(*ptr)[i];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>*ptr;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleTensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>*<sp/>allocDoubleTensor1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>*)allocArray1d(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>));</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>**<sp/>allocDoubleTensor2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>**)allocArray2d(m,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>));</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>***<sp/>allocDoubleTensor3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l){</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>***)allocArray3d(m,<sp/>n,<sp/>l,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>));</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDoubleTensor1d(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow){</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr,newrow,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>));</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDoubleTensor2d(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col){</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,oldrow,newrow,col,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>));</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDoubleTensor3d(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col2){</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,oldrow,newrow,col1,col2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>));</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDoubleTensor1d(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>**ptr){</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDoubleTensor2d(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,<sp/>m);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDoubleTensor3d(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleComplex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>*<sp/>allocDoubleComplex1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>*)allocArray1d(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>));</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>**<sp/>allocDoubleComplex2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>**)allocArray2d(m,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>));</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>***<sp/>allocDoubleComplex3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l){</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>***)allocArray3d(m,<sp/>n,<sp/>l,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>));</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDoubleComplex1d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow){</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr,newrow,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>));</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDoubleComplex2d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,oldrow,newrow,col,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>));</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocDoubleComplex3d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col2){</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,oldrow,newrow,col1,col2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>));</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDoubleComplex1d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>**ptr){</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)ptr);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDoubleComplex2d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)ptr,<sp/>m);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeDoubleComplex3d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray3d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****)ptr,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>basic<sp/>memory<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>allocation<sp/>for<sp/>1d<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>allocArray1d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>calloc(m,<sp/>size);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>allocation<sp/>for<sp/>2d<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>allocArray2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>allocArray1d(n,size);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>allocation<sp/>for<sp/>3d<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***<sp/>allocArray3d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>***ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)calloc(m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>allocArray2d(n,l,size);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocArray1d(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc(*ptr,size*newrow);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Memory<sp/>reallocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocArray2d(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)realloc(*ptr,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)*newrow);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>oldrow;<sp/>row<sp/>&lt;<sp/>newrow;<sp/>row++){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr)[row]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)allocArray1d(col,size);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Memory<sp/>reallocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reallocArray3d(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">****<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newrow,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)realloc(*ptr,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)*newrow);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>oldrow;<sp/>row<sp/>&lt;<sp/>newrow;<sp/>row++){</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr)[row]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)allocArray2d(col1,col2,size);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Memory<sp/>reallocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//free<sp/>memory<sp/>1d<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeArray1d(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**ptr)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr==NULL<sp/>||<sp/>*ptr==NULL)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*ptr);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr=NULL;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//free<sp/>memory<sp/>2d<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeArray2d(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>***ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL<sp/>||<sp/>*ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeArray1d(&amp;((*ptr)[i]));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*ptr);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//free<sp/>memory<sp/>3d<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeArray3d(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>****ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr==NULL<sp/>||<sp/>*ptr==NULL)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeArray2d(&amp;((*ptr)[i]),<sp/>n);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*ptr);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr=NULL;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copy<sp/>dynamically<sp/>allocated<sp/>array<sp/>------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyInt1d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest,src,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*m);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyInt1dPart(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ista,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iend){</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest,src+ista,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*(iend-ista+1));</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyInt2d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i],src[i],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*n);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyInt3d(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l){</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>j++){</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i][j],src[i][j],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*l);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDouble1d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest,src,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*m);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDouble2d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i],src[i],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*n);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDouble3d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l){</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>j++){</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i][j],src[i][j],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*l);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyFloat1d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest,src,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)*m);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyFloat2d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i],src[i],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)*n);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyFloat3d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">***<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">***<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l){</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>j++){</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i][j],src[i][j],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)*l);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleComplex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDoubleComplex1d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest,src,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>)*m);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDoubleComplex2d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>**dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>**src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i],src[i],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>)*n);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDoubleComplex3d(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>***dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref><sp/>***src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l){</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;m;<sp/>i++){</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>j++){</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest[i][j],src[i][j],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleComplex" kindref="compound">DoubleComplex</ref>)*l);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleTensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDoubleTensor(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>src){</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;xx<sp/>=<sp/>src.xx;<sp/><sp/><sp/><sp/>dest-&gt;xy<sp/>=<sp/>src.xy;<sp/><sp/><sp/><sp/>dest-&gt;<ref refid="structDoubleTensor_1a78677cd002a23db74c7438a9e51aa264" kindref="member">xz</ref><sp/>=<sp/>src.<ref refid="structDoubleTensor_1a78677cd002a23db74c7438a9e51aa264" kindref="member">xz</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;yx<sp/>=<sp/>src.yx;<sp/><sp/><sp/><sp/>dest-&gt;yy<sp/>=<sp/>src.yy;<sp/><sp/><sp/><sp/>dest-&gt;<ref refid="structDoubleTensor_1a0311ca5318233d1cd146c7f2ba0564a2" kindref="member">yz</ref><sp/>=<sp/>src.<ref refid="structDoubleTensor_1a0311ca5318233d1cd146c7f2ba0564a2" kindref="member">yz</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;zx<sp/>=<sp/>src.zx;<sp/><sp/><sp/><sp/>dest-&gt;zy<sp/>=<sp/>src.zy;<sp/><sp/><sp/><sp/>dest-&gt;<ref refid="structDoubleTensor_1af3fec476b850d04a0f1e7a4cfbaceb2d" kindref="member">zz</ref><sp/>=<sp/>src.<ref refid="structDoubleTensor_1af3fec476b850d04a0f1e7a4cfbaceb2d" kindref="member">zz</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDoubleTensor1d(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>**dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest,src,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDoubleTensor" kindref="compound">DoubleTensor</ref>)*m);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/huijin/git/CCEX/src/memory.cpp"/>
  </compounddef>
</doxygen>
