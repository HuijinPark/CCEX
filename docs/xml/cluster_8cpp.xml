<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="cluster_8cpp" kind="file">
    <compoundname>cluster.cpp</compoundname>
    <includes refid="cluster_8h" local="yes">../include/cluster.h</includes>
    <includes refid="utilities_8h" local="yes">../include/utilities.h</includes>
    <includes refid="memory_8h" local="yes">../include/memory.h</includes>
    <includes refid="cluster__hash_8h" local="yes">../include/cluster_hash.h</includes>
    <incdepgraph>
      <node id="248">
        <label>stdint.h</label>
      </node>
      <node id="243">
        <label>stdlib.h</label>
      </node>
      <node id="241">
        <label>../include/cluster_hash.h</label>
        <link refid="cluster__hash_8h_source"/>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
      </node>
      <node id="247">
        <label>stddef.h</label>
      </node>
      <node id="238">
        <label>bath.h</label>
        <link refid="bath_8h_source"/>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
      </node>
      <node id="239">
        <label>qubit.h</label>
        <link refid="qubit_8h_source"/>
        <childnode refid="233" relation="include">
        </childnode>
      </node>
      <node id="234">
        <label>Eigen/Dense</label>
      </node>
      <node id="246">
        <label>../zlib/uthash/src/uthash.h</label>
      </node>
      <node id="242">
        <label>string.h</label>
      </node>
      <node id="237">
        <label>unistd.h</label>
      </node>
      <node id="232">
        <label>general.h</label>
        <link refid="general_8h_source"/>
        <childnode refid="233" relation="include">
        </childnode>
      </node>
      <node id="245">
        <label>time.h</label>
      </node>
      <node id="235">
        <label>iostream</label>
      </node>
      <node id="231">
        <label>../include/cluster.h</label>
        <link refid="cluster_8h_source"/>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
      </node>
      <node id="240">
        <label>../include/memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="233" relation="include">
        </childnode>
      </node>
      <node id="236">
        <label>mpi.h</label>
      </node>
      <node id="230">
        <label>/home/huijin/git/CCEX/src/cluster.cpp</label>
        <link refid="cluster.cpp"/>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>utilities.h</label>
        <link refid="utilities_8h_source"/>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
      </node>
      <node id="244">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cluster_8cpp_1a682c076be5339c3b7c39bc75129ac002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
        <definition>Cluster* Cluster_init</definition>
        <argsstring>()</argsstring>
        <name>Cluster_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="9" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="9" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1acfd4c6ef5622dbfa59942c1a7617c1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_clusterize</definition>
        <argsstring>(Cluster *cls, BathArray *ba, Config *config)</argsstring>
        <name>Cluster_clusterize</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structConfig" kindref="compound">Config</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>!if (strcasecmp(cls-&gt;method, &quot;pcce&quot;)==0){ ! double** centerpositions = NULL; // start from 0 ! int centerarraylength = 0; ! int* spinidx = NULL ; // start from 0 ! getCenters(&amp;centerpositions, &amp;centerarraylength, &amp;spinidx, ba); ! int BathArray_getNspin(ba) !} </para>        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="20" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="20" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a1e9067d49b0b0c7cc731eabfd0aad2c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_freeAll</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_freeAll</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="110" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a4c26ec88127ff5ef995e46cb615968af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_report</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_report</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="117" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="117" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1aeaca0e2ff29843390be43e8bf9b3e6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_reportNk</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_reportNk</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="139" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a5ad4b33c688b66d9624458663fb6b0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_reportClusinfo</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_reportClusinfo</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="144" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="144" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a3903fe87910d2270893d1e729a0ea446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reportClusinfo</definition>
        <argsstring>(int ***clusinfo, int order)</argsstring>
        <name>reportClusinfo</name>
        <param>
          <type>int ***</type>
          <declname>clusinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="182" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="182" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1ac7679f34d7eeded23349753f0755b1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_allocNk</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_allocNk</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="220" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1ae45a1c18649e68c10d42cc910ffbb47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_allocClusinfo</definition>
        <argsstring>(Cluster *cls, int order)</argsstring>
        <name>Cluster_allocClusinfo</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="225" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="225" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1af03141d021c7ab901adcbfde55a36b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Cluster_setClusinfo_addcluster</definition>
        <argsstring>(Cluster *cls, int order, int iter, int *cluster)</argsstring>
        <name>Cluster_setClusinfo_addcluster</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cluster</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="236" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="236" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1ad278615a0ca28bd1c208e3a08c73489e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_setClusinfo_chgcluster</definition>
        <argsstring>(Cluster *cls, int order, int *cluster, int ic)</argsstring>
        <name>Cluster_setClusinfo_chgcluster</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cluster</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="271" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="271" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1adc3dd4b0e09252cdbdc1d90002c8b719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_setClusinfo_chgiter</definition>
        <argsstring>(Cluster *cls, int order, int iter, int ic)</argsstring>
        <name>Cluster_setClusinfo_chgiter</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="280" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="280" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a651e8291700f709f85b3f856ba539a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Cluster_getClusinfo_ncluster</definition>
        <argsstring>(Cluster *cls, int order)</argsstring>
        <name>Cluster_getClusinfo_ncluster</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="289" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="289" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a6b9c8c9df234300131441941b4bcedca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* Cluster_getClusinfo_itercluster</definition>
        <argsstring>(Cluster *cls, int order, int ic)</argsstring>
        <name>Cluster_getClusinfo_itercluster</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="296" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="296" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a85421142bc01aff90072f601750630d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Cluster_getClusinfo_iter</definition>
        <argsstring>(Cluster *cls, int order, int ic)</argsstring>
        <name>Cluster_getClusinfo_iter</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="304" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="304" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a7c7ce96f1b498cd96f9947d19b36533f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* Cluster_getClusinfo_cluster_copy</definition>
        <argsstring>(Cluster *cls, int order, int ic)</argsstring>
        <name>Cluster_getClusinfo_cluster_copy</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="312" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="312" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a5583bd2d256b68c05ae64321bedd9ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int ***</type>
        <definition>int*** Cluster_getClusinfo</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_getClusinfo</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="322" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="322" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a2873972ff65570fa0062778501cc1e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* Cluster_getMethod</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_getMethod</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="328" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="328" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a47d752dbb15a2ffb42196cdd3954847b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Cluster_getOrder</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_getOrder</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="332" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a3dda4466570a4fc20cae5575985f6bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Cluster_getAddsubclus</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_getAddsubclus</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="336" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a4bd76920f0cef240c3a31124c14ca203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* Cluster_getNk</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_getNk</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="340" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a14d2e85d18ec2ea621e6953d77716e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Cluster_getNk_order</definition>
        <argsstring>(Cluster *cls, int i)</argsstring>
        <name>Cluster_getNk_order</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="344" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="344" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1aa90dc64438d37b32233d63477faf1f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_setOrder</definition>
        <argsstring>(Cluster *cls, int order)</argsstring>
        <name>Cluster_setOrder</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="356" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="356" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1ababf9e54916b278727d4b425b3cc8904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_setMethod</definition>
        <argsstring>(Cluster *cls, char *method)</argsstring>
        <name>Cluster_setMethod</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="360" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="360" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1acbb70ded1b186b5dc918b75fa4d5eb70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_setAddsubclus</definition>
        <argsstring>(Cluster *cls, bool addsubclus)</argsstring>
        <name>Cluster_setAddsubclus</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addsubclus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="363" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1ac788d747aa9c4b77e643ba5f0419aae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_setNk</definition>
        <argsstring>(Cluster *cls, int *nk)</argsstring>
        <name>Cluster_setNk</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="366" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1a48f1747da85a8ff82fcc9aa5cf940122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_freeNk</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_freeNk</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="371" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="cluster_8cpp_1aa5731c0e0c23755bd3616c71eb79c5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cluster_freeClusinfo</definition>
        <argsstring>(Cluster *cls)</argsstring>
        <name>Cluster_freeClusinfo</name>
        <param>
          <type><ref refid="structCluster" kindref="compound">Cluster</ref> *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/cluster.cpp" line="375" column="1" bodyfile="/home/huijin/git/CCEX/src/cluster.cpp" bodystart="375" bodyend="394"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/cluster.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/utilities.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/cluster_hash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>High<sp/>Level<sp/>--------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>Cluster_init(){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls<sp/>=<sp/>(<ref refid="structCluster" kindref="compound">Cluster</ref>*)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCluster" kindref="compound">Cluster</ref>));</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>Cluster_setOrder(cls,<sp/>0);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>Cluster_setAddsubclus(cls,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1a1385a76b03a7f2f862526ff2bf449755" kindref="member">nk</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1acfc81556c4ed78e0bce4c36119fe7150" kindref="member">method</ref>[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_clusterize(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/><ref refid="structConfig" kindref="compound">Config</ref>*<sp/>config){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order<sp/>=<sp/>Cluster_getOrder(cls);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Cluster_allocClusinfo(cls,<sp/>order);<sp/></highlight><highlight class="comment">//<sp/>clusinfo[order+1]<sp/>:<sp/>0<sp/>~<sp/>order,<sp/>clusinfo[i][0][0]<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order==0){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank==0){printf(</highlight><highlight class="stringliteral">&quot;\n\t<sp/>Clustering<sp/>0th<sp/>order<sp/>...<sp/>\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/>1){<sp/></highlight><highlight class="comment">//<sp/>For<sp/>pCCE,<sp/>+<sp/>k=1<sp/>(order<sp/>=<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank==0){printf(</highlight><highlight class="stringliteral">&quot;\n\t<sp/>Clustering<sp/>1st<sp/>order<sp/>...<sp/>\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cluster[1]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spinidx<sp/>=<sp/>0;<sp/>spinidx<sp/>&lt;<sp/>nspin;<sp/>spinidx++){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cluster[0]<sp/>=<sp/>spinidx;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cluster_setClusinfo_addcluster(cls,<sp/>order,<sp/>iter,<sp/>cluster);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>&gt;<sp/>1){<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>cmap<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>connectivity<sp/>map<sp/>:<sp/>cmap[nspin][nspin]<sp/>=<sp/>1<sp/>if<sp/>connected<sp/>else<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/>stmap<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>strength<sp/>map<sp/>:<sp/>stmap[nspin][nspin]<sp/>=<sp/>strength</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>spmap<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>sparse<sp/>map<sp/>:<sp/>spmap[nspin][ncol]<sp/>=<sp/>n<sp/>connected<sp/>spin<sp/>+<sp/>1d<sp/>array<sp/>of<sp/>connected<sp/>spins<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rdip<sp/>=<sp/>Config_getRdip(config);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rdipcut<sp/>=<sp/>Config_getRdipcut(config);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connectivity<sp/>Map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_connectivity(&amp;cmap,<sp/>&amp;stmap,<sp/>ba,<sp/>rdip,<sp/>rdipcut);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>makeSparsemap(&amp;spmap,<sp/>cmap,<sp/>nspin);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcasecmp(cls-&gt;<ref refid="structCluster_1acfc81556c4ed78e0bce4c36119fe7150" kindref="member">method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;cce&quot;</highlight><highlight class="normal">)==0<sp/>||<sp/>strcasecmp(cls-&gt;<ref refid="structCluster_1acfc81556c4ed78e0bce4c36119fe7150" kindref="member">method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;gcce&quot;</highlight><highlight class="normal">)==0){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterizeHash(cls,<sp/>nspin,<sp/>spmap,<sp/>stmap);<sp/></highlight><highlight class="comment">//<sp/>clusterize<sp/>+<sp/>solve<sp/>tilde</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if<sp/>(strcmp(cls-&gt;method,<sp/>&quot;dsj&quot;)==0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>clusterizeDsj(cls,<sp/>cmap,<sp/>stmap,<sp/>spmap,<sp/>ba,<sp/>config);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if<sp/>(strcmp(cls-&gt;method,<sp/>&quot;itb&quot;)==0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>clusterizeItb(cls,<sp/>cmap,<sp/>stmap,<sp/>spmap,<sp/>ba,<sp/>config);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if<sp/>(strcmp(cls-&gt;method,<sp/>&quot;dsjitb&quot;)==0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>clusterizeDsjitb(cls,<sp/>cmap,<sp/>stmap,<sp/>spmap,<sp/>ba,<sp/>config);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if<sp/>(strcmp(cls-&gt;method,<sp/>&quot;pcce&quot;)==0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>clusterizePcce(cls,<sp/>cmap,<sp/>stmap,<sp/>spmap,<sp/>ba,<sp/>config);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>clusterize:<sp/>method<sp/>is<sp/>not<sp/>defined\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeInt2d(&amp;cmap,nspin);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeInt2d(&amp;spmap,nspin);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeFloat2d(&amp;stmap,nspin);<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>Cluster_clusterize:<sp/>order(%d)<sp/>is<sp/>not<sp/>defined\n&quot;</highlight><highlight class="normal">,order);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>method<sp/>=<sp/>Cluster_getMethod(cls);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcasecmp(method,<sp/></highlight><highlight class="stringliteral">&quot;gcce&quot;</highlight><highlight class="normal">)!=0<sp/>and<sp/>strcasecmp(method,<sp/></highlight><highlight class="stringliteral">&quot;cce&quot;</highlight><highlight class="normal">)!=0){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cls<sp/>-&gt;<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashCluster" kindref="compound">HashCluster</ref>*<sp/>hashClusters<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertClusinfoToHash(&amp;hashClusters,<sp/>cls);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cluster_freeClusinfo(cls);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>tilde,<sp/>hash<sp/>-&gt;<sp/>cls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solveTilde(&amp;hashClusters,<sp/>cls,<sp/>nspin);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeHashCluster(&amp;hashClusters,<sp/>order);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcasecmp(method,<sp/></highlight><highlight class="stringliteral">&quot;gcce&quot;</highlight><highlight class="normal">)!=0){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cluster_setClusinfo_chgiter(cls,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_freeAll(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;cls);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low<sp/>Level<sp/>--------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>report</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_report(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>printTitle(</highlight><highlight class="stringliteral">&quot;Structure<sp/>Cluster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;General<sp/>properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;order&quot;</highlight><highlight class="normal">,Cluster_getOrder(cls));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementChar(</highlight><highlight class="stringliteral">&quot;method&quot;</highlight><highlight class="normal">,cls-&gt;<ref refid="structCluster_1acfc81556c4ed78e0bce4c36119fe7150" kindref="member">method</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementBool(</highlight><highlight class="stringliteral">&quot;addsubclus&quot;</highlight><highlight class="normal">,Cluster_getAddsubclus(cls));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cls-&gt;<ref refid="structCluster_1a1385a76b03a7f2f862526ff2bf449755" kindref="member">nk</ref>!=NULL){</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>clusters<sp/>for<sp/>each<sp/>order&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cluster_reportNk(cls);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>!=NULL){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Clustering<sp/>information&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cluster_reportClusinfo(cls);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_reportNk(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order<sp/>=<sp/>Cluster_getOrder(cls);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt1dIdx(</highlight><highlight class="stringliteral">&quot;nk&quot;</highlight><highlight class="normal">,Cluster_getNk(cls),order+1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_reportClusinfo(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order<sp/>=<sp/>Cluster_getOrder(cls);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>%-18s:<sp/><sp/><sp/>\n\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;clusinfo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0-th<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter_0th<sp/>=<sp/>Cluster_getClusinfo_itercluster(cls,0,0)[0];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncluster_0th<sp/>=<sp/>Cluster_getClusinfo_ncluster(cls,0);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/>0-th<sp/>order<sp/>...<sp/>\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/>Cluster[0][%5d]<sp/>:<sp/>%3d<sp/>(Iter)\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,0,iter_0th);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%10s<sp/>Total<sp/>0-Cluster<sp/>#<sp/>:<sp/><sp/>%d<sp/>#<sp/>\n\n\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,ncluster_0th);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>order;<sp/>i++){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%10s<sp/>%d-th<sp/>order<sp/>...<sp/>\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncluster<sp/>=<sp/>Cluster_getClusinfo_ncluster(cls,<sp/>i);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j&lt;=<sp/>ncluster;<sp/>j++){</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(j&lt;5<sp/>||<sp/>j&gt;ncluster-4)){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>itercluster<sp/>=<sp/>Cluster_getClusinfo_itercluster(cls,i,j);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>itercluster[0];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/>Cluster[%d][%5d]<sp/>:<sp/>%3d<sp/>[&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,i,j,iter);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>i;<sp/>k++){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%-3d&quot;</highlight><highlight class="normal">,itercluster[k]);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>!=<sp/>i){<sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>j==5){</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%10s<sp/>Total<sp/>%d-Cluster<sp/>#<sp/>:<sp/><sp/>%d<sp/>#<sp/>\n\n\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,i,ncluster);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportClusinfo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***<sp/>clusinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0-th<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter_0th<sp/>=<sp/>clusinfo[0][0][0];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncluster_0th<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/>0-th<sp/>order<sp/>...<sp/>\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/>Cluster[0][%5d]<sp/>:<sp/>%3d<sp/>(Iter)\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,0,iter_0th);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%10s<sp/>Total<sp/>0-Cluster<sp/>#<sp/>:<sp/><sp/>%d<sp/>#<sp/>\n\n\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,ncluster_0th);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>order;<sp/>i++){</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%10s<sp/>%d-th<sp/>order<sp/>...<sp/>\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncluster<sp/>=<sp/>clusinfo[i][0][0]-1;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j&lt;=<sp/>ncluster;<sp/>j++){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(j&lt;5<sp/>||<sp/>j&gt;ncluster-4)){</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>itercluster<sp/>=<sp/>&amp;(clusinfo[i][j][0]);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>itercluster[0];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/>Cluster[%d][%5d]<sp/>:<sp/>%3d<sp/>[&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,i,j,iter);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>i;<sp/>k++){</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%-3d&quot;</highlight><highlight class="normal">,itercluster[k]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>!=<sp/>i){<sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>j==5){</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10s<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%10s<sp/>Total<sp/>%d-Cluster<sp/>#<sp/>:<sp/><sp/>%d<sp/>#<sp/>\n\n\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,i,ncluster);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low<sp/>Level<sp/>--------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_allocNk(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){<sp/></highlight><highlight class="comment">//<sp/>0:0-th<sp/>...<sp/>k:k-th<sp/>order<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>cls-&gt;<ref refid="structCluster_1ae77394af156e2e278a34f12e83d66cb7" kindref="member">order</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1a1385a76b03a7f2f862526ff2bf449755" kindref="member">nk</ref><sp/>=<sp/>allocInt1d(length);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_allocClusinfo(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order){</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***)allocArray1d(order+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;=order;<sp/>i++){</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[i]<sp/>=<sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[i][0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[i][0][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cluster_setClusinfo_addcluster(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cluster){</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order==0){</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Cluster_setClusinfo_addcluster:<sp/>at<sp/>0-th<sp/>order,<sp/>you<sp/>cannot<sp/>add<sp/>cluster\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>==NULL){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Cluster_setClusinfo_addcluster:<sp/>clusinfo<sp/>is<sp/>not<sp/>allocated\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>1<sp/>){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>Cluster_setClusinfo_addcluster:<sp/>iter<sp/>is<sp/>not<sp/>1<sp/>when<sp/>you<sp/>add<sp/>new<sp/>cluster<sp/>...<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncluster_old<sp/>=<sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][0][0];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncluster_new<sp/>=<sp/>ncluster_old<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ic<sp/>=<sp/>ncluster_new<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>new<sp/>cluster<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>number<sp/>of<sp/>cluster<sp/>at<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][0][0]<sp/>=<sp/>ncluster_new;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocInt2d(&amp;(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order]),ncluster_old,ncluster_new,<sp/>order+1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>copyInt1d(&amp;(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][ic][1]),cluster,order+1);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>iter<sp/>at<sp/>0-th<sp/>element<sp/>(It<sp/>is<sp/>the<sp/>number<sp/>how<sp/>many<sp/>it<sp/>will<sp/>calculated)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][ic][0]<sp/>=<sp/>iter;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ic;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_setClusinfo_chgcluster(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cluster,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ic){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order==0){</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>Cluster_setClusinfo_chgcluster<sp/>:<sp/>at<sp/>0-th<sp/>order,<sp/>you<sp/>cannot<sp/>change<sp/>cluster<sp/>information\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;For<sp/>the<sp/>0th<sp/>order,<sp/>you<sp/>can<sp/>only<sp/>change<sp/>iter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>copyInt1d(&amp;(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][ic][1]),cluster,order);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_setClusinfo_chgiter(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ic){</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order!=0<sp/>&amp;&amp;<sp/>ic==0){</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>Cluster_setClusinfo_chgiter<sp/>:<sp/>order!=0,<sp/>ic=0<sp/>is<sp/>not<sp/>the<sp/>cluster<sp/>index\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][ic][0]<sp/>=<sp/>iter;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cluster_getClusinfo_ncluster(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order){</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order==0){</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][0][0]-1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Cluster_getClusinfo_itercluster(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ic){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order!=0<sp/>&amp;&amp;<sp/>ic==0){</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>Cluster_getClusinfo_cluster<sp/>:<sp/>order!=0,<sp/>ic=0<sp/>is<sp/>not<sp/>the<sp/>cluster<sp/>index\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][ic];</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cluster_getClusinfo_iter(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ic){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order!=0<sp/>&amp;&amp;<sp/>ic==0){</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>Cluster_getClusinfo_cluster<sp/>:<sp/>order!=0,<sp/>ic=0<sp/>is<sp/>not<sp/>the<sp/>cluster<sp/>index\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][ic][0];</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Cluster_getClusinfo_cluster_copy(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ic){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order==0){</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>Cluster_getClusinfo_cluster_copy<sp/>:<sp/>at<sp/>0-th<sp/>order,<sp/>you<sp/>cannot<sp/>get<sp/>cluster<sp/>information\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cluster<sp/>=<sp/>allocInt1d(order);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>copyInt1d(cluster,&amp;(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[order][ic][1]),order);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cluster;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***<sp/>Cluster_getClusinfo(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Cluster_getMethod(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1acfc81556c4ed78e0bce4c36119fe7150" kindref="member">method</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cluster_getOrder(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1ae77394af156e2e278a34f12e83d66cb7" kindref="member">order</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Cluster_getAddsubclus(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1a33621fac416bdd2eea40805e74730748" kindref="member">addsubclus</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Cluster_getNk(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1a1385a76b03a7f2f862526ff2bf449755" kindref="member">nk</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cluster_getNk_order(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;cls-&gt;order<sp/>&amp;&amp;<sp/>i&gt;=0){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;<ref refid="structCluster_1a1385a76b03a7f2f862526ff2bf449755" kindref="member">nk</ref>[i];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Cluster_getNk_order:<sp/>i<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_setOrder(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order){</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1ae77394af156e2e278a34f12e83d66cb7" kindref="member">order</ref><sp/>=<sp/>order;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_setMethod(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>method){</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(cls-&gt;<ref refid="structCluster_1acfc81556c4ed78e0bce4c36119fe7150" kindref="member">method</ref>,<sp/>method);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_setAddsubclus(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addsubclus){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1a33621fac416bdd2eea40805e74730748" kindref="member">addsubclus</ref><sp/>=<sp/>addsubclus;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_setNk(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>nk){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>copyInt1d(cls-&gt;<ref refid="structCluster_1a1385a76b03a7f2f862526ff2bf449755" kindref="member">nk</ref>,nk,cls-&gt;<ref refid="structCluster_1ae77394af156e2e278a34f12e83d66cb7" kindref="member">order</ref>+1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_freeNk(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>freeInt1d(&amp;(cls-&gt;<ref refid="structCluster_1a1385a76b03a7f2f862526ff2bf449755" kindref="member">nk</ref>));</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cluster_freeClusinfo(<ref refid="structCluster" kindref="compound">Cluster</ref>*<sp/>cls){</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order<sp/>=<sp/>cls-&gt;<ref refid="structCluster_1ae77394af156e2e278a34f12e83d66cb7" kindref="member">order</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>!=NULL){</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;=order;<sp/>i++){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncluster<sp/>=<sp/>Cluster_getClusinfo_ncluster(cls,i);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0){</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)&amp;(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[i]),1);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)&amp;(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>[i]),ncluster);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls-&gt;<ref refid="structCluster_1afd65bde6cf52f123d1d1ab7a3fd9805c" kindref="member">clusinfo</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/huijin/git/CCEX/src/cluster.cpp"/>
  </compounddef>
</doxygen>
