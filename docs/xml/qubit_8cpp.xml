<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="qubit_8cpp" kind="file">
    <compoundname>qubit.cpp</compoundname>
    <includes refid="qubit_8h" local="yes">../include/qubit.h</includes>
    <includes refid="utilities_8h" local="yes">../include/utilities.h</includes>
    <includes refid="memory_8h" local="yes">../include/memory.h</includes>
    <includes refid="hamiltonian_8h" local="yes">../include/hamiltonian.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">float.h</includes>
    <incdepgraph>
      <node id="370">
        <label>../include/hamiltonian.h</label>
        <link refid="hamiltonian_8h_source"/>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="362">
        <label>/home/huijin/git/CCEX/src/qubit.cpp</label>
        <link refid="qubit.cpp"/>
        <childnode refid="363" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
      </node>
      <node id="372">
        <label>float.h</label>
      </node>
      <node id="371">
        <label>errno.h</label>
      </node>
      <node id="363">
        <label>../include/qubit.h</label>
        <link refid="qubit_8h_source"/>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="365">
        <label>Eigen/Dense</label>
      </node>
      <node id="368">
        <label>unistd.h</label>
      </node>
      <node id="366">
        <label>iostream</label>
      </node>
      <node id="369">
        <label>../include/memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="367">
        <label>mpi.h</label>
      </node>
      <node id="364">
        <label>utilities.h</label>
        <link refid="utilities_8h_source"/>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="qubit_8cpp_1aa167a0f05ddabdfd98cc9a617adae9d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
        <definition>QubitArray* QubitArray_init</definition>
        <argsstring>()</argsstring>
        <name>QubitArray_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="11" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="11" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a9f8741d042da0cdf68d09d0b64cb036b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_freeAll</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_freeAll</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="33" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a45741e296e28f50e77a289798d9f6282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QubitArray_dim</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_dim</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="41" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a9e6e90d7a9584308757865ec6b19ddb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QubitArray_dimQubit_i</definition>
        <argsstring>(QubitArray *qa, int i)</argsstring>
        <name>QubitArray_dimQubit_i</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="50" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a6eedd653b6800f121259b2e2e089a9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QubitArray_mindist</definition>
        <argsstring>(double *xyz, QubitArray *qa)</argsstring>
        <name>QubitArray_mindist</name>
        <param>
          <type>double *</type>
          <declname>xyz</declname>
        </param>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="55" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="55" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ac9ceba40cf962f89c8e6d1132b9df95c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setPsiaPsib_fromQubit</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_setPsiaPsib_fromQubit</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="74" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="74" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ac4b95a476edfc9104098f7e48ff2f2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setPsiaPsib_fromIdx</definition>
        <argsstring>(QubitArray *qa, float *bfield)</argsstring>
        <name>QubitArray_setPsiaPsib_fromIdx</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bfield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="95" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="95" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1aafad57f5c068bdca6420c8955c37dec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setPsi0_fromPsiaPsib</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_setPsi0_fromPsiaPsib</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="144" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="144" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a122e8cc3fe04fda22236538ab1330e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QubitArray_getQubitIdx_fromName</definition>
        <argsstring>(QubitArray *qa, const char *name)</argsstring>
        <name>QubitArray_getQubitIdx_fromName</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="162" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="162" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a7e7823e37fdb6382040ae9a06b2a5e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd **</type>
        <definition>MatrixXcd** QubitArray_PauliOperators</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_PauliOperators</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="172" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="172" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a5b696572e7a81abe12ec84088a69b5a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd *</type>
        <definition>MatrixXcd* QubitArray_PauliOperator_fromPsiaPsib</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_PauliOperator_fromPsiaPsib</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="187" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="187" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a5b6edc8e889cd8f52085311a12cc3043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_TotalHamil</definition>
        <argsstring>(QubitArray *qa, MatrixXcd **sigmas, float *bfield)</argsstring>
        <name>QubitArray_TotalHamil</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bfield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="199" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="199" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1aaf6cbe6a72b0007d02fb43f47be4d5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_SingleHamil</definition>
        <argsstring>(QubitArray *qa, MatrixXcd **sigmas, int iq, float *bfield)</argsstring>
        <name>QubitArray_SingleHamil</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bfield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="226" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="226" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a51e614ecf6dc8210b7917b0312191ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_ZeemanHamil</definition>
        <argsstring>(QubitArray *qa, MatrixXcd **sigmas, int iq, float *bfield)</argsstring>
        <name>QubitArray_ZeemanHamil</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bfield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="237" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="237" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a1259898fa6ddba6bd7e06ea4d7e369a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_DetuningHamil</definition>
        <argsstring>(QubitArray *qa, MatrixXcd **sigmas, int iq)</argsstring>
        <name>QubitArray_DetuningHamil</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="252" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="252" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a8c70c7b57898ae70255cb38924209c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_OverhausHamil</definition>
        <argsstring>(QubitArray *qa, MatrixXcd **sigmas, int iq)</argsstring>
        <name>QubitArray_OverhausHamil</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="267" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="267" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ac2e1f870ff753b199cc23bf1e5343753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_ZFSHamil</definition>
        <argsstring>(QubitArray *qa, MatrixXcd **sigmas, int iq)</argsstring>
        <name>QubitArray_ZFSHamil</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="282" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="282" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a67df31b547ae3a0fb500b9e110eaa09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_InteractionHamil</definition>
        <argsstring>(QubitArray *qa, MatrixXcd **sigmas, int iq, int jq)</argsstring>
        <name>QubitArray_InteractionHamil</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="296" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="296" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a4ea75a66fcf852fa6ef49a13a212e737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_Rho0</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_Rho0</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="320" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ac1ac692b91c0b5c5dfd534436ae584d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_allocQubit</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_allocQubit</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="336" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a0ba58b396ae67f2a2ea954e434595b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_allocIntmap</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_allocIntmap</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="342" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="342" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1af8452e46c7d5bf255f6e78a884b40699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_alloc_alphaidx_betaidx</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_alloc_alphaidx_betaidx</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="354" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a6b43bec4e2ab31570388b3601a32c981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setNqubit</definition>
        <argsstring>(QubitArray *qa, const int nqubit)</argsstring>
        <name>QubitArray_setNqubit</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="360" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="360" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a6aeed5e74fbbc8f32548aa9d2f4ac8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setOverhaus</definition>
        <argsstring>(QubitArray *qa, const bool overhaus)</argsstring>
        <name>QubitArray_setOverhaus</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>overhaus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="364" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a103c7892763b345321616cf69a417e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_set_alphaidx</definition>
        <argsstring>(QubitArray *qa, const int *alphaidx)</argsstring>
        <name>QubitArray_set_alphaidx</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>alphaidx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="368" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="368" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a22e972671605d1db16d4a080abbcdc64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit</definition>
        <argsstring>(QubitArray *qa, Qubit **qubits)</argsstring>
        <name>QubitArray_setQubit</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type><ref refid="structQubit" kindref="compound">Qubit</ref> **</type>
          <declname>qubits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="376" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="376" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a3c9efdc2d478a22bd7aa3f7e48642ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_set_betaidx</definition>
        <argsstring>(QubitArray *qa, const int *betaidx)</argsstring>
        <name>QubitArray_set_betaidx</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>betaidx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="380" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="380" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a7981d8f74a9047360ed0b5c4cb87f8f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setIntmap_i_j</definition>
        <argsstring>(QubitArray *qa, const MatrixXcd tensor, int i, int j)</argsstring>
        <name>QubitArray_setIntmap_i_j</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="388" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="388" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a934a12377cb15d0b97432b0e2cb840e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setPsia</definition>
        <argsstring>(QubitArray *qa, const MatrixXcd psia)</argsstring>
        <name>QubitArray_setPsia</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>psia</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="397" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="397" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ad83b088cfb1be623c77189ac334e60a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setPsib</definition>
        <argsstring>(QubitArray *qa, const MatrixXcd psib)</argsstring>
        <name>QubitArray_setPsib</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>psib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="401" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="401" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ac9319da853557a660b2d0cd1ab2f868f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setPsi0</definition>
        <argsstring>(QubitArray *qa, const MatrixXcd psi0)</argsstring>
        <name>QubitArray_setPsi0</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>psi0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="405" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="405" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a92d53023231774329afb43515ae426af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QubitArray_getNqubit</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_getNqubit</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="411" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="411" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a43602ef791226ac908285556eea20b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QubitArray_getOverhaus</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_getOverhaus</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="415" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="415" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a808ead69b0d40f547fffe9f17e050555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* QubitArray_get_alphaidx</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_get_alphaidx</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="419" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="419" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ae4c72d491b573e505ceffd71913952f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* QubitArray_get_betaidx</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_get_betaidx</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="423" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="423" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1adc59782eac519b790b11f0454b09084b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd **</type>
        <definition>MatrixXcd** QubitArray_getIntmap</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_getIntmap</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="427" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="427" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1aa6e1e16173a894c62d3ba6e321899b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_getIntmap_i_j</definition>
        <argsstring>(const QubitArray *qa, int i, int j)</argsstring>
        <name>QubitArray_getIntmap_i_j</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="431" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="431" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ace3511c49f18f11b931cc1dc2482993b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_getPsia</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_getPsia</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="435" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="435" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a49773f2cf68d5f6f6bd48548ed0b0af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_getPsib</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_getPsib</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="439" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="439" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1abc14c288673cc49fda527e1be63be7c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_getPsi0</definition>
        <argsstring>(const QubitArray *qa)</argsstring>
        <name>QubitArray_getPsi0</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="443" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a988e9577546f8eea559828f969543efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_freeQubit</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_freeQubit</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="449" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="449" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ab88a26b05d22f2069cb3123c924992a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_freeIntmap</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_freeIntmap</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="457" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="457" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1aafe8f76084e8c5ff931eba2fc03ae5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_free_alphaidx_betaidx</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_free_alphaidx_betaidx</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="468" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a4b9b092eb258e56ea79f4b779b474b9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_name</definition>
        <argsstring>(QubitArray *qa, const char *name, int i)</argsstring>
        <name>QubitArray_setQubit_i_name</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="478" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a1ae8b208dd48a354d48dfdb21799cc4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_spin</definition>
        <argsstring>(QubitArray *qa, const float spin, int i)</argsstring>
        <name>QubitArray_setQubit_i_spin</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>spin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="482" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="482" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a38f6252d82c461c3c6bfc41429c3ed68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_gyro</definition>
        <argsstring>(QubitArray *qa, const double gyro, int i)</argsstring>
        <name>QubitArray_setQubit_i_gyro</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gyro</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="486" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="486" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a730321d41576eb2869b51d0cd17643e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_xyz</definition>
        <argsstring>(QubitArray *qa, const double *xyz, int i)</argsstring>
        <name>QubitArray_setQubit_i_xyz</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>xyz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="490" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="490" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a8085a9b2e4e09d3a25291602c9b5a21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_detuning</definition>
        <argsstring>(QubitArray *qa, const double detuning, int i)</argsstring>
        <name>QubitArray_setQubit_i_detuning</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>detuning</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="496" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="496" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a98c8ac794f815c01a6cf3198a5e462cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_overhaus</definition>
        <argsstring>(QubitArray *qa, const double overhaus, int i)</argsstring>
        <name>QubitArray_setQubit_i_overhaus</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>overhaus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="500" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="500" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a06adbf28da37d64b8719fe21613a710b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_alpha</definition>
        <argsstring>(QubitArray *qa, const MatrixXcd alpha, int i)</argsstring>
        <name>QubitArray_setQubit_i_alpha</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="504" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="504" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1aa36d42342c0c3f9e92a649def188c8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_beta</definition>
        <argsstring>(QubitArray *qa, const MatrixXcd beta, int i)</argsstring>
        <name>QubitArray_setQubit_i_beta</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="508" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="508" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a9912adc80412ddcbf72283f477835337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_alpha_fromMs</definition>
        <argsstring>(QubitArray *qa, const float ms, int i)</argsstring>
        <name>QubitArray_setQubit_i_alpha_fromMs</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="512" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a9aba66f88595c3a6427a67e1ed434e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_setQubit_i_beta_fromMs</definition>
        <argsstring>(QubitArray *qa, const float ms, int i)</argsstring>
        <name>QubitArray_setQubit_i_beta_fromMs</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="517" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="517" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a8cfd8909d72d9ff2a869ba41021d34ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structQubit" kindref="compound">Qubit</ref> *</type>
        <definition>Qubit* QubitArray_getQubit_i</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="523" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a1e11046357a6772005291e9fa7d8fbe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* QubitArray_getQubit_i_name</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_name</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="527" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="527" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a5185ffc14ec13d30ee5024a9b8045091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float QubitArray_getQubit_i_spin</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_spin</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="531" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="531" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a3e9f9e838128b9f9eb6a733d5e64ad42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QubitArray_getQubit_i_gyro</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_gyro</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="535" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="535" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a795ccf110d3bca40d498849468cf5d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* QubitArray_getQubit_i_xyz</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_xyz</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="539" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="539" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1aa2ac9548d4bcfa2ad0ef89a53680f45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_getQubit_i_alpha</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_alpha</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="543" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="543" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a7b851d6bad14846152c5b2bebd75ea71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd QubitArray_getQubit_i_beta</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_beta</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="547" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="547" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a8f6dc3eee81c414eaeca4a87378349fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QubitArray_getQubit_i_detuning</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_detuning</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="551" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="551" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a0cfb5cd962893c658becd7f4b6065b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QubitArray_getQubit_i_overhaus</definition>
        <argsstring>(const QubitArray *qa, int i)</argsstring>
        <name>QubitArray_getQubit_i_overhaus</name>
        <param>
          <type>const <ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="555" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="555" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a18adfd484d631b24ea39effb17baff4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_reportQubit_i</definition>
        <argsstring>(QubitArray *qa, int i)</argsstring>
        <name>QubitArray_reportQubit_i</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="561" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="561" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1af42cb87cfbf86dab8dac7b57dfb8c6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_reportIntmap</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_reportIntmap</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="577" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="577" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a13957bf59be2db2833c38b8bae0fc405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_reportPsiaPsib</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_reportPsiaPsib</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="593" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1a050f9574dee170941a6b92c1dfc7f503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_reportPsi0</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_reportPsi0</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="598" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="598" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1ab38cadf0fa65eb87e8db71d0a58add2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_reportQubit_overhaus</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_reportQubit_overhaus</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="602" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="602" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="qubit_8cpp_1aebb7ea793f0187bcc49214923c8df639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QubitArray_report</definition>
        <argsstring>(QubitArray *qa)</argsstring>
        <name>QubitArray_report</name>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/qubit.cpp" line="614" column="1" bodyfile="/home/huijin/git/CCEX/src/qubit.cpp" bodystart="614" bodyend="654"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/qubit.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/utilities.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/hamiltonian.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>High<sp/>level<sp/>--------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>QubitArray_init(){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa<sp/>=<sp/>(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_set_alphaidx(qa,NULL);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_set_betaidx(qa,NULL);<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setNqubit(qa,0);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setOverhaus(qa,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setQubit(qa,NULL);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MatrixXcd<sp/>psia;<sp/>do<sp/>not<sp/>need<sp/>to<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MatrixXcd<sp/>psib;<sp/>do<sp/>not<sp/>need<sp/>to<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MatrixXcd<sp/>psi0;<sp/>do<sp/>not<sp/>need<sp/>to<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_freeAll(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_freeQubit(qa);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_freeIntmap(qa);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_free_alphaidx_betaidx(qa);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;qa);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>phyiscal<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QubitArray_dim(<ref refid="structQubitArray" kindref="compound">QubitArray</ref><sp/>*qa){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>*=<sp/>QubitArray_dimQubit_i(qa,i);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dim;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QubitArray_dimQubit_i(<ref refid="structQubitArray" kindref="compound">QubitArray</ref><sp/>*qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>QubitArray_getQubit_i_spin(qa,i);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(2*S+1);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>QubitArray_mindist(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz,<sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mininum<sp/>distance<sp/>from<sp/>the<sp/>qubit<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>q0_xyz<sp/>=<sp/>QubitArray_getQubit_i_xyz(qa,0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_min<sp/>=<sp/>dist(xyz,<sp/>q0_xyz);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>qi_xyz<sp/>=<sp/>QubitArray_getQubit_i_xyz(qa,i);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>dist(xyz,<sp/>qi_xyz);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;<sp/>r_min){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_min<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r_min;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From<sp/>Qubit[i]-&gt;alpha,<sp/>beta,<sp/>set<sp/>Psia,<sp/>Psib<sp/>by<sp/>krnoecker<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setPsiaPsib_fromQubit(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psia;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psib;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>alpha_i<sp/>=<sp/>QubitArray_getQubit_i_alpha(qa,i);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>beta_i<sp/>=<sp/>QubitArray_getQubit_i_beta(qa,i);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psia<sp/>=<sp/>alpha_i;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psib<sp/>=<sp/>beta_i;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psia<sp/>=<sp/>kron(psia,alpha_i);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psib<sp/>=<sp/>kron(psib,beta_i);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setPsia(qa,psia);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setPsib(qa,psib);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setPsiaPsib_fromIdx(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>bfield){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>alphaidx<sp/>=<sp/>QubitArray_get_alphaidx(qa);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>betaidx<sp/>=<sp/>QubitArray_get_betaidx(qa);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alphaidx<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>betaidx<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>QubitArray_setPsiaPsib_fromIdx:<sp/>alphaidx<sp/>and<sp/>betaidx<sp/>are<sp/>not<sp/>set\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd**<sp/>sigmas<sp/>=<sp/>QubitArray_PauliOperators(qa);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hq<sp/>=<sp/>QubitArray_TotalHamil(qa,sigmas,bfield);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;QubitArray_getNqubit(qa);<sp/>i++){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>sigmas[i];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>sigmas;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigenvalues<sp/>and<sp/>Eigenvectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>QubitArray_dim(qa);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::SelfAdjointEigenSolver&lt;MatrixXcd&gt;<sp/>es(dim);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>es.compute(Hq);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>eigenVectors<sp/>=<sp/>es.eigenvectors();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorXcd<sp/>eigenValues<sp/>=<sp/>es.eigenvalues();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>in<sp/>desending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>idx<sp/>=<sp/>getIndexInOrder(eigenValues);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorXcd<sp/>sortedEigenValues<sp/>=<sp/>sortEigenValues(eigenValues,idx);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>sortedEigenVectors<sp/>=<sp/>sortEigenVectors(eigenVectors,<sp/>idx);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Psia,<sp/>Psib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psia<sp/>=<sp/>sortedEigenVectors.col(*alphaidx);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psib<sp/>=<sp/>sortedEigenVectors.col(*betaidx);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>normalize(&amp;psia);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>normalize(&amp;psib);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Psia,<sp/>Psib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setPsia(qa,psia);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setPsib(qa,psib);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From<sp/>Psia<sp/>&amp;<sp/>Psib,<sp/>set<sp/>psi0<sp/>by<sp/>adding<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setPsi0_fromPsiaPsib(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psi0<sp/>=<sp/>QubitArray_getPsi0(qa);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psi0.rows()!=0<sp/>||<sp/>psi0.cols()!=0){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>warning<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Warning:<sp/>QubitArray_setPsi0_fromPsiaPsib:<sp/>psi0<sp/>is<sp/>already<sp/>set\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psia<sp/>=<sp/>QubitArray_getPsia(qa);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psib<sp/>=<sp/>QubitArray_getPsib(qa);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>psi0<sp/>=<sp/>psia<sp/>+<sp/>psib;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>normalize(&amp;psi0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setPsi0(qa,psi0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QubitArray_getQubitIdx_fromName(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(QubitArray_getQubit_i_name(qa,i),name)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">MatrixXcd**<sp/>QubitArray_PauliOperators(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimQA<sp/>=<sp/>QubitArray_dim(qa);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pauli<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd**<sp/>sigmas<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd*[nqubit];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq=0;<sp/>iq&lt;nqubit;<sp/>iq++){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimQ<sp/>=<sp/>QubitArray_dimQubit_i(qa,iq);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigmas[iq]<sp/>=<sp/>getPauliOperators(dimQ);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigmas;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">MatrixXcd*<sp/>QubitArray_PauliOperator_fromPsiaPsib(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psia<sp/>=<sp/>QubitArray_getPsia(qa);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psib<sp/>=<sp/>QubitArray_getPsib(qa);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sigmas:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sigmas[0]<sp/>=<sp/>I,<sp/>sigmas[1]<sp/>=<sp/>X,<sp/>sigmas[2]<sp/>=<sp/>Y,<sp/>sigmas[3]<sp/>=<sp/>Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd*<sp/>sigmas<sp/>=<sp/>getGeneralPauliOperators(psia,psib);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigmas;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">MatrixXcd<sp/>QubitArray_TotalHamil(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>bfield){</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimQA<sp/>=<sp/>QubitArray_dim(qa);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Qubit<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>HqTotal<sp/>=<sp/>MatrixXcd::Zero(dimQA,dimQA);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Single<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq=0;<sp/>iq&lt;nqubit;<sp/>iq++){</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hqi<sp/>=<sp/>QubitArray_SingleHamil(qa,sigmas,iq,bfield);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>HqiExpand<sp/>=<sp/>expandHamiltonian(sigmas,<sp/>Hqi,<sp/>nqubit,<sp/>iq);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HqTotal<sp/>+=<sp/>HqiExpand;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interaction<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hqij;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=i+1;<sp/>j&lt;nqubit;<sp/>j++){</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hqij<sp/>=<sp/>QubitArray_InteractionHamil(qa,sigmas,i,j);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HqTotal<sp/>+=<sp/>Hqij;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HqTotal;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">MatrixXcd<sp/>QubitArray_SingleHamil(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>bfield){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Single<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hqi_Zeeman<sp/>=<sp/>QubitArray_ZeemanHamil(qa,sigmas,iq,bfield);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hqi_Detuning<sp/>=<sp/>QubitArray_DetuningHamil(qa,sigmas,iq);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hqi_Overhaus<sp/>=<sp/>QubitArray_OverhausHamil(qa,sigmas,iq);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hqi_ZFS<sp/>=<sp/>QubitArray_ZFSHamil(qa,sigmas,iq);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hqi_Zeeman<sp/>+<sp/>Hqi_Detuning<sp/>+<sp/>Hqi_Overhaus<sp/>+<sp/>Hqi_ZFS;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">MatrixXcd<sp/>QubitArray_ZeemanHamil(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>bfield){</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iq<sp/>&gt;=<sp/>nqubit){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>QubitArray_ZeemanHamil:<sp/>iq<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,iq);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>qgyro<sp/>=<sp/>QubitArray_getQubit_i_gyro(qa,iq);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vecZeeman<sp/>=<sp/>calZeemanVector(qgyro,bfield);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calHamiltonianSingleInt(vecZeeman,sigmas[iq]);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">MatrixXcd<sp/>QubitArray_DetuningHamil(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq){</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iq<sp/>&gt;=<sp/>nqubit){</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>QubitArray_DetuningHamil:<sp/>iq<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,iq);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detun<sp/>=<sp/>QubitArray_getQubit_i_detuning(qa,iq);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vecDetun<sp/>=<sp/>calDetuningVector(detun);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calHamiltonianSingleInt(vecDetun,sigmas[iq]);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">MatrixXcd<sp/>QubitArray_OverhausHamil(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iq<sp/>&gt;=<sp/>nqubit){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>QubitArray_OverhausHamil:<sp/>iq<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,iq);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overhaus<sp/>=<sp/>QubitArray_getQubit_i_overhaus(qa,iq);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vecOverhaus<sp/>=<sp/>calOverhauserVector(overhaus);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calHamiltonianSingleInt(vecOverhaus,sigmas[iq]);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">MatrixXcd<sp/>QubitArray_ZFSHamil(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq){</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iq<sp/>&gt;=<sp/>nqubit){</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>QubitArray_ZFSHamil:<sp/>iq<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,iq);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>zfs<sp/>=<sp/>QubitArray_getIntmap_i_j(qa,iq,iq);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>HqSelf<sp/>=<sp/>calHamiltonianSelfInt(sigmas[iq],zfs);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HqSelf;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">MatrixXcd<sp/>QubitArray_InteractionHamil(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jq){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimQA<sp/>=<sp/>QubitArray_dim(qa);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Qubit<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hqij<sp/>=<sp/>MatrixXcd::Zero(dimQA,dimQA);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iq&lt;jq){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tensor<sp/>=<sp/>QubitArray_getIntmap_i_j(qa,iq,jq);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEmpty<sp/>=<sp/>tensor.isZero(FLT_EPSILON);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isEmpty){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hqij<sp/>=<sp/>calHamiltonianHeteroInt(sigmas,<sp/>tensor,<sp/>nqubit,<sp/>iq,<sp/>jq);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>QubitArray_InteractionHamil:<sp/>iq,jq<sp/>=<sp/>%d,%d<sp/>is<sp/>out<sp/>of<sp/>range<sp/>or<sp/>iq&gt;jq\n&quot;</highlight><highlight class="normal">,iq,jq);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hqij;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>density<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">MatrixXcd<sp/><sp/><sp/>QubitArray_Rho0(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psi0<sp/>=<sp/>QubitArray_getPsi0(qa);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psi0<sp/>*<sp/>psi0.adjoint();</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low<sp/>level<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">//<sp/>QubitArray<sp/>properties</highlight></codeline>
<codeline lineno="334"><highlight class="comment"></highlight><highlight class="comment">//<sp/>alloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_allocQubit(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alloc<sp/>as<sp/>much<sp/>as<sp/>nqubit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref><sp/>=<sp/>(<ref refid="structQubit" kindref="compound">Qubit</ref>**)allocArray2d(nqubit,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structQubit" kindref="compound">Qubit</ref>));</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_allocIntmap(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alloc<sp/>as<sp/>much<sp/>as<sp/>nqubit*nqubit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd*[nqubit];</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd[nqubit];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;nqubit;<sp/>j++){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref>[i][j]<sp/>=<sp/>MatrixXcd::Zero(3,3);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_alloc_alphaidx_betaidx(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a0a5c3875737d2a3bc14399109e89c82d" kindref="member">_alphaidx</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a93fa20887ef373b3710d0734e9f1b7a4" kindref="member">_betaidx</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setNqubit(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ac87a8cdf149336447fe601f59c7ff371" kindref="member">nqubit</ref><sp/>=<sp/>nqubit;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setOverhaus(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overhaus){</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ab1cb38fcd5640338fad8c2abc868b53e" kindref="member">overhaus</ref><sp/>=<sp/>overhaus;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_set_alphaidx(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>alphaidx){</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alphaidx<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a0a5c3875737d2a3bc14399109e89c82d" kindref="member">_alphaidx</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(qa-&gt;<ref refid="structQubitArray_1a0a5c3875737d2a3bc14399109e89c82d" kindref="member">_alphaidx</ref>)<sp/>=<sp/>*alphaidx;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/><ref refid="structQubit" kindref="compound">Qubit</ref>**<sp/>qubits){</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref><sp/>=<sp/>qubits;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_set_betaidx(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>betaidx){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(betaidx<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a93fa20887ef373b3710d0734e9f1b7a4" kindref="member">_betaidx</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(qa-&gt;<ref refid="structQubitArray_1a93fa20887ef373b3710d0734e9f1b7a4" kindref="member">_betaidx</ref>)<sp/>=<sp/>*betaidx;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setIntmap_i_j(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>tensor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j){</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>nqubit<sp/>||<sp/>j<sp/>&gt;=<sp/>nqubit<sp/>||<sp/>i<sp/>&gt;<sp/>j<sp/>||<sp/>i<sp/>&lt;<sp/>0<sp/>||<sp/>j<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>QubitArray_setIntmap_i_j:<sp/>i,j<sp/>=<sp/>%d,%d<sp/>is<sp/>out<sp/>of<sp/>range<sp/>or<sp/>i&gt;j\n&quot;</highlight><highlight class="normal">,i,j);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref>[i][j]<sp/>=<sp/>tensor;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setPsia(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>psia){<sp/></highlight><highlight class="comment">//<sp/>auto<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a168f33429921f2605e8c3ab850d3e6d9" kindref="member">psia</ref><sp/>=<sp/>psia.normalized();</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setPsib(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>psib){<sp/></highlight><highlight class="comment">//<sp/>auto<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ad88cb397f3656eb7ac316e966d5e9172" kindref="member">psib</ref><sp/>=<sp/>psib.normalized();</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setPsi0(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>psi0){<sp/></highlight><highlight class="comment">//<sp/>auto<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1a17543dd30e2e5ef672ff5f751119beea" kindref="member">psi0</ref><sp/>=<sp/>psi0.normalized();</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QubitArray_getNqubit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ac87a8cdf149336447fe601f59c7ff371" kindref="member">nqubit</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QubitArray_getOverhaus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ab1cb38fcd5640338fad8c2abc868b53e" kindref="member">overhaus</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>QubitArray_get_alphaidx(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1a0a5c3875737d2a3bc14399109e89c82d" kindref="member">_alphaidx</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>QubitArray_get_betaidx(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1a93fa20887ef373b3710d0734e9f1b7a4" kindref="member">_betaidx</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">MatrixXcd**<sp/>QubitArray_getIntmap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">MatrixXcd<sp/>QubitArray_getIntmap_i_j(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j){</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref>[i][j];</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">MatrixXcd<sp/>QubitArray_getPsia(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1a168f33429921f2605e8c3ab850d3e6d9" kindref="member">psia</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">MatrixXcd<sp/>QubitArray_getPsib(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ad88cb397f3656eb7ac316e966d5e9172" kindref="member">psib</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">MatrixXcd<sp/>QubitArray_getPsi0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1a17543dd30e2e5ef672ff5f751119beea" kindref="member">psi0</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_freeQubit(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)&amp;(qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>),nqubit);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_freeIntmap(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref>[i];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_free_alphaidx_betaidx(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;(qa-&gt;<ref refid="structQubitArray_1a0a5c3875737d2a3bc14399109e89c82d" kindref="member">_alphaidx</ref>));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;(qa-&gt;<ref refid="structQubitArray_1a93fa20887ef373b3710d0734e9f1b7a4" kindref="member">_betaidx</ref>));</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="comment">//<sp/>i-th<sp/>qubit<sp/>properties</highlight></codeline>
<codeline lineno="476"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//set<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_name(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1ab65a0dfa0efbd8a7862403f4704c1587" kindref="member">name</ref>,name);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_spin(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a858930b7d9d9cafc70f26ab7993dadad" kindref="member">spin</ref><sp/>=<sp/>spin;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_gyro(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a668a62d3ddf72e6b9acbc6338c97090f" kindref="member">gyro</ref><sp/>=<sp/>gyro;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_xyz(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a799cb32b473160eb8e9e4aa6c9c39b18" kindref="member">xyz</ref>[0]<sp/>=<sp/>xyz[0];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a799cb32b473160eb8e9e4aa6c9c39b18" kindref="member">xyz</ref>[1]<sp/>=<sp/>xyz[1];</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a799cb32b473160eb8e9e4aa6c9c39b18" kindref="member">xyz</ref>[2]<sp/>=<sp/>xyz[2];</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_detuning(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detuning,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a6e0e926587994ef24d67431d0dbef9e7" kindref="member">detuning</ref><sp/>=<sp/>detuning;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_overhaus(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overhaus,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1aecb3943042094c4be043f375626dbd24" kindref="member">overhaus</ref><sp/>=<sp/>overhaus;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_alpha(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1accc3b309d802ab6f269b7d8a7536a4a0" kindref="member">alpha</ref><sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_beta(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>beta,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a6c73eb8c49fdb6db06179b21b5a2923d" kindref="member">beta</ref><sp/>=<sp/>beta;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_alpha_fromMs(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ms,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>QubitArray_getQubit_i_spin(qa,i);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setQubit_i_alpha(qa,getSpinor(S,ms),i);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_setQubit_i_beta_fromMs(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ms,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>QubitArray_getQubit_i_spin(qa,i);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_setQubit_i_beta(qa,getSpinor(S,ms),i);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="structQubit" kindref="compound">Qubit</ref>*<sp/>QubitArray_getQubit_i(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i];</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>QubitArray_getQubit_i_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1ab65a0dfa0efbd8a7862403f4704c1587" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>QubitArray_getQubit_i_spin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a858930b7d9d9cafc70f26ab7993dadad" kindref="member">spin</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>QubitArray_getQubit_i_gyro(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a668a62d3ddf72e6b9acbc6338c97090f" kindref="member">gyro</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>QubitArray_getQubit_i_xyz(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a799cb32b473160eb8e9e4aa6c9c39b18" kindref="member">xyz</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">MatrixXcd<sp/>QubitArray_getQubit_i_alpha(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1accc3b309d802ab6f269b7d8a7536a4a0" kindref="member">alpha</ref>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">MatrixXcd<sp/>QubitArray_getQubit_i_beta(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a6c73eb8c49fdb6db06179b21b5a2923d" kindref="member">beta</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>QubitArray_getQubit_i_detuning(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1a6e0e926587994ef24d67431d0dbef9e7" kindref="member">detuning</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>QubitArray_getQubit_i_overhaus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qa-&gt;<ref refid="structQubitArray_1ae87046f60e524d2aed1f6605c746d86e" kindref="member">qubit</ref>[i]-&gt;<ref refid="structQubit_1aecb3943042094c4be043f375626dbd24" kindref="member">overhaus</ref>;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Report<sp/>---------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_reportQubit_i(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementChar(</highlight><highlight class="stringliteral">&quot;qubit<sp/>name&quot;</highlight><highlight class="normal">,QubitArray_getQubit_i_name(qa,i));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementFloat(</highlight><highlight class="stringliteral">&quot;spin&quot;</highlight><highlight class="normal">,QubitArray_getQubit_i_spin(qa,i));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementDouble(</highlight><highlight class="stringliteral">&quot;gyro<sp/>(radkHz/G)&quot;</highlight><highlight class="normal">,QubitArray_getQubit_i_gyro(qa,i));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementDouble(</highlight><highlight class="stringliteral">&quot;detuning<sp/>(radkHz)&quot;</highlight><highlight class="normal">,QubitArray_getQubit_i_detuning(qa,i));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementDouble(</highlight><highlight class="stringliteral">&quot;overhaus<sp/>(radkHz)&quot;</highlight><highlight class="normal">,QubitArray_getQubit_i_overhaus(qa,i));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementDouble1d(</highlight><highlight class="stringliteral">&quot;xyz<sp/>(A)&quot;</highlight><highlight class="normal">,QubitArray_getQubit_i_xyz(qa,i),3);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>alpha<sp/>=<sp/>QubitArray_getQubit_i_alpha(qa,i);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>printStateInDiracNot(</highlight><highlight class="stringliteral">&quot;alpha&quot;</highlight><highlight class="normal">,alpha);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>beta<sp/>=<sp/>QubitArray_getQubit_i_beta(qa,i);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>printStateInDiracNot(</highlight><highlight class="stringliteral">&quot;beta&quot;</highlight><highlight class="normal">,beta);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_reportIntmap(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Interactions<sp/>(radkHz)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qa-&gt;<ref refid="structQubitArray_1a1d74d3f22fe851f267c72b8cda416dd0" kindref="member">intmap</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=i;<sp/>j&lt;nqubit;<sp/>j++){</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[20]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,20,</highlight><highlight class="stringliteral">&quot;%s[%d][%d]&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;intmap&quot;</highlight><highlight class="normal">,i,j);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(key,QubitArray_getIntmap_i_j(qa,i,j));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_reportPsiaPsib(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>printInlineMatrixXcd(</highlight><highlight class="stringliteral">&quot;psia&quot;</highlight><highlight class="normal">,QubitArray_getPsia(qa));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>printInlineMatrixXcd(</highlight><highlight class="stringliteral">&quot;psib&quot;</highlight><highlight class="normal">,QubitArray_getPsib(qa));</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_reportPsi0(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>printInlineMatrixXcd(</highlight><highlight class="stringliteral">&quot;psi0&quot;</highlight><highlight class="normal">,QubitArray_getPsi0(qa));</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_reportQubit_overhaus(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Qubit<sp/>overhaus<sp/>(radkHz)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(message,100,</highlight><highlight class="stringliteral">&quot;Qubit[%d].overhaus&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementDouble(message,QubitArray_getQubit_i_overhaus(qa,i));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QubitArray_report(<ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>printTitle(</highlight><highlight class="stringliteral">&quot;Structure<sp/>QubitArray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;General<sp/>properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementBool(</highlight><highlight class="stringliteral">&quot;overhaus&quot;</highlight><highlight class="normal">,QubitArray_getOverhaus(qa));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Qubit<sp/>properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nqubit<sp/>(#)&quot;</highlight><highlight class="normal">,QubitArray_getNqubit(qa));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nqubit;<sp/>i++){</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QubitArray_reportQubit_i(qa,i);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_reportIntmap(qa);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;<sp/>Qubit<sp/>total<sp/>alpha,<sp/>beta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_reportPsiaPsib(qa);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Qubit<sp/>initial<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>QubitArray_reportPsi0(qa);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Qubit<sp/>alpha,beta<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(QubitArray_get_alphaidx(qa)<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;alphaidx&quot;</highlight><highlight class="normal">,*(QubitArray_get_alphaidx(qa)));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;betaidx&quot;</highlight><highlight class="normal">,*(QubitArray_get_betaidx(qa)));</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementChar(</highlight><highlight class="stringliteral">&quot;alphaidx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementChar(</highlight><highlight class="stringliteral">&quot;betaidx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/huijin/git/CCEX/src/qubit.cpp"/>
  </compounddef>
</doxygen>
