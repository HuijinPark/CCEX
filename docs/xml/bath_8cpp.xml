<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="bath_8cpp" kind="file">
    <compoundname>bath.cpp</compoundname>
    <includes refid="bath_8h" local="yes">../include/bath.h</includes>
    <includes refid="memory_8h" local="yes">../include/memory.h</includes>
    <includes refid="hamiltonian_8h" local="yes">../include/hamiltonian.h</includes>
    <includes local="no">float.h</includes>
    <incdepgraph>
      <node id="227">
        <label>../include/hamiltonian.h</label>
        <link refid="hamiltonian_8h_source"/>
        <childnode refid="219" relation="include">
        </childnode>
      </node>
      <node id="228">
        <label>float.h</label>
      </node>
      <node id="218">
        <label>../include/bath.h</label>
        <link refid="bath_8h_source"/>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
      </node>
      <node id="217">
        <label>/home/huijin/git/CCEX/src/bath.cpp</label>
        <link refid="bath.cpp"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
      </node>
      <node id="224">
        <label>qubit.h</label>
        <link refid="qubit_8h_source"/>
        <childnode refid="219" relation="include">
        </childnode>
      </node>
      <node id="220">
        <label>Eigen/Dense</label>
      </node>
      <node id="223">
        <label>unistd.h</label>
      </node>
      <node id="225">
        <label>general.h</label>
        <link refid="general_8h_source"/>
        <childnode refid="219" relation="include">
        </childnode>
      </node>
      <node id="221">
        <label>iostream</label>
      </node>
      <node id="226">
        <label>../include/memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="219" relation="include">
        </childnode>
      </node>
      <node id="222">
        <label>mpi.h</label>
      </node>
      <node id="219">
        <label>utilities.h</label>
        <link refid="utilities_8h_source"/>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="bath_8cpp_1a81c020b081e36f936880d8faa4290237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBathHypfs</definition>
        <argsstring>(BathArray *ba, QubitArray *qa)</argsstring>
        <name>BathArray_setBathHypfs</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="8" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="8" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a45a6abad8cc50619a87a1c38e73cdf26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBathStatesRandom</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_setBathStatesRandom</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="30" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="30" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a4e9f1673e36f161f1853f4ba085b59b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathArray_getOverhaus</definition>
        <argsstring>(BathArray *ba, int iq)</argsstring>
        <name>BathArray_getOverhaus</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="41" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="41" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a6cc52af9548c40d4c0bed58d277e4757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathArray_getBath_i_overhaus_j</definition>
        <argsstring>(BathArray *ba, int isp, int iq)</argsstring>
        <name>BathArray_getBath_i_overhaus_j</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="53" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aeb73e9db6199ed476acfdf9dbb857938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBathDisorders</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_setBathDisorders</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="61" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="61" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aff34caea98b5c6ed32272cbac780db4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathArray_getBath_i_disorder_j</definition>
        <argsstring>(BathArray *ba, int isp, int jsp)</argsstring>
        <name>BathArray_getBath_i_disorder_j</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jsp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="74" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="74" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ab808ba7f4983db0d101a839606a410ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_connectivity</definition>
        <argsstring>(int ***cmap, float ***stmap, BathArray *ba, float rdip, float rdipcut)</argsstring>
        <name>BathArray_connectivity</name>
        <param>
          <type>int ***</type>
          <declname>cmap</declname>
        </param>
        <param>
          <type>float ***</type>
          <declname>stmap</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rdip</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rdipcut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="99" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="99" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aed62874976dd2c174274f295b6030d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void makeSparsemap</definition>
        <argsstring>(int ***spmap, int **cmap, int nspin)</argsstring>
        <name>makeSparsemap</name>
        <param>
          <type>int ***</type>
          <declname>spmap</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>cmap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nspin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="133" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="133" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a9f50bfa65d8d5839e8c70e1bb1c532cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BathArray_dimBath_i</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_dimBath_i</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="159" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="159" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a47df79b6685933f06624a558befceba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BathSpin_dim</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_dim</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="170" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="170" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1af288865607cf89c6c72e4cdbf990397c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BathArray_dim</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_dim</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="180" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="180" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a50aca27e900b42cb19b89c0eddc866a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_int_i_j</definition>
        <argsstring>(BathArray *ba, int i, int j)</argsstring>
        <name>BathArray_int_i_j</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="195" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="195" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a652958988b338231529a98b1e2aff9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathArray_dist_i_j</definition>
        <argsstring>(BathArray *ba, int i, int j)</argsstring>
        <name>BathArray_dist_i_j</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="279" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="279" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a5f536d30ff372e51e030bac0bb03ee32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_ZeemanHamil</definition>
        <argsstring>(BathArray *ba, MatrixXcd **sigmas, int ib, float *bfield)</argsstring>
        <name>BathArray_ZeemanHamil</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bfield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="286" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="286" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a1990df26fee1f51da5b026f94920157d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_DetuningHamil</definition>
        <argsstring>(BathArray *ba, MatrixXcd **sigmas, int ib)</argsstring>
        <name>BathArray_DetuningHamil</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="301" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="301" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a97afda17a4c78436b7ca8d90a374eff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_DisorderHamil</definition>
        <argsstring>(BathArray *ba, MatrixXcd **sigmas, int ib, bool rm_overlap)</argsstring>
        <name>BathArray_DisorderHamil</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rm_overlap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="315" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="315" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a2d839859884bd8c333d038dcbe3caa26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_QuadHamil</definition>
        <argsstring>(BathArray *ba, MatrixXcd **sigmas, int ib)</argsstring>
        <name>BathArray_QuadHamil</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="344" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="344" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a7aebe0d1c4d9e2f002355308393f2985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_InteractionHamil</definition>
        <argsstring>(BathArray *ba, MatrixXcd **sigmas, int ib, int jb)</argsstring>
        <name>BathArray_InteractionHamil</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>MatrixXcd **</type>
          <declname>sigmas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="358" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="358" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a06053d5bec282391e6dc52636f3a3834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd **</type>
        <definition>MatrixXcd** BathArray_PauliOperators</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_PauliOperators</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="382" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="382" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a748372df2699f4aa1b9c48ed856d1544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_Rho0</definition>
        <argsstring>(BathArray *ba, bool isEnsemble)</argsstring>
        <name>BathArray_Rho0</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isEnsemble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="399" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="399" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aad7a61a9794ce21248ddecc65fc68a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_Psi0</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_Psi0</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="412" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="412" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a415ed28f1ee2838f0b9a7988ef5d4cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
        <definition>BathArray* BathArray_init</definition>
        <argsstring>()</argsstring>
        <name>BathArray_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="435" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="435" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a14e20ca8a70b18dabae4789cbb4147f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_report</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_report</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="447" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a944278376a9bd66f28b2aab1dd8fd3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportSpinProperties</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_reportSpinProperties</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="452" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="452" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a37e620fa24a875511a5a78e2df2ae74b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_reportBath</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="459" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="459" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a438f139c9112579ccc54c053f910c3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath_i_props</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_reportBath_i_props</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="480" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="480" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a64a3915ad301e490b49f1a1b594ce3fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath_states</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_reportBath_states</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="489" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="489" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a58e4092f9590d027d73d1ad51d3d4755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath_detunings</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_reportBath_detunings</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="511" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="511" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a8c0e49529570d6676fd6ece297a7641c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath_disorders</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_reportBath_disorders</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="527" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="527" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a6c400315638c2aadffde3d344108b6e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath_hypf</definition>
        <argsstring>(BathArray *ba, int nqubit)</argsstring>
        <name>BathArray_reportBath_hypf</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="544" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="544" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a730f3c2dedfef16b5821a37b2e04f2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath_quad</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_reportBath_quad</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="570" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="570" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ab97e04089a2b9c944201ca934c635ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reportBath_hypf_sub</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_reportBath_hypf_sub</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="586" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="586" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1af4dab15aab62b1227f4794d5421effbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_allocBath</definition>
        <argsstring>(BathArray *ba, int nqubit)</argsstring>
        <name>BathArray_allocBath</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="606" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="606" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a28bcb4baf9834b4ee93ddbff54e86342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reallocBath</definition>
        <argsstring>(BathArray *ba, int old_length, int new_length, int nqubit)</argsstring>
        <name>BathArray_reallocBath</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>old_length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="625" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="625" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a3969246637ea0200b4a38644b431223d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_allocProp</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_allocProp</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="649" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="649" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ad094cd86f1978df9a25b5aa96a7b0a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_reallocProp</definition>
        <argsstring>(BathArray *ba, int nspin_old, int nspin_new)</argsstring>
        <name>BathArray_reallocProp</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nspin_old</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nspin_new</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="656" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="656" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ad9b9ed532f0bff53ddf3f2406a674819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_allocBath_i_hypf</definition>
        <argsstring>(BathArray *ba, int i, int nqubit)</argsstring>
        <name>BathArray_allocBath_i_hypf</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="666" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="666" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1adba87aaf8bae0958da78715474ef935c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setNspin</definition>
        <argsstring>(BathArray *ba, const int nspin)</argsstring>
        <name>BathArray_setNspin</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nspin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="671" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="671" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a09d95004e5ea7a8cd37e2e1b41234629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i</definition>
        <argsstring>(BathArray *ba, const BathSpin *bath, int i, int nqubit)</argsstring>
        <name>BathArray_setBath_i</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="675" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="675" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1af07a71b01cf698bb2dbeeead1b30d854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_name</definition>
        <argsstring>(BathArray *ba, const char *name, int i)</argsstring>
        <name>BathArray_setBath_i_name</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="699" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="699" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aceb87976791c2bca86bc8075df4a24e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_spin</definition>
        <argsstring>(BathArray *ba, const float spin, int i)</argsstring>
        <name>BathArray_setBath_i_spin</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>spin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="703" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="703" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ae2dc94602f35c05bfbb84488ce7f11ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_gyro</definition>
        <argsstring>(BathArray *ba, const double gyro, int i)</argsstring>
        <name>BathArray_setBath_i_gyro</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gyro</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="707" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="707" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a4b770d35bc90be99331e39933cd9c1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_xyz</definition>
        <argsstring>(BathArray *ba, const double *xyz, int i)</argsstring>
        <name>BathArray_setBath_i_xyz</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>xyz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="711" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="711" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a87c6db78cecb6c93041773cd00d6084f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_state</definition>
        <argsstring>(BathArray *ba, const float state, int i)</argsstring>
        <name>BathArray_setBath_i_state</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="717" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="717" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a50fb3f2c6d63ddc983990a94c57e639d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_detuning</definition>
        <argsstring>(BathArray *ba, const double detuning, int i)</argsstring>
        <name>BathArray_setBath_i_detuning</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>detuning</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="731" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="731" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a657433e87570063c7c144cfccb137104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_disorder</definition>
        <argsstring>(BathArray *ba, const double disorder, int i)</argsstring>
        <name>BathArray_setBath_i_disorder</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>disorder</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="735" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="735" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1afbfbe9015a392def5373f06b4541e2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_hypf_j</definition>
        <argsstring>(BathArray *ba, const MatrixXcd hypf, int i, int j)</argsstring>
        <name>BathArray_setBath_i_hypf_j</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>hypf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="739" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="739" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ae368af7e204c16e2175e0c46a8916896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_quad</definition>
        <argsstring>(BathArray *ba, const MatrixXcd quad, int i)</argsstring>
        <name>BathArray_setBath_i_quad</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>quad</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="743" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="743" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a6414438c8a08b0c19f8c00abf3ca9f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_hypf_sub</definition>
        <argsstring>(BathArray *ba, const MatrixXcd hypf_sub, int i)</argsstring>
        <name>BathArray_setBath_i_hypf_sub</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const MatrixXcd</type>
          <declname>hypf_sub</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="756" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="756" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a90539ae67669123e69fde14e1e740749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setBath_i_mainspidx</definition>
        <argsstring>(BathArray *ba, const int mainspidx, int i)</argsstring>
        <name>BathArray_setBath_i_mainspidx</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>mainspidx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="760" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="760" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a998df8a27a219de72e8c5e649fabfba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setProp_nspecies</definition>
        <argsstring>(BathArray *ba, const int nspecies)</argsstring>
        <name>BathArray_setProp_nspecies</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nspecies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="765" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="765" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ab522fd89a2f7735fce49717657fc2ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setProp_names_i</definition>
        <argsstring>(BathArray *ba, const char *name, const int i)</argsstring>
        <name>BathArray_setProp_names_i</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="769" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="769" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ad1fcfbf71aa5f651a927fabf55139bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setProp_gyros_i</definition>
        <argsstring>(BathArray *ba, const double gyro, const int i)</argsstring>
        <name>BathArray_setProp_gyros_i</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gyro</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="773" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="773" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ab8add2946cbccdd4b285c7967693887a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_setProp_spins_i</definition>
        <argsstring>(BathArray *ba, const float spin, const int i)</argsstring>
        <name>BathArray_setProp_spins_i</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>spin</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="777" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="777" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ab3d9e90371702f02d3079d92d350c9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BathArray_getNspin</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_getNspin</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="782" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="782" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a0f22c6aa6634564441b38120dbe7d1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BathArray_getProp_nspecies</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_getProp_nspecies</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="789" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="789" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a77b5f1b50d73c86272d8dfca76b602ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** BathArray_getProp_names</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_getProp_names</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="793" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="793" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a904324f03aa4fc83ed7b66c7d11ca5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* BathArray_getProp_gyros</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_getProp_gyros</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="797" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="797" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a3567c9fbf5ecf1edc60c6da299a5784d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float* BathArray_getProp_spins</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_getProp_spins</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="801" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="801" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a52cb736aa4f55111561afef60814bd2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
        <definition>BathSpin* BathArray_getBath_i</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="805" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="805" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a1cbe81e69032a42d7fb0ba525567b2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* BathArray_getBath_i_name</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_name</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="809" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="809" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aef1b755648dd480d242c9d74c5567133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BathArray_getBath_i_spin</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_spin</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="813" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="813" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a9ffc1ce6293e0d06fb84d46dd2366ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathArray_getBath_i_gyro</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_gyro</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="817" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="817" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ab06988abed01e1efb1e61bbad7787c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* BathArray_getBath_i_xyz</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_xyz</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="821" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="821" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aad47df482af1d1fade54b3325b31b139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BathArray_getBath_i_state</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_state</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="825" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="825" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a798fb92c19dcf0498ebe0b85e2fa9ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathArray_getBath_i_detuning</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_detuning</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="829" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="829" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a0cb71295a4e71afbff3bc3935b435017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathArray_getBath_i_disorder</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_disorder</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="833" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="833" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a26d6d16ab0175646daf567de762b1485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_getBath_i_hypf_j</definition>
        <argsstring>(BathArray *ba, int i, int j)</argsstring>
        <name>BathArray_getBath_i_hypf_j</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="837" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="837" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a99917466fbbe6d0806953918202043ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_getBath_i_quad</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_quad</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="841" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="841" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ac19c5f1c1d4257a664bd95089429f0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathArray_getBath_i_hypf_sub</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_hypf_sub</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="845" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="845" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a407bd7d22d5fc648965272720d5be624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BathArray_getBath_i_mainspidx</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_getBath_i_mainspidx</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="849" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="849" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a2d114ccf24d82d900f1bfafa82c1da0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_freeAll</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_freeAll</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="854" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="854" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1acda53d63906c3eca93de86bed5e47408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_freeProp_names</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_freeProp_names</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="862" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="862" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a2236be7dbf2a5a8aebf7e62e2949b6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_freeProp_gyros</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_freeProp_gyros</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="866" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="866" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a86777f6285d332d90f6e5278677e019d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_freeProp_spins</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_freeProp_spins</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="870" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="870" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a378b3a6a9054b5e0c8ec95497de8283c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_freeBath</definition>
        <argsstring>(BathArray *ba)</argsstring>
        <name>BathArray_freeBath</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="874" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="874" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a00a0d3daa4ec6bcf52b18b76730ee5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathArray_freeBath_i_hypf</definition>
        <argsstring>(BathArray *ba, int i)</argsstring>
        <name>BathArray_freeBath_i_hypf</name>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="881" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="881" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ade7c821862291d5b92b87da7e495f408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setName</definition>
        <argsstring>(BathSpin *bs, char *name)</argsstring>
        <name>BathSpin_setName</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="889" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="889" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1adaf5f7854dd74f058217319885f4691c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setName_withType</definition>
        <argsstring>(BathSpin *bs, char *name, char *type)</argsstring>
        <name>BathSpin_setName_withType</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="894" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="894" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a25c89b5891205421bc4bc1ec59b89c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setSpin</definition>
        <argsstring>(BathSpin *bs, float spin)</argsstring>
        <name>BathSpin_setSpin</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="901" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="901" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a83883e57549af52a3ce49be77924f840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setGyro</definition>
        <argsstring>(BathSpin *bs, double gyro)</argsstring>
        <name>BathSpin_setGyro</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="906" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="906" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a7c12af66dc9d385d39f57ea7fb0e9af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setXyz</definition>
        <argsstring>(BathSpin *bs, double *xyz)</argsstring>
        <name>BathSpin_setXyz</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xyz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="911" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="911" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a70ae83571d0bc05152207a8e40189552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setXyz_fromRxyz</definition>
        <argsstring>(BathSpin *bs, double *xyz0, double *rxyz)</argsstring>
        <name>BathSpin_setXyz_fromRxyz</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xyz0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rxyz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="918" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="918" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a7c1684fd5fb3c7628df240a7932c618c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setState</definition>
        <argsstring>(BathSpin *bs, float state)</argsstring>
        <name>BathSpin_setState</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="925" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="925" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a6ca36740d4ed9cb98e3237adbd149d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setDetuning</definition>
        <argsstring>(BathSpin *bs, double detuning)</argsstring>
        <name>BathSpin_setDetuning</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>detuning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="936" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="936" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a656711de9d7b20032486ef2e7231fc13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setDisorder</definition>
        <argsstring>(BathSpin *bs, double disorder)</argsstring>
        <name>BathSpin_setDisorder</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>disorder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="941" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="941" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a53280b39f443866429a7e9617d23912e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setHypf_i</definition>
        <argsstring>(BathSpin *bs, MatrixXcd hypf, int iq)</argsstring>
        <name>BathSpin_setHypf_i</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>hypf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="946" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="946" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ad6d9410082a5cb435c3807ff06183c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setQuad</definition>
        <argsstring>(BathSpin *bs, MatrixXcd quad)</argsstring>
        <name>BathSpin_setQuad</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>quad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="951" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="951" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1aa29f90af0f1bcd6bede3197310bb73cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setQuad_fromEFG</definition>
        <argsstring>(BathSpin *bs, MatrixXcd efg, double eq, float spin)</argsstring>
        <name>BathSpin_setQuad_fromEFG</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>efg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>float</type>
          <declname>spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="956" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="956" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a7933c22cb29f34bb719d4db38259342a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setHypfSub</definition>
        <argsstring>(BathSpin *bs, MatrixXcd hypf_sub)</argsstring>
        <name>BathSpin_setHypfSub</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>hypf_sub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="984" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="984" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a18099f1b8f2c87110840322ba7667faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BathSpin_setMainspidx</definition>
        <argsstring>(BathSpin *bs, int mainspidx)</argsstring>
        <name>BathSpin_setMainspidx</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mainspidx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="989" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="989" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ab514bb5d414aa090c7693373943470ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* BathSpin_getName</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getName</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="995" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="995" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a2cb17e985a46f93221bd7edc256d6f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BathSpin_getSpin</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getSpin</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1000" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1000" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a51f78c4bffdc0e37ecd92a4408ab28b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathSpin_getGyro</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getGyro</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1005" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1005" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1ad03adfb1af4997899bc7f8b4707e8283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* BathSpin_getXyz</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getXyz</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1010" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1010" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a4da97f94bb37ea4be9360e89886a0623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BathSpin_getState</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getState</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1015" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1015" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1af1718e18c6c3a1c4fa2f2e307bfc8f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathSpin_getDetuning</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getDetuning</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1020" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1020" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a72bc4a7c7ef327b08196b1822fc5f6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BathSpin_getDisorder</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getDisorder</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1025" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1025" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a05f599220b6ac032bbdfa85e1ccae571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathSpin_getHypf_i</definition>
        <argsstring>(BathSpin *bs, int iq)</argsstring>
        <name>BathSpin_getHypf_i</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1030" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1030" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a0002a756c54b9f00fbb19f298bdb4a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathSpin_getQuad</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getQuad</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1035" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1035" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a99c04b6dfda4cc999acbc62beec252c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd BathSpin_getHypfSub</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getHypfSub</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1040" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1040" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="bath_8cpp_1a7cf2da09b53b10dda60600718edb3733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BathSpin_getMainspidx</definition>
        <argsstring>(BathSpin *bs)</argsstring>
        <name>BathSpin_getMainspidx</name>
        <param>
          <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/bath.cpp" line="1045" column="1" bodyfile="/home/huijin/git/CCEX/src/bath.cpp" bodystart="1045" bodyend="1047"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/bath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/hamiltonian.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>FLT_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>High<sp/>level<sp/>functions<sp/>--------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBathHypfs(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iqubit=0;<sp/>iqubit&lt;nqubit;<sp/>iqubit++){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qgyro<sp/>=<sp/>QubitArray_getQubit_i_gyro(qa,iqubit);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>qxyz<sp/>=<sp/>QubitArray_getQubit_i_xyz(qa,iqubit);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ispin=0;<sp/>ispin&lt;nspin;<sp/>ispin++){</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spgyro<sp/>=<sp/>BathArray_getBath_i_gyro(ba,ispin);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>spxyz<sp/>=<sp/>BathArray_getBath_i_xyz(ba,ispin);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>A<sp/>=<sp/>BathArray_getBath_i_hypf_j(ba,ispin,iqubit);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A.rows()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>A.cols()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Adip<sp/>=<sp/>calPointDipoleTensor(qxyz,<sp/>spxyz,<sp/>qgyro,<sp/>spgyro);<sp/></highlight><highlight class="comment">//<sp/>radkHz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_hypf_j(ba,<sp/>Adip,<sp/>ispin,<sp/>iqubit);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBathStatesRandom(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>BathArray_getBath_i_spin(ba,i);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>(int)(2*S+1);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>rand()<sp/>%<sp/>dim;<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>S<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_state(ba,ms,i);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BathArray_getOverhaus(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overhaus<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib=0;<sp/>ib&lt;nspin;<sp/>ib++){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overhaus<sp/>+=<sp/>BathArray_getBath_i_overhaus_j(ba,ib,iq);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overhaus;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BathArray_getBath_i_overhaus_j(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>𝐻_(𝑜ℎ,𝑖𝑎)^𝒥=⟨𝑚_𝑎^𝒥<sp/>|<sp/>𝑆_(𝑧,𝑖)<sp/>𝐴_(𝑧𝑧,𝑖𝑎)<sp/>𝐼_(𝑧,𝑎)<sp/>|𝑚_𝑎^𝒥<sp/>⟩=𝑚_𝑎^𝒥<sp/>𝐴_(𝑧𝑧,𝑖𝑎)<sp/>𝑆_(𝑧,𝑖)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we&apos;ll<sp/>get<sp/>overhaus<sp/>=<sp/>𝑚_𝑎^𝒥<sp/>𝐴_(𝑧𝑧,𝑖𝑎)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>BathArray_getBath_i_state(ba,isp);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>hypf<sp/>=<sp/>BathArray_getBath_i_hypf_j(ba,isp,iq);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hypf(2,2).real()<sp/>*<sp/>state;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBathDisorders(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disorder<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;nspin;<sp/>j++){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=j){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disorder<sp/>+=<sp/>BathArray_getBath_i_disorder_j(ba,i,j);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_disorder(ba,disorder,i);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BathArray_getBath_i_disorder_j(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsp){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disorder<sp/>for<sp/>ith<sp/>spin<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>𝐻_(𝑚𝑓,𝑘𝑎)^𝒥<sp/>=<sp/>⟨𝑚_𝑎^𝒥<sp/>|<sp/>𝐼_(𝑧,𝑘)<sp/>𝐽_(𝑧𝑧,𝑘𝑎)<sp/>𝐼_(𝑧,𝑎)<sp/>|𝑚_𝑎^𝒥<sp/>⟩<sp/>=<sp/>𝑚_𝑎^𝒥<sp/>𝐽_(𝑧𝑧,𝑘𝑎)<sp/>𝐼_(𝑧,𝑘)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disorder<sp/>for<sp/>spin<sp/>k<sp/>=<sp/>𝑚_𝑎^𝒥<sp/>𝐽_(𝑧𝑧,𝑘𝑎)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>𝑚_𝑎^𝒥</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mj<sp/>=<sp/>BathArray_getBath_i_state(ba,jsp);<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isp<sp/>&lt;<sp/>jsp){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>𝐽_(𝑧𝑧,𝑘𝑎)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Jzz<sp/>=<sp/>BathArray_int_i_j(ba,isp,jsp)(2,2).real();<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disorder<sp/>for<sp/>spin<sp/>k<sp/>=<sp/>𝑚_𝑎^𝒥<sp/>𝐽_(𝑧𝑧,𝑘𝑎)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Jzz<sp/>*<sp/>mj;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isp<sp/>==<sp/>jsp){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>(isp<sp/>&gt;<sp/>jsp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Jzz<sp/>=<sp/>BathArray_int_i_j(ba,jsp,isp)(2,2).real();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Jzz<sp/>*<sp/>mj;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>spin<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_connectivity(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***<sp/>cmap,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">***<sp/>stmap,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rdip,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rdipcut){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cmap<sp/>[nspin][nspin]<sp/>=<sp/>1<sp/>if<sp/>connected<sp/>else<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stmap<sp/>[nspin][nspin]<sp/>=<sp/>strength<sp/>of<sp/>the<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connectivity<sp/>Map<sp/>and<sp/>Strength<sp/>Map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>*cmap<sp/>=<sp/>allocInt2d(nspin,nspin);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>*stmap<sp/>=<sp/>allocFloat2d(nspin,nspin);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>connectivity<sp/>Map<sp/>and<sp/>strength<sp/>Map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>strength<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tensor;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp1=0;<sp/>sp1&lt;nspin;<sp/>sp1++){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp2=sp1+1;<sp/>sp2&lt;nspin;<sp/>sp2++){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>BathArray_dist_i_j(ba,sp1,sp2);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor<sp/>=<sp/>BathArray_int_i_j(ba,sp1,sp2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strength<sp/>=<sp/>tensor(2,2).real();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>&lt;<sp/>rdip<sp/>&amp;&amp;<sp/>r<sp/>&gt;<sp/>rdipcut){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cmap)[sp1][sp2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cmap)[sp2][sp1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stmap)[sp1][sp2]<sp/>=<sp/>fabs(strength);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stmap)[sp2][sp1]<sp/>=<sp/>fabs(strength);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>makeSparsemap(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">***<sp/>spmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>cmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spmap[nspin][ncol]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ncol<sp/>=<sp/>connected<sp/>spin<sp/>number<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>[i][0]<sp/>:<sp/>connected<sp/>spin<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>[i][j]<sp/>:<sp/>connected<sp/>spin<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>*spmap<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**)calloc(nspin,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row=0;<sp/>row&lt;nspin;<sp/>row++){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spmap)[row]<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spmap)[row][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row=0;<sp/>row&lt;nspin;<sp/>row++){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colLength<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col=0;<sp/>col&lt;nspin;<sp/>col++){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reallocInt1d(&amp;((*spmap)[row]),colLength+1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmap[row][col]!=0){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spmap)[row][colLength]<sp/>=<sp/>col;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colLength++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spmap)[row][0]<sp/>=<sp/>colLength;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BathArray_dimBath_i(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ba==NULL){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error(BathArray_dimBath_i):<sp/>ba<sp/>is<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>BathArray_getBath_i_spin(ba,i);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int((2.0*s)+1.0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>BathSpin_dim(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bs==NULL){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>bs-&gt;<ref refid="structBathSpin_1a0738a356e1f78530032d8bc8de02fbd8" kindref="member">spin</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int((2.0*s)+1.0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BathArray_dim(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ba==NULL){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>*=<sp/>BathArray_dimBath_i(ba,i);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dim;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>spin<sp/>interaction<sp/>tensor<sp/>between<sp/>two<sp/>bath<sp/>spins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">MatrixXcd<sp/>BathArray_int_i_j(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;=j){</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error(BathArray_Int_i_j):<sp/>i<sp/>and<sp/>j<sp/>should<sp/>be<sp/>i&lt;j\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>i-th,<sp/>j-th<sp/>spin<sp/>are<sp/>sharing<sp/>the<sp/>same<sp/>mainspin</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib_mainspidx<sp/>=<sp/>BathArray_getBath_i_mainspidx(ba,i);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jb_mainspidx<sp/>=<sp/>BathArray_getBath_i_mainspidx(ba,j);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib_mainspidx==jb_mainspidx<sp/>&amp;&amp;<sp/>(ib_mainspidx<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>jb_mainspidx<sp/>!=<sp/>-1)){</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>mainspin<sp/>or<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ib_is_subspin<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>jb_is_subspin<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ib_name<sp/>=<sp/>BathArray_getBath_i_name(ba,i);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>jb_name<sp/>=<sp/>BathArray_getBath_i_name(ba,j);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>subspin,<sp/>then<sp/>the<sp/>name<sp/>would<sp/>be<sp/>&quot;main_type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ib_name_[MAX_CHARARRAY_LENGTH]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jb_name_[MAX_CHARARRAY_LENGTH]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(ib_name_,</highlight><highlight class="stringliteral">&quot;%s_&quot;</highlight><highlight class="normal">,ib_name);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(jb_name_,</highlight><highlight class="stringliteral">&quot;%s_&quot;</highlight><highlight class="normal">,jb_name);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>ib<sp/>is<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(ib_name,jb_name_)<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib_is_subspin<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>jb<sp/>is<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(jb_name,ib_name_)<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jb_is_subspin<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib_is_subspin<sp/>&amp;&amp;<sp/>jb_is_subspin){</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/></highlight><highlight class="comment">//<sp/>sub<sp/>-<sp/>sub<sp/>&gt;<sp/>point-dipole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib_is_subspin<sp/>&amp;&amp;<sp/>!jb_is_subspin){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub<sp/>-<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>summation<sp/>of<sp/>hypf_sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>ib_hypf_sub<sp/>=<sp/>BathArray_getBath_i_hypf_sub(ba,i);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>summation<sp/>of<sp/>hypf_sub<sp/>is<sp/>not<sp/>zero,<sp/>then<sp/>point-dipole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ib_hypf_sub.isZero(FLT_EPSILON)){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ib_hypf_sub;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ib_is_subspin<sp/>&amp;&amp;<sp/>jb_is_subspin){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>-<sp/>sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>summation<sp/>of<sp/>hypf_sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>jb_hypf_sub<sp/>=<sp/>BathArray_getBath_i_hypf_sub(ba,j);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>summation<sp/>of<sp/>hypf_sub<sp/>is<sp/>not<sp/>zero,<sp/>then<sp/>point-dipole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!jb_hypf_sub.isZero(FLT_EPSILON)){</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jb_hypf_sub;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>-<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error(BathArray_int_i_j):<sp/>i=%d<sp/>and<sp/>j=%d<sp/>are<sp/>both<sp/>main<sp/>spins\n&quot;</highlight><highlight class="normal">,i,j);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error(BathArray_int_i_j):<sp/>They<sp/>should<sp/>have<sp/>different<sp/>mainspidx\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>are<sp/>the<sp/>main<sp/>spins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz1<sp/>=<sp/>BathArray_getBath_i_xyz(ba,i);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz2<sp/>=<sp/>BathArray_getBath_i_xyz(ba,j);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>gyro1<sp/>=<sp/>BathArray_getBath_i_gyro(ba,i);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>gyro2<sp/>=<sp/>BathArray_getBath_i_gyro(ba,j);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>pdtensor<sp/>=<sp/>calPointDipoleTensor(xyz1,xyz2,gyro1,gyro2);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pdtensor;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BathArray_dist_i_j(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j){</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz1<sp/>=<sp/>BathArray_getBath_i_xyz(ba,i);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz2<sp/>=<sp/>BathArray_getBath_i_xyz(ba,j);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist(xyz1,xyz2);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">MatrixXcd<sp/>BathArray_ZeemanHamil(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>bfield){</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib<sp/>&gt;=<sp/>nspin){</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>BathArray_ZeemanHamil:<sp/>ib<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,ib);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spgyro<sp/>=<sp/>BathArray_getBath_i_gyro(ba,ib);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vecZeeman<sp/>=<sp/>calZeemanVector(spgyro,bfield);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calHamiltonianSingleInt(vecZeeman,sigmas[ib]);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">MatrixXcd<sp/>BathArray_DetuningHamil(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib){</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib<sp/>&gt;=<sp/>nspin){</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>BathArray_DetuningHamil:<sp/>ib<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,ib);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detuning<sp/>=<sp/>BathArray_getBath_i_detuning(ba,ib);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vecDetuning<sp/>=<sp/>calDetuningVector(detuning);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calHamiltonianSingleInt(vecDetuning,sigmas[ib]);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">MatrixXcd<sp/>BathArray_DisorderHamil(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rm_overlap){</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rm_overlap<sp/>:<sp/>Remove<sp/>the<sp/>disorder<sp/>orginated<sp/>from<sp/>the<sp/>bath<sp/>spins<sp/>in<sp/>BathArray.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib<sp/>&gt;=<sp/>nspin){</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>BathArray_DisorderHamil:<sp/>ib<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,ib);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vecDisorder;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disorder<sp/>=<sp/>BathArray_getBath_i_disorder(ba,ib);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disorder_overlap<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rm_overlap){</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jb=0;<sp/>jb&lt;nspin<sp/>;<sp/>jb++){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disorder_overlap<sp/>+=<sp/>BathArray_getBath_i_disorder_j(ba,ib,jb);<sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>disorder<sp/><sp/><sp/><sp/>=<sp/>disorder<sp/>-<sp/>disorder_overlap;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>vecDisorder<sp/>=<sp/>calDetuningVector(disorder);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calHamiltonianSingleInt(vecDisorder,sigmas[ib]);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">MatrixXcd<sp/>BathArray_QuadHamil(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib){</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib<sp/>&gt;=<sp/>nspin){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>BathArray_QuadHamil:<sp/>ib<sp/>=<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,ib);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>quad<sp/>=<sp/>BathArray_getBath_i_quad(ba,ib);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calHamiltonianSelfInt(sigmas[ib],quad);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">MatrixXcd<sp/>BathArray_InteractionHamil(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/>MatrixXcd**<sp/>sigmas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jb){</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimBA<sp/>=<sp/>BathArray_dim(ba);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bath<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Hbij<sp/>=<sp/>MatrixXcd::Zero(dimBA,dimBA);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib&lt;jb){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tensor<sp/>=<sp/>BathArray_int_i_j(ba,ib,jb);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEmpty<sp/>=<sp/>tensor.isZero(FLT_EPSILON);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isEmpty){</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hbij<sp/>=<sp/>calHamiltonianHeteroInt(sigmas,<sp/>tensor,<sp/>nspin,<sp/>ib,<sp/>jb);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error:<sp/>BathArray_InteractionHamil:<sp/>ib,jb<sp/>=<sp/>%d,%d<sp/>is<sp/>out<sp/>of<sp/>range<sp/>or<sp/>ib&gt;jb\n&quot;</highlight><highlight class="normal">,ib,jb);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hbij;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">MatrixXcd**<sp/>BathArray_PauliOperators(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimBA<sp/>=<sp/>BathArray_dim(ba);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pauli<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd**<sp/>sigmas<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd*[nspin];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib=0;<sp/>ib&lt;nspin;<sp/>ib++){</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimB<sp/>=<sp/>BathArray_dimBath_i(ba,ib);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigmas[ib]<sp/>=<sp/>getPauliOperators(dimB);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigmas;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>density<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">MatrixXcd<sp/>BathArray_Rho0(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEnsemble){</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimBA<sp/>=<sp/>BathArray_dim(ba);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEnsemble<sp/>||<sp/>dimBA<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatrixXcd::Identity(dimBA,dimBA)<sp/>*<sp/>(1.0/(double)dimBA);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psi0<sp/>=<sp/>BathArray_Psi0(ba);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psi0<sp/>*<sp/>psi0.adjoint();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">MatrixXcd<sp/>BathArray_Psi0(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimBA<sp/>=<sp/>BathArray_dim(ba);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>psi0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib=0;<sp/>ib&lt;nspin;<sp/>ib++){</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>BathArray_getBath_i_spin(ba,ib);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>BathArray_getBath_i_state(ba,ib);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib==0){</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psi0<sp/>=<sp/>getSpinor(S,ms);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psi0<sp/>=<sp/>kron(psi0,getSpinor(S,ms));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psi0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low<sp/>level<sp/>functions<sp/>--------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/><sp/>BathArray_init(){</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba<sp/>=<sp/>(<ref refid="structBathArray" kindref="compound">BathArray</ref>*)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structBathArray" kindref="compound">BathArray</ref>));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setNspin(ba,0);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setProp_nspecies(ba,0);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a8349ee706336e916dd546a613fbb51e2" kindref="member">prop_names</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a79ff244bc7666f22c2bbb8072d3e3fa2" kindref="member">prop_gyros</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1aca533199f1899634d7c1827864c89478" kindref="member">prop_spins</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_report(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_reportSpinProperties(ba);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_reportBath(ba);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportSpinProperties(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nspecies&quot;</highlight><highlight class="normal">,BathArray_getProp_nspecies(ba));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementChar2d(</highlight><highlight class="stringliteral">&quot;names&quot;</highlight><highlight class="normal">,BathArray_getProp_names(ba),BathArray_getProp_nspecies(ba));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementDouble1d(</highlight><highlight class="stringliteral">&quot;gyros&quot;</highlight><highlight class="normal">,BathArray_getProp_gyros(ba),BathArray_getProp_nspecies(ba));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementFloat1d(</highlight><highlight class="stringliteral">&quot;spins&quot;</highlight><highlight class="normal">,BathArray_getProp_spins(ba),BathArray_getProp_nspecies(ba));</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nspin<sp/>(#)&quot;</highlight><highlight class="normal">,nspin);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nspin-3)){<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_reportBath_i_props(ba,i);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath_i_props(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>BathArray_getBath_i_name(ba,i);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin<sp/>=<sp/>BathArray_getBath_i_spin(ba,i);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro<sp/>=<sp/>BathArray_getBath_i_gyro(ba,i);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz<sp/>=<sp/>BathArray_getBath_i_xyz(ba,i);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mainspidx<sp/>=<sp/>BathArray_getBath_i_mainspidx(ba,i);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>[%3d]<sp/>%5s<sp/>%7.3lf<sp/>%7.3lf<sp/>%7.3lf<sp/><sp/><sp/>(<sp/>S<sp/>=<sp/>%2.1f,<sp/>gyro<sp/>=<sp/>%10.3lf,<sp/>mainspidx<sp/>=<sp/>%d<sp/>)\n&quot;</highlight><highlight class="normal">,i,name,xyz[0],xyz[1],xyz[2],spin,gyro,<sp/>mainspidx);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath_states(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nbathspin<sp/>(#)&quot;</highlight><highlight class="normal">,nspin);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nspin-3)){<sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>BathArray_getBath_i_state(ba,i);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;bath[%d].state<sp/>&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementFloat(message,state);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath_detunings(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Bath<sp/>Detunings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nspin-3)){<sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detuning<sp/>=<sp/>BathArray_getBath_i_detuning(ba,i);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>[%3d]<sp/>detuning<sp/>=<sp/>%7.3g\n&quot;</highlight><highlight class="normal">,i,detuning);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath_disorders(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Bath<sp/>Disorders<sp/>(radkHz)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nspin-3)){<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message<sp/>[100];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(message,100,</highlight><highlight class="stringliteral">&quot;Bath[%d].disorder&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementDouble(message,BathArray_getBath_i_disorder(ba,i));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath_hypf(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Bath<sp/>Hyperfine<sp/>tensors<sp/>(radkHz)<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>hypf[ib][iq]<sp/>(ib<sp/>:<sp/>bath<sp/>spin<sp/>index,<sp/>iq<sp/>:<sp/>qubit<sp/>index)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq=0;<sp/>iq&lt;nqubit;<sp/>iq++){</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nspin-3)){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(key,</highlight><highlight class="stringliteral">&quot;hypf[%d][%d]&quot;</highlight><highlight class="normal">,i,iq);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>hypf<sp/>=<sp/>BathArray_getBath_i_hypf_j(ba,i,iq);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(key,hypf);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>printLineSection();</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath_quad(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nspin-3)){<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,100,</highlight><highlight class="stringliteral">&quot;quad[%d]&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>quad<sp/>=<sp/>BathArray_getBath_i_quad(ba,i);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(key,quad);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reportBath_hypf_sub(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nspin-3)){<sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>hypf_sub<sp/>=<sp/>BathArray_getBath_i_hypf_sub(ba,i);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mainspidx<sp/>=<sp/>BathArray_getBath_i_mainspidx(ba,i);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,100,</highlight><highlight class="stringliteral">&quot;hypf_sub[%d]<sp/>(mainsp<sp/>=<sp/>%d)&quot;</highlight><highlight class="normal">,i,<sp/>mainspidx);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(key,hypf_sub);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//alloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_allocBath(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref><sp/>=<sp/>(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>**)allocArray2d(nspin,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nspin;<sp/>i++){</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_allocBath_i_hypf(ba,i,nqubit);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_mainspidx(ba,-1,i);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_name(ba,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_spin(ba,0.0,i);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_gyro(ba,0.0,i);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_xyz(ba,(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[]){0.0,0.0,0.0},i);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_state(ba,0.0,i);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_detuning(ba,0.0,i);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_disorder(ba,0.0,i);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref><sp/>=<sp/>MatrixXcd::Zero(3,3);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BathArray_setBath_i_quad(ba,MatrixXcd::Zero(3,3),i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reallocBath(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_length,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_length,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_length<sp/>&lt;=<sp/>old_length){</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error(BathArray_reallocBath):<sp/>it<sp/>cannot<sp/>be<sp/>new_length<sp/>&lt;=<sp/>old_length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)&amp;(ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>),old_length,new_length,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=old_length;<sp/>i&lt;new_length;<sp/>i++){</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_allocBath_i_hypf(ba,i,nqubit);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_mainspidx(ba,-1,i);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_name(ba,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_spin(ba,0.0,i);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_gyro(ba,0.0,i);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_xyz(ba,(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[]){0.0,0.0,0.0},i);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_state(ba,0.0,i);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_detuning(ba,0.0,i);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_disorder(ba,0.0,i);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref><sp/>=<sp/>MatrixXcd::Zero(3,3);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BathArray_setBath_i_quad(ba,MatrixXcd::Zero(3,3),i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_allocProp(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspecies<sp/>=<sp/>BathArray_getProp_nspecies(ba);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a8349ee706336e916dd546a613fbb51e2" kindref="member">prop_names</ref><sp/>=<sp/>allocChar2d(nspecies,MAX_CHARARRAY_LENGTH);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a79ff244bc7666f22c2bbb8072d3e3fa2" kindref="member">prop_gyros</ref><sp/>=<sp/>allocDouble1d(nspecies);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1aca533199f1899634d7c1827864c89478" kindref="member">prop_spins</ref><sp/>=<sp/>allocFloat1d(nspecies);</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_reallocProp(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin_old,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin_new){</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nspin_new<sp/>&lt;=<sp/>nspin_old){</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error(BathArray_realloc_Prop):<sp/>it<sp/>cannot<sp/>be<sp/>nspin_new<sp/>&lt;=<sp/>nspin_old\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocChar2d(&amp;(ba-&gt;<ref refid="structBathArray_1a8349ee706336e916dd546a613fbb51e2" kindref="member">prop_names</ref>),nspin_old,nspin_new,MAX_CHARARRAY_LENGTH);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocDouble1d(&amp;(ba-&gt;<ref refid="structBathArray_1a79ff244bc7666f22c2bbb8072d3e3fa2" kindref="member">prop_gyros</ref>),nspin_new);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>reallocFloat1d(&amp;(ba-&gt;<ref refid="structBathArray_1aca533199f1899634d7c1827864c89478" kindref="member">prop_spins</ref>),nspin_new);</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_allocBath_i_hypf(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd[nqubit];</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setNspin(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin){</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1ac71d275f6b9a2293d80fe8edf69fc46f" kindref="member">nspin</ref><sp/>=<sp/>nspin;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bath==NULL<sp/>||<sp/>i<sp/>&gt;=<sp/>nspin){</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error(BathArray_setBath_i):<sp/>bath<sp/>couldn&apos;t<sp/>be<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_name(ba,bath-&gt;<ref refid="structBathSpin_1a2158c37aefcd8093520106945f5f7463" kindref="member">name</ref>,i);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_spin(ba,bath-&gt;<ref refid="structBathSpin_1a0738a356e1f78530032d8bc8de02fbd8" kindref="member">spin</ref>,i);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_gyro(ba,bath-&gt;<ref refid="structBathSpin_1a8c6487e73c2ef39b7a12d293ff5a1e4d" kindref="member">gyro</ref>,i);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_xyz(ba,bath-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>,i);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_state(ba,bath-&gt;<ref refid="structBathSpin_1a6348f965fe820b03094f4c620ab7ffe0" kindref="member">state</ref>,i);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_detuning(ba,bath-&gt;<ref refid="structBathSpin_1a045005fcc1f5517a81e47e4a8b30e2f4" kindref="member">detuning</ref>,i);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_disorder(ba,bath-&gt;<ref refid="structBathSpin_1aad59ec954d15643047790f148dcca39b" kindref="member">disorder</ref>,i);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_hypf_sub(ba,bath-&gt;hypf_sub,i);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_setBath_i_mainspidx(ba,bath-&gt;mainspidx,i);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref><sp/>=<sp/>bath-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref>;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BathArray_setBath_i_quad(ba,bath-&gt;quad,i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;nqubit;<sp/>j++){</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_hypf_j(ba,bath-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref>[j],i,j);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_name(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a2158c37aefcd8093520106945f5f7463" kindref="member">name</ref>,name);</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_spin(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a0738a356e1f78530032d8bc8de02fbd8" kindref="member">spin</ref><sp/>=<sp/>spin;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_gyro(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a8c6487e73c2ef39b7a12d293ff5a1e4d" kindref="member">gyro</ref><sp/>=<sp/>gyro;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_xyz(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[0]<sp/>=<sp/>xyz[0];</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[1]<sp/>=<sp/>xyz[1];</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[2]<sp/>=<sp/>xyz[2];</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_state(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>S<sp/>=<sp/>BathArray_getBath_i_spin(ba,i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(!isSubLevel(S,state)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;Error(BathArray_setBath_i_state):<sp/>S<sp/>=<sp/>%2.1f\n&quot;,S);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;Error(BathArray_setBath_i_state):<sp/>state<sp/>=<sp/>%2.1f<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;,state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a6348f965fe820b03094f4c620ab7ffe0" kindref="member">state</ref><sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_detuning(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detuning,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a045005fcc1f5517a81e47e4a8b30e2f4" kindref="member">detuning</ref><sp/>=<sp/>detuning;</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_disorder(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disorder,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1aad59ec954d15643047790f148dcca39b" kindref="member">disorder</ref><sp/>=<sp/>disorder;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_hypf_j(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>hypf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j){</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref>[j]<sp/>=<sp/>hypf;</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_quad(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>quad,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>BathArray_getBath_i_spin(ba,i);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S&lt;1.0){</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank==0){</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Warning(BathArray_setBath_i_quad):<sp/>BathSpin[%d]<sp/>S<sp/>=<sp/>%2.1f\n&quot;</highlight><highlight class="normal">,i,S);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Warning(BathArray_setBath_i_quad):<sp/>You<sp/>set<sp/>the<sp/>quadrupole<sp/>but<sp/>the<sp/>spin<sp/>number<sp/>is<sp/>larger<sp/>than<sp/>0.5\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Warning(BathArray_setBath_i_quad):<sp/>I<sp/>hope<sp/>you<sp/>know<sp/>what<sp/>you<sp/>do\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref><sp/>=<sp/>quad;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_hypf_sub(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXcd<sp/>hypf_sub,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;hypf_sub<sp/>=<sp/>hypf_sub;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setBath_i_mainspidx(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mainspidx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;mainspidx<sp/>=<sp/>mainspidx;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setProp_nspecies(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nspecies){</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a23c43fd398472286b1f80c5159896daf" kindref="member">prop_nspecies</ref><sp/>=<sp/>nspecies;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setProp_names_i(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(ba-&gt;<ref refid="structBathArray_1a8349ee706336e916dd546a613fbb51e2" kindref="member">prop_names</ref>[i],name);</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setProp_gyros_i(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1a79ff244bc7666f22c2bbb8072d3e3fa2" kindref="member">prop_gyros</ref>[i]<sp/>=<sp/>gyro;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_setProp_spins_i(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>ba-&gt;<ref refid="structBathArray_1aca533199f1899634d7c1827864c89478" kindref="member">prop_spins</ref>[i]<sp/>=<sp/>spin;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BathArray_getNspin(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ba<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1ac71d275f6b9a2293d80fe8edf69fc46f" kindref="member">nspin</ref>;</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BathArray_getProp_nspecies(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a23c43fd398472286b1f80c5159896daf" kindref="member">prop_nspecies</ref>;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>BathArray_getProp_names(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a8349ee706336e916dd546a613fbb51e2" kindref="member">prop_names</ref>;</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>BathArray_getProp_gyros(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a79ff244bc7666f22c2bbb8072d3e3fa2" kindref="member">prop_gyros</ref>;</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>BathArray_getProp_spins(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1aca533199f1899634d7c1827864c89478" kindref="member">prop_spins</ref>;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>BathArray_getBath_i(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i];</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>BathArray_getBath_i_name(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a2158c37aefcd8093520106945f5f7463" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>BathArray_getBath_i_spin(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a0738a356e1f78530032d8bc8de02fbd8" kindref="member">spin</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BathArray_getBath_i_gyro(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a8c6487e73c2ef39b7a12d293ff5a1e4d" kindref="member">gyro</ref>;</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>BathArray_getBath_i_xyz(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>BathArray_getBath_i_state(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a6348f965fe820b03094f4c620ab7ffe0" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BathArray_getBath_i_detuning(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a045005fcc1f5517a81e47e4a8b30e2f4" kindref="member">detuning</ref>;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BathArray_getBath_i_disorder(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1aad59ec954d15643047790f148dcca39b" kindref="member">disorder</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">MatrixXcd<sp/>BathArray_getBath_i_hypf_j(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j){</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref>[j];</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">MatrixXcd<sp/>BathArray_getBath_i_quad(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref>;</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">MatrixXcd<sp/>BathArray_getBath_i_hypf_sub(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;hypf_sub;</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BathArray_getBath_i_mainspidx(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;mainspidx;</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_freeAll(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_freeProp_names(ba);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_freeProp_gyros(ba);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_freeProp_spins(ba);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>BathArray_freeBath(ba);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;ba);</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_freeProp_names(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>freeChar2d(&amp;(ba-&gt;<ref refid="structBathArray_1a8349ee706336e916dd546a613fbb51e2" kindref="member">prop_names</ref>),ba-&gt;<ref refid="structBathArray_1a23c43fd398472286b1f80c5159896daf" kindref="member">prop_nspecies</ref>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_freeProp_gyros(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>freeDouble1d(&amp;(ba-&gt;<ref refid="structBathArray_1a79ff244bc7666f22c2bbb8072d3e3fa2" kindref="member">prop_gyros</ref>));</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_freeProp_spins(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>freeFloat1d(&amp;(ba-&gt;<ref refid="structBathArray_1aca533199f1899634d7c1827864c89478" kindref="member">prop_spins</ref>));</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_freeBath(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;ba-&gt;<ref refid="structBathArray_1ac71d275f6b9a2293d80fe8edf69fc46f" kindref="member">nspin</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_freeBath_i_hypf(ba,i);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;(ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BathArray_freeBath_i_hypf(<ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ba-&gt;<ref refid="structBathArray_1a807633d8e314f488e12dfc95040ecc01" kindref="member">bath</ref>[i]-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref>;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="comment">//<sp/>BathSpin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="889"><highlight class="normal">BathSpin_setName(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name){</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(bs-&gt;<ref refid="structBathSpin_1a2158c37aefcd8093520106945f5f7463" kindref="member">name</ref>,name);</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="894"><highlight class="normal">BathSpin_setName_withType(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type){</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name_type[MAX_CHARARRAY_LENGTH];</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(name_type,MAX_CHARARRAY_LENGTH,</highlight><highlight class="stringliteral">&quot;%s_%s&quot;</highlight><highlight class="normal">,name,type);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>BathSpin_setName(bs,name_type);</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="901"><highlight class="normal">BathSpin_setSpin(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin){</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1a0738a356e1f78530032d8bc8de02fbd8" kindref="member">spin</ref><sp/>=<sp/>spin;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="906"><highlight class="normal">BathSpin_setGyro(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro){</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1a8c6487e73c2ef39b7a12d293ff5a1e4d" kindref="member">gyro</ref><sp/>=<sp/>gyro;</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="911"><highlight class="normal">BathSpin_setXyz(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz){</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[0]<sp/>=<sp/>xyz[0];</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[1]<sp/>=<sp/>xyz[1];</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[2]<sp/>=<sp/>xyz[2];</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal">BathSpin_setXyz_fromRxyz(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rxyz){</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[0]<sp/>=<sp/>xyz0[0]<sp/>+<sp/>rxyz[0];</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[1]<sp/>=<sp/>xyz0[1]<sp/>+<sp/>rxyz[1];</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>[2]<sp/>=<sp/>xyz0[2]<sp/>+<sp/>rxyz[2];</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="925"><highlight class="normal">BathSpin_setState(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state){</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!isSubLevel(bs-&gt;spin,state)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fprintf(stderr,&quot;Error(BathSpin_setState):<sp/>S<sp/>=<sp/>%2.1f\n&quot;,bs-&gt;spin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fprintf(stderr,&quot;Error(BathSpin_setState):<sp/>state<sp/>=<sp/>%2.1f<sp/>is<sp/>out<sp/>of<sp/>range\n&quot;,state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1a6348f965fe820b03094f4c620ab7ffe0" kindref="member">state</ref><sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="936"><highlight class="normal">BathSpin_setDetuning(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detuning){</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1a045005fcc1f5517a81e47e4a8b30e2f4" kindref="member">detuning</ref><sp/>=<sp/>detuning;</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="941"><highlight class="normal">BathSpin_setDisorder(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disorder){</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1aad59ec954d15643047790f148dcca39b" kindref="member">disorder</ref><sp/>=<sp/>disorder;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="946"><highlight class="normal">BathSpin_setHypf_i(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/>MatrixXcd<sp/>hypf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq){</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref>[iq]<sp/>=<sp/>hypf;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal">BathSpin_setQuad(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/>MatrixXcd<sp/>quad){</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref><sp/>=<sp/>quad;</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="956"><highlight class="normal">BathSpin_setQuad_fromEFG(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/>MatrixXcd<sp/>efg,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eq,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin){</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>efg<sp/>:<sp/>Hartree/Bohr^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eq<sp/>:<sp/>10e-30<sp/>m^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>plank<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>4.135667*pow(10,-15);<sp/></highlight><highlight class="comment">//<sp/>eV<sp/>*<sp/>sec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unit<sp/>conversion<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Hatress2eV<sp/>=<sp/>27.211386;<sp/></highlight><highlight class="comment">//<sp/>1Hatree<sp/>=<sp/>27.211386eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BohrRadius2m<sp/>=<sp/>0.5291772*pow(10,-10);<sp/></highlight><highlight class="comment">//<sp/>1Bohr_raidus<sp/>=<sp/>5.29177E-11<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BohrRadiusSq2mSq<sp/>=<sp/>pow(BohrRadius2m,2);<sp/><sp/></highlight><highlight class="comment">//<sp/>1Bohr_raidus^2<sp/>=<sp/>(5.29177E-11<sp/>m)^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Hz2MHz<sp/>=<sp/>pow(10,-6);<sp/></highlight><highlight class="comment">//<sp/>1Hz<sp/>=<sp/>10^-6<sp/>MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>UnitConversion<sp/>=<sp/>Hatress2eV/BohrRadiusSq2mSq*Hz2MHz;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>efg<sp/>=<sp/>UnitConversion<sp/>*<sp/>efg;<sp/></highlight><highlight class="comment">//<sp/>Hartree/Bohr^2<sp/>-&gt;<sp/>MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>eq<sp/>=<sp/>eq<sp/>*<sp/>1.0e-30;<sp/></highlight><highlight class="comment">//<sp/>10e-30<sp/>m^2<sp/>-&gt;<sp/>m^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quadrupole<sp/>(radkHz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spin<sp/>&gt;<sp/>0.5){</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref><sp/>=<sp/>MHZ_TO_RADKHZ((eq)/(2.0*spin*(2.0*spin-1.0))/h<sp/>*<sp/>efg);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref><sp/>=<sp/>MatrixXcd::Zero(3,3);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="984"><highlight class="normal">BathSpin_setHypfSub(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/>MatrixXcd<sp/>hypf_sub){</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;hypf_sub<sp/>=<sp/>hypf_sub;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal">BathSpin_setMainspidx(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mainspidx){</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;mainspidx<sp/>=<sp/>mainspidx;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="995"><highlight class="normal">BathSpin_getName(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1a2158c37aefcd8093520106945f5f7463" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1000"><highlight class="normal">BathSpin_getSpin(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1a0738a356e1f78530032d8bc8de02fbd8" kindref="member">spin</ref>;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1005"><highlight class="normal">BathSpin_getGyro(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1a8c6487e73c2ef39b7a12d293ff5a1e4d" kindref="member">gyro</ref>;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1010"><highlight class="normal">BathSpin_getXyz(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1ae88f65d01b379916181269efa6c33e8a" kindref="member">xyz</ref>;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1015"><highlight class="normal">BathSpin_getState(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1a6348f965fe820b03094f4c620ab7ffe0" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1020"><highlight class="normal">BathSpin_getDetuning(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1a045005fcc1f5517a81e47e4a8b30e2f4" kindref="member">detuning</ref>;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">BathSpin_getDisorder(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1aad59ec954d15643047790f148dcca39b" kindref="member">disorder</ref>;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">MatrixXcd<sp/><sp/></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">BathSpin_getHypf_i(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq){</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref>[iq];</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal">MatrixXcd<sp/><sp/></highlight></codeline>
<codeline lineno="1035"><highlight class="normal">BathSpin_getQuad(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;<ref refid="structBathSpin_1a304f556a5ba51a1275171e40d212d0d2" kindref="member">quad</ref>;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal">MatrixXcd<sp/><sp/></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">BathSpin_getHypfSub(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;hypf_sub;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">BathSpin_getMainspidx(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>bs){</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs-&gt;mainspidx;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/huijin/git/CCEX/src/bath.cpp"/>
  </compounddef>
</doxygen>
