<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="defect_8cpp" kind="file">
    <compoundname>defect.cpp</compoundname>
    <includes refid="defect_8h" local="yes">../include/defect.h</includes>
    <includes refid="memory_8h" local="yes">../include/memory.h</includes>
    <includes refid="hamiltonian_8h" local="yes">../include/hamiltonian.h</includes>
    <includes local="no">float.h</includes>
    <incdepgraph>
      <node id="281">
        <label>../include/hamiltonian.h</label>
        <link refid="hamiltonian_8h_source"/>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="282">
        <label>float.h</label>
      </node>
      <node id="277">
        <label>bath.h</label>
        <link refid="bath_8h_source"/>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
      </node>
      <node id="278">
        <label>qubit.h</label>
        <link refid="qubit_8h_source"/>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="273">
        <label>Eigen/Dense</label>
      </node>
      <node id="271">
        <label>../include/defect.h</label>
        <link refid="defect_8h_source"/>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
      </node>
      <node id="276">
        <label>unistd.h</label>
      </node>
      <node id="279">
        <label>general.h</label>
        <link refid="general_8h_source"/>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="270">
        <label>/home/huijin/git/CCEX/src/defect.cpp</label>
        <link refid="defect.cpp"/>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
      </node>
      <node id="274">
        <label>iostream</label>
      </node>
      <node id="280">
        <label>../include/memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="275">
        <label>mpi.h</label>
      </node>
      <node id="272">
        <label>utilities.h</label>
        <link refid="utilities_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="defect_8cpp_1a19b3232ef7141b1d483fcd131731a6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setPaxesRandom</definition>
        <argsstring>(DefectArray *dfa, BathArray *ba)</argsstring>
        <name>DefectArray_setPaxesRandom</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="7" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="7" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1adbf80bb27c87982f8f79a99f114ef800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setSubbathStatesRandom</definition>
        <argsstring>(DefectArray *dfa, BathArray *ba)</argsstring>
        <name>DefectArray_setSubbathStatesRandom</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="32" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="32" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a594f6496fbe2beffb66f7a9f6676f897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
        <definition>DefectArray* DefectArray_init</definition>
        <argsstring>()</argsstring>
        <name>DefectArray_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="56" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="56" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a92e592e423feb06322258098e2fcb036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setNdefect</definition>
        <argsstring>(DefectArray *dfa, int ndefect)</argsstring>
        <name>DefectArray_setNdefect</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndefect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="68" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ab4f111640c471a92439340e842b9e9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_allocDefect</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_allocDefect</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="73" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a0050ddceb6923987c25359df9fe9afa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_allocDefect_idf</definition>
        <argsstring>(DefectArray *dfa, int idf, int navaax, int naddspin)</argsstring>
        <name>DefectArray_allocDefect_idf</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>navaax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>naddspin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="77" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="77" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a8fa56bf286f6fcf64d2dc047d01b918c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_dfname</definition>
        <argsstring>(DefectArray *dfa, int idf, char *dfname)</argsstring>
        <name>DefectArray_setDefect_idf_dfname</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dfname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="98" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a5b02d2ac15f48e856dc77b217a40d50f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_apprx</definition>
        <argsstring>(DefectArray *dfa, int idf, bool apprx)</argsstring>
        <name>DefectArray_setDefect_idf_apprx</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apprx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="102" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1abf13b685a00e2bca791525c42d7ed322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_naddspin</definition>
        <argsstring>(DefectArray *dfa, int idf, int naddspin)</argsstring>
        <name>DefectArray_setDefect_idf_naddspin</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>naddspin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="106" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a8cce64a381a9420aef267dac3d2e0350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_types</definition>
        <argsstring>(DefectArray *dfa, int idf, char **types)</argsstring>
        <name>DefectArray_setDefect_idf_types</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="110" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ad3fc00f5c269cfc80d79fa4c734133e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_spins</definition>
        <argsstring>(DefectArray *dfa, int idf, float *spins)</argsstring>
        <name>DefectArray_setDefect_idf_spins</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>spins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="116" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a4acc76c5be56d692708099dbda367b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_gyros</definition>
        <argsstring>(DefectArray *dfa, int idf, double *gyros)</argsstring>
        <name>DefectArray_setDefect_idf_gyros</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>gyros</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="122" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1aaf14496555fe212f232f3555fb2db9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_eqs</definition>
        <argsstring>(DefectArray *dfa, int idf, double *eqs)</argsstring>
        <name>DefectArray_setDefect_idf_eqs</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>eqs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="128" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a22b975bb45d623f3cd40116fb062fbd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_navaax</definition>
        <argsstring>(DefectArray *dfa, int idf, int navaax)</argsstring>
        <name>DefectArray_setDefect_idf_navaax</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>navaax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="134" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ada9f91638deae71eee0f7dab44282822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_iax_isp_rxyz</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, int isp, double *rxyzs)</argsstring>
        <name>DefectArray_setDefect_idf_iax_isp_rxyz</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rxyzs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="138" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1acbb90ee7348f37b4c968eb71f0d407e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_iax_isp_hypf</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, int isp, MatrixXcd hypf)</argsstring>
        <name>DefectArray_setDefect_idf_iax_isp_hypf</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>hypf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="143" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a6dddd196c3d014c2d5c1cdcdea99e790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_iax_isp_efg</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, int isp, MatrixXcd efg)</argsstring>
        <name>DefectArray_setDefect_idf_iax_isp_efg</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>efg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="146" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a1eb4f15b7acb6173c791b5278ae88c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_iax_zfs</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, MatrixXcd zfs)</argsstring>
        <name>DefectArray_setDefect_idf_iax_zfs</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>zfs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="149" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a23c2644c16be8383a93b6a005f2eaa40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setDefect_idf_iax_detuning</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, double detuning)</argsstring>
        <name>DefectArray_setDefect_idf_iax_detuning</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>detuning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="152" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a2b8c0f7d319e660dedb3a26e8722acf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setNaddspins</definition>
        <argsstring>(DefectArray *dfa, BathArray *ba)</argsstring>
        <name>DefectArray_setNaddspins</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="157" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="157" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a9054b7960f6ab8ecc76d69a9722b685a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DefectArray_findDefectIndex</definition>
        <argsstring>(DefectArray *dfa, char *dfname)</argsstring>
        <name>DefectArray_findDefectIndex</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dfname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="169" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a9d1ffd714f6d004e81b7783cd0f781d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setPaxes_i</definition>
        <argsstring>(DefectArray *dfa, int ibs, int axis)</argsstring>
        <name>DefectArray_setPaxes_i</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ibs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="178" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a99dcb7dc57b5706c7a5764c703c43ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DefectArray_getNdefect</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_getNdefect</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="182" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a73e2b6a037540876244b726e3fa9cc1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* DefectArray_getDefect_idf_dfname</definition>
        <argsstring>(DefectArray *dfa, int idf)</argsstring>
        <name>DefectArray_getDefect_idf_dfname</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="186" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a0dd45f0baee4bdee08fb7415d990f186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DefectArray_getDefect_idf_apprx</definition>
        <argsstring>(DefectArray *dfa, int idf)</argsstring>
        <name>DefectArray_getDefect_idf_apprx</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="190" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a6b3addea84c2c80f4f7ba619c97f7014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DefectArray_getDefect_idf_naddspin</definition>
        <argsstring>(DefectArray *dfa, int idf)</argsstring>
        <name>DefectArray_getDefect_idf_naddspin</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="194" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ae3db7c03d4c1f7741f0e909c6db161ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* DefectArray_getDefect_idf_isp_types</definition>
        <argsstring>(DefectArray *dfa, int idf, int isp)</argsstring>
        <name>DefectArray_getDefect_idf_isp_types</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="198" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a700a1bcf079ce7c809eedba6aee86e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float DefectArray_getDefect_idf_isp_spins</definition>
        <argsstring>(DefectArray *dfa, int idf, int isp)</argsstring>
        <name>DefectArray_getDefect_idf_isp_spins</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="202" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a4367f6d21dd7e9aaa0c045e56372c37d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double DefectArray_getDefect_idf_isp_gyros</definition>
        <argsstring>(DefectArray *dfa, int idf, int isp)</argsstring>
        <name>DefectArray_getDefect_idf_isp_gyros</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="206" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a36134ae748439bd5393d05f8563170fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double DefectArray_getDefect_idf_isp_eqs</definition>
        <argsstring>(DefectArray *dfa, int idf, int isp)</argsstring>
        <name>DefectArray_getDefect_idf_isp_eqs</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="211" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a5b59c3eda7bbe60bca788968e6acc1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DefectArray_getDefect_idf_navaax</definition>
        <argsstring>(DefectArray *dfa, int idf)</argsstring>
        <name>DefectArray_getDefect_idf_navaax</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="215" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1acc17e7cc692affa60d8f0657d7c10857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* DefectArray_getDefect_idf_iax_isp_rxyz</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, int isp)</argsstring>
        <name>DefectArray_getDefect_idf_iax_isp_rxyz</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="219" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a8c6789ea6779f6a33936b2b44cb0e61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd DefectArray_getDefect_idf_iax_isp_hypf</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, int isp)</argsstring>
        <name>DefectArray_getDefect_idf_iax_isp_hypf</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="223" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1af12fb02836624f669e30abc9fca511c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd DefectArray_getDefect_idf_iax_isp_efg</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax, int isp)</argsstring>
        <name>DefectArray_getDefect_idf_iax_isp_efg</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="227" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ad797f4747bdd9da9db55ffac2a47a4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd DefectArray_getDefect_idf_iax_zfs</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax)</argsstring>
        <name>DefectArray_getDefect_idf_iax_zfs</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="231" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a2dea28641862ee32ba74000f620e4c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double DefectArray_getDefect_idf_iax_detuning</definition>
        <argsstring>(DefectArray *dfa, int idf, int iax)</argsstring>
        <name>DefectArray_getDefect_idf_iax_detuning</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="235" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a30164208870664d2aa4ecf3407245ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DefectArray_getNbathspin</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_getNbathspin</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="239" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a543d31330dc4e4f9f22a318a54bac71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DefectArray_getPaxes_i</definition>
        <argsstring>(DefectArray *dfa, int ibs)</argsstring>
        <name>DefectArray_getPaxes_i</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ibs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="243" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a772a0fb2689253810d970dd40b08feab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DefectArray_getNaddspins_i</definition>
        <argsstring>(DefectArray *dfa, int ibs)</argsstring>
        <name>DefectArray_getNaddspins_i</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ibs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="247" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a01df5d3c3fef2f9b173a49681a931299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBathSpin" kindref="compound">BathSpin</ref> *</type>
        <definition>BathSpin* DefectArray_getSubbath_i_isp</definition>
        <argsstring>(DefectArray *dfa, int ibs, int isp)</argsstring>
        <name>DefectArray_getSubbath_i_isp</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ibs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="252" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ad154028adc7e11112674b19eefd4ee99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_freeAll</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_freeAll</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="257" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="257" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a5d406904c0c33a69c999c59eeb488342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_freePaxes</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_freePaxes</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="286" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="286" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a501bdca25ce75b807315c91ad7d08402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_freeNaddspins</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_freeNaddspins</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="294" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="294" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1af1c1d3150f60f0ccfac4982daf48dd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_freeSubbath</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_freeSubbath</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="303" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="303" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1aabbb4d5951ee06d5080d938362e1f9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_allocPaxes</definition>
        <argsstring>(DefectArray *dfa, int nbathspin)</argsstring>
        <name>DefectArray_allocPaxes</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbathspin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="322" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1acd5198b4a91cb4d3288e3ef9d91b55ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_allocNaddspins</definition>
        <argsstring>(DefectArray *dfa, int nbathspin)</argsstring>
        <name>DefectArray_allocNaddspins</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbathspin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="327" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a02f7c16af447c48a85bd63a0114f3d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_allocSubbath</definition>
        <argsstring>(DefectArray *dfa, BathArray *ba, int nqubit)</argsstring>
        <name>DefectArray_allocSubbath</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="332" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="332" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ac61086b1cdc942187538f7dabb7d4a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_setSubbath</definition>
        <argsstring>(DefectArray *dfa, BathArray *ba, QubitArray *qa)</argsstring>
        <name>DefectArray_setSubbath</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>What we do here :<orderedlist>
<listitem><para>Set subbath name, xyz, spin, gyro, (eq,) hypf, mainspidx,</para></listitem><listitem><para>Set quad(zfs),hypf_sub (depending on principal axis)</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Set detuning = 0.0 (No detuning)</para></listitem><listitem><para>Set state = 0.0 and disorder = 0.0 (will be updated later)</para></listitem></orderedlist>
</para><para><ref refid="structBathSpin" kindref="compound">BathSpin</ref> information (Main spins - electron) </para>        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="349" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="349" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a8f08e0dc32156449f475af220706d094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateMainSpins_fromDefectArray</definition>
        <argsstring>(DefectArray *dfa, BathArray *ba)</argsstring>
        <name>updateMainSpins_fromDefectArray</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="441" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="441" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a3ea32b46b0daa88628f319f33e514873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateDisorder_main_sub</definition>
        <argsstring>(DefectArray *dfa, BathArray *ba)</argsstring>
        <name>updateDisorder_main_sub</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structBathArray" kindref="compound">BathArray</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="498" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="498" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a41abcd25dae2f2336b9d9d653f31c20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateDisorder_sub_sub</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>updateDisorder_sub_sub</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="594" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="594" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ac9715b5b9e43bee82092596c2e8ac05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateOverhaus_qubit_sub</definition>
        <argsstring>(DefectArray *dfa, QubitArray *qa)</argsstring>
        <name>updateOverhaus_qubit_sub</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type><ref refid="structQubitArray" kindref="compound">QubitArray</ref> *</type>
          <declname>qa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="681" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="681" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a506efd820c19c5095fdef50c5e35e3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportDefect_idf</definition>
        <argsstring>(DefectArray *dfa, int idf)</argsstring>
        <name>DefectArray_reportDefect_idf</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="725" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="725" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1abc581fcf88cfa9812e9613bfec4af3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportPaxes</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportPaxes</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="802" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="802" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a82ef176eb196703e1d427ff2f27eafd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportSubbath_states</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportSubbath_states</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="826" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="826" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a5a93fbad4d518932076c6fe0e757d6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportNaddspins</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportNaddspins</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="861" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="861" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a24c00f7ff21195646e64304a7ddd57db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportSubbath_i_props</definition>
        <argsstring>(DefectArray *dfa, int ibs, int isp)</argsstring>
        <name>DefectArray_reportSubbath_i_props</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ibs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="885" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="885" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1afd169753382554b2fcef9d5e0c71a7ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportSubbath_hypfs</definition>
        <argsstring>(DefectArray *dfa, int nqubit)</argsstring>
        <name>DefectArray_reportSubbath_hypfs</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nqubit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="896" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="896" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ae26a04ddf49de944f6058b152e5c01db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportSubbath_quads</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportSubbath_quads</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="932" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="932" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1af504499b24f5e825f3908c6144b501d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportSubbath_hypf_subs</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportSubbath_hypf_subs</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="964" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="964" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1a36daca4f61f14082d034289f37f823b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportSubbath_disorders</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportSubbath_disorders</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="997" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="997" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1aadedde4ee1d0202e97b81046b3fdc253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportSubbath_props</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportSubbath_props</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="1030" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="1030" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="defect_8cpp_1ab3b91ce949bd9c96def61b061a36816f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefectArray_reportAll</definition>
        <argsstring>(DefectArray *dfa)</argsstring>
        <name>DefectArray_reportAll</name>
        <param>
          <type><ref refid="structDefectArray" kindref="compound">DefectArray</ref> *</type>
          <declname>dfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/defect.cpp" line="1066" column="1" bodyfile="/home/huijin/git/CCEX/src/defect.cpp" bodystart="1066" bodyend="1068"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/defect.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/hamiltonian.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setPaxesRandom(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>BathArray_getBath_i_name(ba,ibs);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf<sp/>=<sp/>DefectArray_findDefectIndex(dfa,name);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idf<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>navaax<sp/>=<sp/>DefectArray_getDefect_idf_navaax(dfa,idf);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minpax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxpax<sp/>=<sp/>(navaax-1);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;paxes[ibs]<sp/>=<sp/>(rand()<sp/>%<sp/>(maxpax))+minpax;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;paxes[ibs]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setSubbathStatesRandom(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>BathArray_getBath_i_name(ba,ibs);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf<sp/>=<sp/>DefectArray_findDefectIndex(dfa,name);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>dfa-&gt;naddspins[ibs];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>DefectArray_getDefect_idf_isp_spins(dfa,idf,isp);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>(int)(2*S+1);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>rand()<sp/>%<sp/>dim;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>S<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;subbath[ibs][isp]-&gt;<ref refid="structBathSpin_1a6348f965fe820b03094f4c620ab7ffe0" kindref="member">state</ref><sp/>=<sp/>ms;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low<sp/>level<sp/>functions<sp/>------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>DefectArray_init(){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa<sp/>=<sp/>(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*)allocArray1d(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;ndefect<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;paxes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;naddspins<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;subbath<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setNdefect(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndefect){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;ndefect<sp/>=<sp/>ndefect;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_allocDefect(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect<sp/>=<sp/>(<ref refid="structDefect" kindref="compound">Defect</ref>**)allocArray2d(dfa-&gt;ndefect,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDefect" kindref="compound">Defect</ref>));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_allocDefect_idf(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>navaax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDefect" kindref="compound">Defect</ref>*<sp/>df<sp/>=<sp/>dfa-&gt;defect[idf];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;naddspin<sp/>=<sp/>naddspin;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;types<sp/>=<sp/>allocChar2d(naddspin,MAX_CHARARRAY_LENGTH);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;spins<sp/>=<sp/>allocFloat1d(naddspin);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;gyros<sp/>=<sp/>allocDouble1d(naddspin);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;eqs<sp/>=<sp/>allocDouble1d(naddspin);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;navaax<sp/>=<sp/>navaax;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;rxyzs<sp/>=<sp/>allocDouble3d(navaax,naddspin,3);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;hypf<sp/>=<sp/>allocMatrixXcd2d(navaax,naddspin);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;efg<sp/>=<sp/>allocMatrixXcd2d(navaax,naddspin);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;zfs<sp/>=<sp/>allocMatrixXcd1d(navaax);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>df-&gt;detuning<sp/>=<sp/>allocDouble1d(navaax);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_dfname(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dfname){</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(dfa-&gt;defect[idf]-&gt;dfname,dfname);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_apprx(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>apprx){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;apprx<sp/>=<sp/>apprx;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_naddspin(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;naddspin<sp/>=<sp/>naddspin;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_types(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>types){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dfa-&gt;defect[idf]-&gt;naddspin;<sp/>i++){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(dfa-&gt;defect[idf]-&gt;types[i],types[i]);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_spins(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>spins){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dfa-&gt;defect[idf]-&gt;naddspin;<sp/>i++){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;spins[i]<sp/>=<sp/>spins[i];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_gyros(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>gyros){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dfa-&gt;defect[idf]-&gt;naddspin;<sp/>i++){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;gyros[i]<sp/>=<sp/>gyros[i];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_eqs(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>eqs){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dfa-&gt;defect[idf]-&gt;naddspin;<sp/>i++){</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;eqs[i]<sp/>=<sp/>eqs[i];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_navaax(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>navaax){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;navaax<sp/>=<sp/>navaax;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_iax_isp_rxyz(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rxyzs){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;rxyzs[iax][isp][0]<sp/>=<sp/>rxyzs[0];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;rxyzs[iax][isp][1]<sp/>=<sp/>rxyzs[1];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;rxyzs[iax][isp][2]<sp/>=<sp/>rxyzs[2];</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_iax_isp_hypf(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp,<sp/>MatrixXcd<sp/>hypf){</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;hypf[iax][isp]<sp/>=<sp/>hypf;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_iax_isp_efg(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp,<sp/>MatrixXcd<sp/>efg){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;efg[iax][isp]<sp/>=<sp/>efg;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_iax_zfs(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/>MatrixXcd<sp/>zfs){</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;zfs[iax]<sp/>=<sp/>zfs;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setDefect_idf_iax_detuning(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detuning){</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;defect[idf]-&gt;detuning[iax]<sp/>=<sp/>detuning;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setNaddspins(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;BathArray_getNspin(ba);<sp/>i++){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dfname<sp/>=<sp/>BathArray_getBath_i_name(ba,i);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf<sp/>=<sp/>DefectArray_findDefectIndex(dfa,dfname);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idf<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;naddspins[i]<sp/>=<sp/>DefectArray_getDefect_idf_naddspin(dfa,idf);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;naddspins[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DefectArray_findDefectIndex(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dfname){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf=0;<sp/>idf&lt;dfa-&gt;ndefect;<sp/>idf++){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcasecmp(dfa-&gt;defect[idf]-&gt;dfname,dfname)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idf;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setPaxes_i(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;paxes[ibs]<sp/>=<sp/>axis;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DefectArray_getNdefect(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;ndefect;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>DefectArray_getDefect_idf_dfname(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf){</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;dfname;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DefectArray_getDefect_idf_apprx(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;apprx;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DefectArray_getDefect_idf_naddspin(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf){</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;naddspin;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>DefectArray_getDefect_idf_isp_types(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;types[isp];</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DefectArray_getDefect_idf_isp_spins(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;spins[isp];</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DefectArray_getDefect_idf_isp_gyros(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;gyros[isp];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DefectArray_getDefect_idf_isp_eqs(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;eqs[isp];</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DefectArray_getDefect_idf_navaax(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf){</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;navaax;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>DefectArray_getDefect_idf_iax_isp_rxyz(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;rxyzs[iax][isp];</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">MatrixXcd<sp/>DefectArray_getDefect_idf_iax_isp_hypf(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;hypf[iax][isp];</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">MatrixXcd<sp/>DefectArray_getDefect_idf_iax_isp_efg(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;efg[iax][isp];</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">MatrixXcd<sp/>DefectArray_getDefect_idf_iax_zfs(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax){</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;zfs[iax];</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DefectArray_getDefect_idf_iax_detuning(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;defect[idf]-&gt;detuning[iax];</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DefectArray_getNbathspin(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;nbathspin;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DefectArray_getPaxes_i(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;paxes[ibs];</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DefectArray_getNaddspins_i(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs){</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;naddspins[ibs];</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>DefectArray_getSubbath_i_isp(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dfa-&gt;subbath[ibs][isp];</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_freeAll(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dfa-&gt;defect<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf=0;<sp/>idf&lt;dfa-&gt;ndefect;<sp/>idf++){</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeChar2d(&amp;(dfa-&gt;defect[idf]-&gt;types),dfa-&gt;defect[idf]-&gt;naddspin);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeFloat1d(&amp;(dfa-&gt;defect[idf]-&gt;spins));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeDouble1d(&amp;(dfa-&gt;defect[idf]-&gt;gyros));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeDouble1d(&amp;(dfa-&gt;defect[idf]-&gt;eqs));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeDouble3d(&amp;(dfa-&gt;defect[idf]-&gt;rxyzs),dfa-&gt;defect[idf]-&gt;navaax,dfa-&gt;defect[idf]-&gt;naddspin);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeMatrixXcd2d(&amp;(dfa-&gt;defect[idf]-&gt;hypf),dfa-&gt;defect[idf]-&gt;navaax);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeMatrixXcd2d(&amp;(dfa-&gt;defect[idf]-&gt;efg),dfa-&gt;defect[idf]-&gt;navaax);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeMatrixXcd1d(&amp;(dfa-&gt;defect[idf]-&gt;zfs));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeDouble1d(&amp;(dfa-&gt;defect[idf]-&gt;detuning));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***)&amp;(dfa-&gt;defect),dfa-&gt;ndefect);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>DefectArray_freePaxes(dfa);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>DefectArray_freeSubbath(dfa);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>DefectArray_freeNaddspins(dfa);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>freeArray1d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;(dfa));</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_freePaxes(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dfa-&gt;paxes<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>freeInt1d(&amp;(dfa-&gt;paxes));</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_freeNaddspins(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dfa-&gt;naddspins<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>freeInt1d(&amp;(dfa-&gt;naddspins));</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_freeSubbath(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dfa-&gt;subbath<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dfa-&gt;nbathspin;<sp/>i++){</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;dfa-&gt;naddspins[i];<sp/>j++){</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeMatrixXcd1d(&amp;(dfa-&gt;subbath[i][j]-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref>));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(dfa-&gt;subbath[i][j]);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(dfa-&gt;subbath[i]);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>free(dfa-&gt;subbath);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;subbath<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_allocPaxes(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin){</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;paxes<sp/>=<sp/>allocInt1d(nbathspin);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;nbathspin<sp/>=<sp/>nbathspin;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_allocNaddspins(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin){</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;naddspins<sp/>=<sp/>allocInt1d(nbathspin);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;nbathspin<sp/>=<sp/>nbathspin;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_allocSubbath(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;nbathspin<sp/>=<sp/>nbathspin;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alloc<sp/>BathSpin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>dfa-&gt;subbath<sp/>=<sp/>(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>***)calloc(nbathspin,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>**));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nbathspin;<sp/>i++){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>dfa-&gt;naddspins[i];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;subbath[i]<sp/>=<sp/>(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>**)calloc(naddspin,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;naddspin;<sp/>j++){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;subbath[i][j]<sp/>=<sp/>(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>*)calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structBathSpin" kindref="compound">BathSpin</ref>));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfa-&gt;subbath[i][j]-&gt;<ref refid="structBathSpin_1aad4ead2e39f4ae27fab5701662e7ee27" kindref="member">hypf</ref><sp/>=<sp/>allocMatrixXcd1d(nqubit);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_setSubbath(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba,<sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bsname<sp/>=<sp/>BathArray_getBath_i_name(ba,ibs);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>bsxyz<sp/>=<sp/>BathArray_getBath_i_xyz(ba,ibs);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Spin<sp/>principal<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax<sp/>=<sp/>DefectArray_getPaxes_i(dfa,ibs);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defect<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf<sp/>=<sp/>DefectArray_findDefectIndex(dfa,bsname);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>BathSpin<sp/>address<sp/>(sub)</highlight></codeline>
<codeline lineno="377"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs,isp);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin<sp/>:<sp/>Name</highlight></codeline>
<codeline lineno="381"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setName_withType(subspin,bsname,DefectArray_getDefect_idf_isp_types(dfa,idf,isp));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin<sp/>:<sp/>Spin<sp/>properties</highlight></codeline>
<codeline lineno="386"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setSpin(subspin,DefectArray_getDefect_idf_isp_spins(dfa,idf,isp));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setGyro(subspin,DefectArray_getDefect_idf_isp_gyros(dfa,idf,isp));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin_setEq(subspin,DefectArray_getDefect_idf_isp_eqs(dfa,idf,isp));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin<sp/>:<sp/>Spin<sp/>position</highlight></codeline>
<codeline lineno="393"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setXyz_fromRxyz(subspin,bsxyz,DefectArray_getDefect_idf_iax_isp_rxyz(dfa,idf,iax,isp));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin<sp/>:<sp/>Spin<sp/>state<sp/>&amp;<sp/>Disorder<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(This<sp/>will<sp/>be<sp/>changed<sp/>later)</highlight></codeline>
<codeline lineno="399"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setState(subspin,0.0);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setDisorder(subspin,0.0);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin<sp/>:<sp/>Detuning<sp/>(No<sp/>detuning)</highlight></codeline>
<codeline lineno="405"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setDetuning(subspin,0.0);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin<sp/>:<sp/>Hyperfine<sp/>(as<sp/>much<sp/>as<sp/>qubit<sp/>#)</highlight></codeline>
<codeline lineno="410"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hyperfine<sp/>tensor<sp/>:<sp/>Qubit-Bath</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz<sp/>=<sp/>BathSpin_getXyz(subspin);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro<sp/>=<sp/>BathSpin_getGyro(subspin);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq=0;<sp/>iq&lt;nqubit;<sp/>iq++){</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qgyro<sp/>=<sp/>QubitArray_getQubit_i_gyro(qa,iq);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>qxyz<sp/>=<sp/>QubitArray_getQubit_i_xyz(qa,iq);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setHypf_i(subspin,<sp/>calPointDipoleTensor(qxyz,<sp/>xyz,<sp/>qgyro,<sp/>gyro),iq);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BathSpin<sp/>:<sp/>Quadrupole<sp/>&amp;<sp/>Hyperfine_sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>tensor<sp/>changes<sp/>depending<sp/>on<sp/>principal<sp/>axis(pax)</highlight></codeline>
<codeline lineno="424"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin<sp/>=<sp/>BathSpin_getSpin(subspin);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>efg<sp/>=<sp/>DefectArray_getDefect_idf_iax_isp_efg(dfa,idf,iax,isp);<sp/></highlight><highlight class="comment">//<sp/>Hartree/Bohr^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eq<sp/>=<sp/>DefectArray_getDefect_idf_isp_eqs(dfa,idf,isp);<sp/></highlight><highlight class="comment">//<sp/>10e-30<sp/>m^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setQuad_fromEFG(subspin,efg,eq,spin);<sp/></highlight><highlight class="comment">//<sp/>radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hyperfine<sp/>sub<sp/>tensor<sp/>:<sp/>MainDefect<sp/>-<sp/>BathSpin<sp/>(inter<sp/>bath)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setHypfSub(subspin,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MHZ_TO_RADKHZ(DefectArray_getDefect_idf_iax_isp_hypf(dfa,idf,iax,isp)));<sp/></highlight><highlight class="comment">//radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maindefect<sp/>index<sp/>:<sp/>MainDefect<sp/>-<sp/>BathSpin<sp/>(inter<sp/>bath)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setMainspidx(subspin,ibs);<sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateMainSpins_fromDefectArray(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro_elec<sp/>=<sp/>GAMMA_ELECTRON;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>BathArray_getBath_i_name(ba,ibs);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin<sp/>=<sp/>BathArray_getBath_i_spin(ba,ibs);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro<sp/>=<sp/>BathArray_getBath_i_gyro(ba,ibs);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>quad<sp/>=<sp/>BathArray_getBath_i_quad(ba,ibs);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf<sp/>=<sp/>DefectArray_findDefectIndex(dfa,name);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iax<sp/>=<sp/>DefectArray_getPaxes_i(dfa,ibs);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>mainspin<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mainspidx<sp/>=<sp/>ibs;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_mainspidx(ba,mainspidx,ibs);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>quad(zfs)<sp/>depending<sp/>on<sp/>principal<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>zfs<sp/>=<sp/>MatrixXcd::Zero(3,3);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>zfs<sp/>tensor<sp/>if<sp/>there<sp/>is<sp/>defect<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idf<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfs<sp/>=<sp/>DefectArray_getDefect_idf_iax_zfs(dfa,idf,iax);<sp/></highlight><highlight class="comment">//MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((abs(gyro<sp/>-<sp/>gyro_elec)<sp/>&lt;<sp/>1.0)<sp/>&amp;&amp;<sp/>(quad.isZero(FLT_EPSILON))<sp/>&amp;&amp;<sp/>(spin<sp/>-<sp/>0.5<sp/>&gt;<sp/>FLT_EPSILON)<sp/>){</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>main<sp/>spin<sp/>is<sp/>electron<sp/>spin<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>main<sp/>spin<sp/>doesn&apos;t<sp/>hvae<sp/>quadrupole<sp/>tensor<sp/>then,<sp/>set<sp/>the<sp/>zfs<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_quad(ba,MHZ_TO_RADKHZ(zfs),ibs);<sp/></highlight><highlight class="comment">//radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zfs.isZero(FLT_EPSILON)){</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>main<sp/>spin<sp/>is<sp/>not<sp/>an<sp/>electron<sp/>spin<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>quadrupole<sp/>already<sp/>exist<sp/>and<sp/>zfs<sp/>is<sp/>given,<sp/>then<sp/>err</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error<sp/>(updateMainSpins_fromDefectArray)<sp/>:<sp/>the<sp/>defect&apos;s<sp/>zfs<sp/>tensor<sp/>cannot<sp/>be<sp/>set<sp/>to<sp/>BathArray<sp/>quad.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error<sp/>(updateMainSpins_fromDefectArray)<sp/>:<sp/>Check<sp/>if<sp/>the<sp/>spin<sp/>is<sp/>electron<sp/>spin<sp/>and<sp/>quadrupole<sp/>is<sp/>given<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>detuning<sp/>depending<sp/>on<sp/>principal<sp/>axis<sp/>(add)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_detuning<sp/>=<sp/>BathArray_getBath_i_detuning(ba,ibs);<sp/></highlight><highlight class="comment">//radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>additional_detuning<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>detuning<sp/>if<sp/>there<sp/>is<sp/>defect<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idf<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_detuning<sp/>=<sp/>DefectArray_getDefect_idf_iax_detuning(dfa,idf,iax);<sp/></highlight><highlight class="comment">//MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_detuning<sp/>=<sp/>MHZ_TO_RADKHZ(additional_detuning);<sp/></highlight><highlight class="comment">//radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathArray_setBath_i_detuning(ba,(current_detuning+additional_detuning),ibs);<sp/></highlight><highlight class="comment">//radkHz</highlight></codeline>
<codeline lineno="495"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateDisorder_main_sub(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structBathArray" kindref="compound">BathArray</ref>*<sp/>ba){</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Update<sp/>disorder<sp/>of<sp/>BathArray<sp/>and<sp/>DefectArray<sp/>(from<sp/>defect<sp/>information)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;The<sp/>bathspin<sp/>is<sp/>actually<sp/>defect,<sp/>so<sp/>the<sp/>other<sp/>spins<sp/>can<sp/>be<sp/>exist<sp/>near<sp/>the<sp/>defect.\n\</highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>We<sp/>call<sp/>them<sp/>as<sp/>subspins.<sp/>And<sp/>we<sp/>update<sp/>the<sp/>disorder<sp/>originated<sp/>from<sp/>the<sp/>subspins\n\n\</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>mainspin<sp/>-<sp/>subspin<sp/>of<sp/>this<sp/>mainspin<sp/><sp/>:<sp/>hypf_sub<sp/>of<sp/>subspin\n\</highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>mainspin<sp/>-<sp/>subspin<sp/>of<sp/>other<sp/>mainspin<sp/>:<sp/>point-dipole<sp/>approximation<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>BathArray_getNspin(ba);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>mainspin<sp/>=<sp/>BathArray_getBath_i(ba,ibs);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>disorder<sp/>of<sp/>bathspin(main)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disorder<sp/>types<sp/>of<sp/>main<sp/>spins:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>-<sp/>other<sp/>main<sp/>(already<sp/>calculated)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>-<sp/>subspin<sp/>of<sp/>the<sp/>main<sp/>(hypf_sub)<sp/>...(m-ms)<sp/>(Calculating<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>-<sp/>subspin<sp/>of<sp/>the<sp/>other<sp/>main<sp/>(point-dipole<sp/>approximation)<sp/>...(m-os)<sp/>(Calculating<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>main_current_disorder<sp/>=<sp/>BathSpin_getDisorder(mainspin);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>main_additional_disorder<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>spin<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>main_xyz<sp/>=<sp/>BathSpin_getXyz(mainspin);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>main_gyro<sp/>=<sp/>BathSpin_getGyro(mainspin);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>main_ms<sp/>=<sp/>BathSpin_getState(mainspin);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Additional<sp/>disorder<sp/>due<sp/>to<sp/>sub<sp/>spins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs_sub<sp/>=<sp/>0;<sp/>ibs_sub&lt;nbathspin;<sp/>ibs_sub++){</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs_sub);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs_sub,isp);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>disorder<sp/>of<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disorder<sp/>types<sp/>of<sp/>sub<sp/>spins:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>mainspin<sp/>of<sp/>the<sp/>subspin<sp/>(hypf_sub)<sp/>...(s-mm)<sp/>(Calculating<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>mainspin<sp/>of<sp/>the<sp/>other<sp/>subspin<sp/>(point-dipole<sp/>approximation)<sp/>...(s-om)<sp/>(Calculating<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>other<sp/>subspin<sp/>of<sp/>sharing<sp/>the<sp/>same<sp/>mainspn<sp/>(point-dipole<sp/>approximation)<sp/>...(s-ms)<sp/>(will<sp/>be<sp/>calculated<sp/>in<sp/>other<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>other<sp/>subspin<sp/>of<sp/>other<sp/>main<sp/>spin<sp/>(point-dipole<sp/>approximation)<sp/>...(s-os)<sp/>(will<sp/>be<sp/>calculated<sp/>in<sp/>other<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub_current_disorder<sp/>=<sp/>BathSpin_getDisorder(subspin);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub_additional_disorder<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sub-spin<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sub_xyz<sp/>=<sp/>BathSpin_getXyz(subspin);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub_gyro<sp/>=<sp/>BathSpin_getGyro(subspin);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sub_ms<sp/>=<sp/>BathSpin_getState(subspin);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>disorders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibs<sp/>==<sp/>ibs_sub){</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>main-sub,<sp/>additional<sp/>disorder<sp/>=<sp/>hypf_sub(2,2)*ms_sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>main_sub_int<sp/><sp/>=<sp/>BathSpin_getHypfSub(subspin);<sp/></highlight><highlight class="comment">//<sp/>radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main_additional_disorder<sp/>+=<sp/>main_sub_int(2,2).real()*sub_ms;<sp/></highlight><highlight class="comment">//<sp/>...(m-ms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_additional_disorder<sp/>+=<sp/>main_sub_int(2,2).real()*main_ms;<sp/></highlight><highlight class="comment">//<sp/>...(s-mm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else,<sp/>additional<sp/>disorder<sp/>=<sp/>Point-dipole<sp/>tensor<sp/>*<sp/>ms_sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>main_sub_int<sp/><sp/>=<sp/>calPointDipoleTensor(main_xyz,<sp/>sub_xyz,<sp/>main_gyro,<sp/>sub_gyro);<sp/></highlight><highlight class="comment">//<sp/>radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main_additional_disorder<sp/>+=<sp/>main_sub_int(2,2).real()*sub_ms;<sp/></highlight><highlight class="comment">//<sp/>...(m-os)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_additional_disorder<sp/>+=<sp/>main_sub_int(2,2).real()*main_ms;<sp/></highlight><highlight class="comment">//<sp/>...(s-om)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setDisorder(subspin,sub_current_disorder<sp/>+<sp/>sub_additional_disorder);<sp/></highlight><highlight class="comment">//radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[500];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;SubSpin[%d][%d].disorder<sp/>=<sp/>%+7.2g(Current)<sp/>%+7.2g(Additional)<sp/>=<sp/>%+7.2g<sp/>(radkHz)&quot;</highlight><highlight class="normal">\</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,ibs_sub,isp,sub_current_disorder,sub_additional_disorder,BathSpin_getDisorder(subspin));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage(message);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>main<sp/>spin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setDisorder(mainspin,main_current_disorder+main_additional_disorder);<sp/></highlight><highlight class="comment">//radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[500];</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;MainSpin[%d].disorder<sp/>=<sp/>%+7.2g(Current)<sp/>%+7.2g(Additional)<sp/>=<sp/>%+7.2g<sp/>(radkHz)&quot;</highlight><highlight class="normal">\</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,ibs,main_current_disorder,main_additional_disorder,BathSpin_getDisorder(mainspin));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage(message);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateDisorder_sub_sub(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>disorder<sp/>of<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disorder<sp/>types<sp/>of<sp/>sub<sp/>spins:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>mainspin<sp/>of<sp/>the<sp/>subspin<sp/>(hypf_sub)<sp/>...(s-mm)<sp/>(will<sp/>be<sp/>calculated<sp/>in<sp/>other<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>mainspin<sp/>of<sp/>the<sp/>other<sp/>subspin<sp/>(point-dipole<sp/>approximation)<sp/>...(s-om)<sp/>(will<sp/>be<sp/>calculated<sp/>in<sp/>other<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>other<sp/>subspin<sp/>of<sp/>sharing<sp/>the<sp/>same<sp/>mainspn<sp/>(point-dipole<sp/>approximation)<sp/>...(s-ms)<sp/>(Calculating<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subspin<sp/>-<sp/>other<sp/>subspin<sp/>of<sp/>other<sp/>main<sp/>spin<sp/>(point-dipole<sp/>approximation)<sp/>...(s-os)<sp/>(Calculating<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Update<sp/>disorder<sp/>of<sp/>Subbath<sp/>in<sp/>DefectArray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;The<sp/>bathspin<sp/>is<sp/>actually<sp/>defect,<sp/>so<sp/>the<sp/>other<sp/>spins<sp/>can<sp/>be<sp/>exist<sp/>near<sp/>the<sp/>defect.\n\</highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>We<sp/>call<sp/>them<sp/>as<sp/>subspins.<sp/>And<sp/>we<sp/>update<sp/>the<sp/>disorder<sp/>originated<sp/>from<sp/>the<sp/>subspins<sp/>\n\</highlight></codeline>
<codeline lineno="608"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>initializeing<sp/>it<sp/>as<sp/>subbath.disorder<sp/>=<sp/>0.0\n\n\</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>subspin<sp/>-<sp/>other<sp/>subspin<sp/>of<sp/>sharing<sp/>the<sp/>same<sp/>mainspn<sp/>:<sp/>point-dipole<sp/>approximation\n\</highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>subspin<sp/>-<sp/>other<sp/>subspin<sp/>of<sp/>other<sp/>main<sp/>spin<sp/>:<sp/>point-dipole<sp/>approximation:<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs_current=0;<sp/>ibs_current&lt;nbathspin;<sp/>ibs_current++){</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin_current<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs_current);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp_current=0;<sp/>isp_current&lt;naddspin_current;<sp/>isp_current++){</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin_current<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs_current,isp_current);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(BathSpin_getDisorder(subspin_current)<sp/>&gt;<sp/>FLT_EPSILON){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>If<sp/>subbath<sp/>already<sp/>has<sp/>disorder<sp/>value<sp/>then,<sp/>err</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fprintf(stderr,&quot;Error<sp/>(updateDisorder_sub_sub)<sp/>:<sp/>Subbath<sp/>has<sp/>already<sp/>haven<sp/>the<sp/>disorder<sp/>value<sp/>(%d)\n&quot;,BathSpin_getDisorder(subspin_current));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fprintf(stderr,&quot;Error<sp/>(updateDisorder_sub_sub)<sp/>:<sp/>Because<sp/>we<sp/>set<sp/>the<sp/>subbath<sp/>disorder<sp/>as<sp/>0.0<sp/>here.<sp/>It<sp/>gives<sp/>error\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub_current_disorder<sp/>=<sp/>0.0;<sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub_current_additional_disorder<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>Spin<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sub_current_xyz<sp/>=<sp/>BathSpin_getXyz(subspin_current);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub_current_gyro<sp/>=<sp/>BathSpin_getGyro(subspin_current);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs_walk=0;<sp/>ibs_walk&lt;nbathspin;<sp/>ibs_walk++){</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin_walk<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs_walk);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp_walk=0;<sp/>isp_walk&lt;naddspin_walk;<sp/>isp_walk++){</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walk<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin_walk<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs_walk,isp_walk);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibs_current<sp/>==<sp/>ibs_walk<sp/>&amp;&amp;<sp/>isp_current<sp/>==<sp/>isp_walk){</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>additional<sp/>disorder</highlight></codeline>
<codeline lineno="650"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walk<sp/>Spin<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sub_walk_xyz<sp/>=<sp/>BathSpin_getXyz(subspin_walk);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub_walk_gyro<sp/>=<sp/>BathSpin_getGyro(subspin_walk);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sub_walk_ms<sp/>=<sp/>BathSpin_getState(subspin_walk);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Point-dipole<sp/>approximation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tensor<sp/>=<sp/>calPointDipoleTensor(sub_current_xyz,<sp/>sub_walk_xyz,<sp/>sub_current_gyro,<sp/>sub_walk_gyro);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_current_additional_disorder<sp/>+=<sp/>tensor(2,2).real()*sub_walk_ms;<sp/></highlight><highlight class="comment">//<sp/>...(s-os),<sp/>(s-ms)</highlight></codeline>
<codeline lineno="658"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BathSpin_setDisorder(subspin_current,\</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_current_disorder<sp/>+<sp/>sub_current_additional_disorder);<sp/></highlight><highlight class="comment">//radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[500];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;SubSpin[%d][%d].disorder<sp/>=<sp/>%+7.2g(Current)<sp/>%+7.2g(Additional)<sp/>=<sp/>%+7.2g<sp/>(radkHz)&quot;</highlight><highlight class="normal">\</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,ibs_current,isp_current,sub_current_disorder,sub_current_additional_disorder,BathSpin_getDisorder(subspin_current));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage(message);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateOverhaus_qubit_sub(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/><ref refid="structQubitArray" kindref="compound">QubitArray</ref>*<sp/>qa){</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;Update<sp/>the<sp/>overhauser<sp/>field<sp/>of<sp/>QubitArray<sp/>from<sp/>the<sp/>subspins<sp/>of<sp/>DefectArray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>qubit<sp/>-<sp/>subspin<sp/>:<sp/>hypf<sp/>of<sp/>subspin<sp/>(point-dipole<sp/>approximation)<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit<sp/>=<sp/>QubitArray_getNqubit(qa);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq=0;<sp/>iq&lt;nqubit;<sp/>iq++){</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_qubit_overhaus<sp/>=<sp/>QubitArray_getQubit_i_overhaus(qa,iq);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>additional_qubit_overhaus<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs,isp);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>hypf<sp/>=<sp/>BathSpin_getHypf_i(subspin,iq);<sp/></highlight><highlight class="comment">//<sp/>radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>BathSpin_getState(subspin);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overhauser<sp/>of<sp/>qubit-subspin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overhaus<sp/>=<sp/>hypf(2,2).real()*state;<sp/></highlight><highlight class="comment">//<sp/>radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_qubit_overhaus<sp/>+=<sp/>overhaus;<sp/></highlight><highlight class="comment">//<sp/>radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>qubit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QubitArray_setQubit_i_overhaus(qa,current_qubit_overhaus+additional_qubit_overhaus,iq);<sp/></highlight><highlight class="comment">//<sp/>radkHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&amp;&amp;<sp/>rank==0){</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[500];</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;Qubit[%d].overhaus<sp/>=<sp/>%+7.2g(Current)<sp/>%+7.2g(Additional)<sp/>=<sp/>%+7.2g<sp/>(radkHz)&quot;</highlight><highlight class="normal">\</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,iq,current_qubit_overhaus,additional_qubit_overhaus,QubitArray_getQubit_i_overhaus(qa,iq));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage(message);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportDefect_idf(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idf){</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>subtitle[100];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(subtitle,</highlight><highlight class="stringliteral">&quot;DefectArray-&gt;defect[%d]&quot;</highlight><highlight class="normal">,idf);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(subtitle);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementChar(</highlight><highlight class="stringliteral">&quot;dfname&quot;</highlight><highlight class="normal">,DefectArray_getDefect_idf_dfname(dfa,idf));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementBool(</highlight><highlight class="stringliteral">&quot;apprx&quot;</highlight><highlight class="normal">,DefectArray_getDefect_idf_apprx(dfa,idf));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;naddspin&quot;</highlight><highlight class="normal">,DefectArray_getDefect_idf_naddspin(dfa,idf));</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>%-18s:<sp/><sp/><sp/>%-d<sp/>-<sp/>1<sp/>#<sp/>(<sp/>possible<sp/>axis<sp/>:<sp/>1<sp/>~<sp/>%d<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;navaax&quot;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>DefectArray_getDefect_idf_navaax(dfa,idf),<sp/>DefectArray_getDefect_idf_navaax(dfa,idf)-1);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementChar2d(</highlight><highlight class="stringliteral">&quot;types&quot;</highlight><highlight class="normal">,dfa-&gt;defect[idf]-&gt;types,DefectArray_getDefect_idf_naddspin(dfa,idf));</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementFloat1d(</highlight><highlight class="stringliteral">&quot;spins&quot;</highlight><highlight class="normal">,dfa-&gt;defect[idf]-&gt;spins,DefectArray_getDefect_idf_naddspin(dfa,idf));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementDouble1d(</highlight><highlight class="stringliteral">&quot;gyros<sp/>(radkHz/G)&quot;</highlight><highlight class="normal">,dfa-&gt;defect[idf]-&gt;gyros,DefectArray_getDefect_idf_naddspin(dfa,idf));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementDouble1d(</highlight><highlight class="stringliteral">&quot;eqs<sp/>(10e-30<sp/>m^2)&quot;</highlight><highlight class="normal">,dfa-&gt;defect[idf]-&gt;eqs,DefectArray_getDefect_idf_naddspin(dfa,idf));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>________________________________________________________________\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Relative<sp/>distance<sp/>(A)<sp/>:<sp/>rxyz[iax][isp]<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>iax<sp/>:<sp/>principal<sp/>axis<sp/>index<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>isp<sp/>:<sp/>additional<sp/>spin<sp/>index<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;DefectArray_getDefect_idf_navaax(dfa,idf);<sp/>i++){</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;DefectArray_getDefect_idf_naddspin(dfa,idf);<sp/>j++){</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;rxyz[%d][%d]&quot;</highlight><highlight class="normal">,i,j);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementDouble1d(message,DefectArray_getDefect_idf_iax_isp_rxyz(dfa,idf,i,j),3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>________________________________________________________________\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Hyperfine<sp/>tensor<sp/>(MHz)<sp/>:<sp/>hypf[iax][isp]<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;DefectArray_getDefect_idf_navaax(dfa,idf);<sp/>i++){</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;DefectArray_getDefect_idf_naddspin(dfa,idf);<sp/>j++){</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tensor;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;hypf[%d][%d]&quot;</highlight><highlight class="normal">,i,j);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor<sp/>=<sp/>DefectArray_getDefect_idf_iax_isp_hypf(dfa,idf,i,j);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor.rows()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(message,tensor);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>________________________________________________________________\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Electric<sp/>field<sp/>gradient<sp/>(Hartree/Bohr_radius^2)<sp/>:<sp/>efg[iax][isp]<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;DefectArray_getDefect_idf_navaax(dfa,idf);<sp/>i++){</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;DefectArray_getDefect_idf_naddspin(dfa,idf);<sp/>j++){</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tensor;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;efg[%d][%d]&quot;</highlight><highlight class="normal">,i,j);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor<sp/>=<sp/>DefectArray_getDefect_idf_iax_isp_efg(dfa,idf,i,j);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor.rows()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(message,tensor);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>________________________________________________________________\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Zero-field<sp/>splitting<sp/>tensor<sp/>(MHz)<sp/>:<sp/>zfs[iax]<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;DefectArray_getDefect_idf_navaax(dfa,idf);<sp/>i++){</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tensor;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;zfs[%d]&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor<sp/>=<sp/>DefectArray_getDefect_idf_iax_zfs(dfa,idf,i);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor.rows()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(message,tensor);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>________________________________________________________________\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Detuning<sp/>(MHz)<sp/>:<sp/>detuning[iax]<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;DefectArray_getDefect_idf_navaax(dfa,idf);<sp/>i++){</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;detuning[%d]&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementDouble(message,DefectArray_getDefect_idf_iax_detuning(dfa,idf,i));</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>________________________________________________________________\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportPaxes(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;DefectArray-&gt;paxes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nbathspin<sp/>(#)&quot;</highlight><highlight class="normal">,nbathspin);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nbathspin;<sp/>i++){</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;paxes[%d]&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementInt(message,DefectArray_getPaxes_i(dfa,i));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportSubbath_states(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printSubTitle(&quot;DefectArray-&gt;subbath-&gt;state&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nbathspin<sp/>(#)&quot;</highlight><highlight class="normal">,nbathspin);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nbathspin;<sp/>i++){</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,i);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>states<sp/>=<sp/>allocFloat1d(naddspin);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;naddspin;<sp/>j++){</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,i,j);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states[j]<sp/>=<sp/>BathSpin_getState(subspin);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;subbath[%d].state<sp/>&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementFloat1d(message,states,naddspin);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeFloat1d(&amp;states);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportNaddspins(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;DefectArray-&gt;naddspins&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nbathspin<sp/>(#)&quot;</highlight><highlight class="normal">,nbathspin);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nbathspin;<sp/>i++){</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;naddspins[%d]&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementInt(message,DefectArray_getNaddspins_i(dfa,i));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportSubbath_i_props(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp){</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs,isp);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>BathSpin_getName(subspin);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spin<sp/>=<sp/>BathSpin_getSpin(subspin);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gyro<sp/>=<sp/>BathSpin_getGyro(subspin);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xyz<sp/>=<sp/>BathSpin_getXyz(subspin);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mainspidx<sp/>=<sp/>BathSpin_getMainspidx(subspin);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>SubBath[%3d][%3d]<sp/>%7s<sp/>%7.3lf<sp/>%7.3lf<sp/>%7.3lf<sp/><sp/><sp/>(<sp/>S<sp/>=<sp/>%2.1f,<sp/>gyro<sp/>=<sp/>%7.3lf<sp/>,<sp/>mainspidx<sp/>=<sp/>%d<sp/>)<sp/>\n&quot;</highlight><highlight class="normal">\</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>,ibs,isp,name,xyz[0],xyz[1],xyz[2],spin,gyro,<sp/>mainspidx);</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportSubbath_hypfs(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nqubit){</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;SubBath<sp/>Hyperfine<sp/>tensors<sp/>(Qubit-SubBath)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;SubBath[ibs][isp].hypf[iq]<sp/>(radkHz)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>ibs<sp/>:<sp/>BathSpin<sp/>index<sp/>(main<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>isp<sp/>:<sp/>SubSpin<sp/>index<sp/>(sub<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>iq<sp/><sp/>:<sp/>Qubit<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(ibs&lt;3<sp/>||<sp/>ibs&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs,isp);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq=0;<sp/>iq&lt;nqubit;<sp/>iq++){</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>hypf<sp/>=<sp/>BathSpin_getHypf_i(subspin,iq);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;SubBath[%d][%d].hypf[%d]&quot;</highlight><highlight class="normal">,ibs,isp,iq);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(message,hypf);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>ibs==3){</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportSubbath_quads(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;SubBath<sp/>Quadrupole<sp/>tensors<sp/>(Depending<sp/>on<sp/>principal<sp/>axis)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;SubBath[ibs][isp].quad<sp/>(radkHz)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>ibs<sp/>:<sp/>BathSpin<sp/>index<sp/>(main<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>isp<sp/>:<sp/>SubSpin<sp/>index<sp/>(sub<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(ibs&lt;3<sp/>||<sp/>ibs&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs,isp);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>quad<sp/>=<sp/>BathSpin_getQuad(subspin);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;SubBath[%d][%d].quad&quot;</highlight><highlight class="normal">,ibs,isp);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(message,quad);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>ibs==3){</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportSubbath_hypf_subs(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;SubBath<sp/>Hyperfine<sp/>tensors<sp/>(MainDefect-SubBath)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;SubBath[ibs][isp].hypf_sub<sp/>(radkHz)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>ibs<sp/>:<sp/>BathSpin<sp/>index<sp/>(main<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>isp<sp/>:<sp/>SubSpin<sp/>index<sp/>(sub<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(ibs&lt;3<sp/>||<sp/>ibs&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs,isp);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>hypf_sub<sp/>=<sp/>BathSpin_getHypfSub(subspin);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;SubBath[%d][%d].hypf_sub&quot;</highlight><highlight class="normal">,ibs,isp);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInlineMatrixXcd(message,hypf_sub);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>ibs==3){</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportSubbath_disorders(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;SubBath<sp/>Disorders&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;SubBath[ibs][isp].disorder<sp/>(radkHz)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>ibs<sp/>:<sp/>BathSpin<sp/>index<sp/>(main<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>printMessage(</highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>isp<sp/>:<sp/>SubSpin<sp/>index<sp/>(sub<sp/>spin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibs=0;<sp/>ibs&lt;nbathspin;<sp/>ibs++){</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,ibs);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(ibs&lt;3<sp/>||<sp/>ibs&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isp=0;<sp/>isp&lt;naddspin;<sp/>isp++){</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBathSpin" kindref="compound">BathSpin</ref>*<sp/>subspin<sp/>=<sp/>DefectArray_getSubbath_i_isp(dfa,ibs,isp);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disorder<sp/>=<sp/>BathSpin_getDisorder(subspin);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[100];</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,</highlight><highlight class="stringliteral">&quot;SubBath[%d][%d].disorder&quot;</highlight><highlight class="normal">,ibs,isp);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printStructElementDouble(message,disorder);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>ibs==3){</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportSubbath_props(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>printSubTitle(</highlight><highlight class="stringliteral">&quot;DefectArray-&gt;subbath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbathspin<sp/>=<sp/>DefectArray_getNbathspin(dfa);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>printStructElementInt(</highlight><highlight class="stringliteral">&quot;nbathspin<sp/>(#)&quot;</highlight><highlight class="normal">,nbathspin);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isExist<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nbathspin;<sp/>i++){</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddspin<sp/>=<sp/>DefectArray_getNaddspins_i(dfa,i);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>||<sp/>(i&lt;3<sp/>||<sp/>i&gt;nbathspin-3)){<sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;naddspin;<sp/>j++){</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefectArray_reportSubbath_i_props(dfa,i,j);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isExist<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!verbosity<sp/>&amp;&amp;<sp/>i==3){</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isExist){</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>No<sp/>sub-bath<sp/><sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>printLine();</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefectArray_reportAll(<ref refid="structDefectArray" kindref="compound">DefectArray</ref>*<sp/>dfa){</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/huijin/git/CCEX/src/defect.cpp"/>
  </compounddef>
</doxygen>
