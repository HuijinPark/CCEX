<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="hamiltonian_8cpp" kind="file">
    <compoundname>hamiltonian.cpp</compoundname>
    <includes refid="hamiltonian_8h" local="yes">../include/hamiltonian.h</includes>
    <includes refid="memory_8h" local="yes">../include/memory.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="295">
        <label>../include/hamiltonian.h</label>
        <link refid="hamiltonian_8h_source"/>
        <childnode refid="296" relation="include">
        </childnode>
      </node>
      <node id="297">
        <label>Eigen/Dense</label>
      </node>
      <node id="300">
        <label>unistd.h</label>
      </node>
      <node id="298">
        <label>iostream</label>
      </node>
      <node id="301">
        <label>../include/memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="296" relation="include">
        </childnode>
      </node>
      <node id="299">
        <label>mpi.h</label>
      </node>
      <node id="296">
        <label>utilities.h</label>
        <link refid="utilities_8h_source"/>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
      </node>
      <node id="294">
        <label>/home/huijin/git/CCEX/src/hamiltonian.cpp</label>
        <link refid="hamiltonian.cpp"/>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="hamiltonian_8cpp_1af2966d56e841b9769305aa1b9194aca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd ZeemanInt</definition>
        <argsstring>(double gamma, float *B0, MatrixXcd *Pmat, int m)</argsstring>
        <name>ZeemanInt</name>
        <param>
          <type>double</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>B0</declname>
        </param>
        <param>
          <type>MatrixXcd *</type>
          <declname>Pmat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>point-dipole interaction tensor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">xyz1</parametername>
</parameternamelist>
<parameterdescription>
<para>position of spin 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xyz2</parametername>
</parameternamelist>
<parameterdescription>
<para>position of spin 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gamma1</parametername>
</parameternamelist>
<parameterdescription>
<para>gyromagnetic ratio of spin 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gamma2</parametername>
</parameternamelist>
<parameterdescription>
<para>gyromagnetic ratio of spin 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>point-dipole interaction tensor</para></simplesect>
The point-dipole interaction tensor is given by Hdd = (1/r^3) * (mu_0 / (4 * pi * hbar) ) * (gamma1 * gamma2 * mu_B^2) * (S1 dot S2 - 3(S1 dot r)(S2 dot r)/r^2 unit : (1/r^3) * (mu_0 / (4 * pi * hbar) ) * (gamma1 * gamma2 * mu_B^2) 1/r^3 : A^-3 mu_0 : N/A^2 hbar : J*s gamma1 : radkHz/G -&gt; radkHz/T gamma2 : radkHz/G -&gt; radkHz/T mu_B : J/T </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="25" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="25" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a5f80be9c97fa5d0acbbf8e46ecbc9c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd DetuningInt</definition>
        <argsstring>(double detun, MatrixXcd *Pmat, int m)</argsstring>
        <name>DetuningInt</name>
        <param>
          <type>double</type>
          <declname>detun</declname>
        </param>
        <param>
          <type>MatrixXcd *</type>
          <declname>Pmat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="36" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a1aa964d39c8dd3a402e4d9b125fa18da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd calZeemanVector</definition>
        <argsstring>(double gamma, float *B0)</argsstring>
        <name>calZeemanVector</name>
        <param>
          <type>double</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>B0</declname>
        </param>
        <briefdescription>
<para>Zeeman Interaction vector[rad kHz]. </para>        </briefdescription>
        <detaileddescription>
<para>The Zeeman Interaction vector is given by mu_B (B * g) g&apos; = eye(3) * -gamma Zeeman vector = [ Bxgx , Bygy , Bzgz ] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>gyromagnetic ratio [radkHz/G] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">B0</parametername>
</parameternamelist>
<parameterdescription>
<para>magnetic field vector [G] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zeeman Interaction vector [rad kHz] </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="50" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="50" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a5b8d451b38f7bc46d46162938051ea1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd calDetuningVector</definition>
        <argsstring>(double detun)</argsstring>
        <name>calDetuningVector</name>
        <param>
          <type>double</type>
          <declname>detun</declname>
        </param>
        <briefdescription>
<para>Detuning Interaction vector[rad kHz]. </para>        </briefdescription>
        <detaileddescription>
<para>The Detuning Interaction vector is given by [0,0,detun] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">detun</parametername>
</parameternamelist>
<parameterdescription>
<para>detuning [rad kHz] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Detuning Interaction vector [rad kHz] </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="65" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1ac61f445f70273e155b293146b14f3ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd calOverhauserVector</definition>
        <argsstring>(double overhaus)</argsstring>
        <name>calOverhauserVector</name>
        <param>
          <type>double</type>
          <declname>overhaus</declname>
        </param>
        <briefdescription>
<para>Overhausler Interaction vector[rad kHz]. </para>        </briefdescription>
        <detaileddescription>
<para>The Overhausler Interaction vector is given by [0,0,overhaus] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">overhaus</parametername>
</parameternamelist>
<parameterdescription>
<para>overhausler effect [rad kHz] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Overhausler Interaction vector [rad kHz] </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="78" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a593082ae4bd73c95fcc0cc8fe363c286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd calPointDipoleTensor</definition>
        <argsstring>(double xyz1[3], double xyz2[3], double gamma1, double gamma2)</argsstring>
        <name>calPointDipoleTensor</name>
        <param>
          <type>double</type>
          <declname>xyz1</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>xyz2</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>gamma1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gamma2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="85" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="85" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a8baa0a43066e9b9fab882da88b2d5112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd calHamiltonianHeteroInt</definition>
        <argsstring>(MatrixXcd **Pmats, MatrixXcd Tensor, int nSpin, int iSpin, int jSpin)</argsstring>
        <name>calHamiltonianHeteroInt</name>
        <param>
          <type>MatrixXcd **</type>
          <declname>Pmats</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>Tensor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nSpin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iSpin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jSpin</declname>
        </param>
        <briefdescription>
<para>Hamiltonian for interacting two spins. </para>        </briefdescription>
        <detaileddescription>
<para>The Hamiltonian is given by (S1 * Tensor * S2) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Pmat1</parametername>
</parameternamelist>
<parameterdescription>
<para>Spin operator vector for first spin </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>3x3 interaction tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Pmat2</parametername>
</parameternamelist>
<parameterdescription>
<para>Spin operator vector for second spin </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hamiltonian interacting two spins (Pmat1[0,1,2] * Tensor * Pmat2[0,1,2]) </para></simplesect>
<simplesect kind="note"><para>Pmat format is the following : Pmat[0] = Pauli matrix X Pmat[1] = Pauli matrix Y Pmat[2] = Pauli matrix Z </para><simplesectsep/><para>The dimension of Returned Hamiltonian is expanded based on two spins </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="151" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="151" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1abab6619363786d624f0af5926220452c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd expandHamiltonian</definition>
        <argsstring>(MatrixXcd **Pmats, MatrixXcd Hi, int nSpin, int iSpin)</argsstring>
        <name>expandHamiltonian</name>
        <param>
          <type>MatrixXcd **</type>
          <declname>Pmats</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>Hi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nSpin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iSpin</declname>
        </param>
        <briefdescription>
<para>Matrix expand to the whole Hilbert space. </para>        </briefdescription>
        <detaileddescription>
<para>The matrix is expanded to the whole Hilbert space <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Pmats</parametername>
</parameternamelist>
<parameterdescription>
<para>Spin operator vector for single spin </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Hi</parametername>
</parameternamelist>
<parameterdescription>
<para>Hamiltonian for single spin </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nSpin</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of spins </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iSpin</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of spin </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Expanded Hamiltonian </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="226" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="226" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1ace01f359a59ec2f0b51cb651f294f42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd calHamiltonianSingleInt</definition>
        <argsstring>(MatrixXcd Vector, MatrixXcd *Pmat1)</argsstring>
        <name>calHamiltonianSingleInt</name>
        <param>
          <type>MatrixXcd</type>
          <declname>Vector</declname>
        </param>
        <param>
          <type>MatrixXcd *</type>
          <declname>Pmat1</declname>
        </param>
        <briefdescription>
<para>Hamiltonian for single spin. </para>        </briefdescription>
        <detaileddescription>
<para>The Hamiltonian is given by (Vector * Pmat) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>1x3 matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Pmat</parametername>
</parameternamelist>
<parameterdescription>
<para>Pauli matrix for single spin </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Pmat format is the following : Pmat[0] = Pauli matrix I Pmat[1] = Pauli matrix X Pmat[2] = Pauli matrix Y Pmat[3] = Pauli matrix Z </para></simplesect>
<simplesect kind="return"><para>Hamiltonian for single spin (Vector * Pmat) </para></simplesect>
<simplesect kind="note"><para>The dimension of Returned Hamiltonian is the same dimension as the single spin </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="278" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="278" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a392abac36087441c4997bab087572a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd calHamiltonianSelfInt</definition>
        <argsstring>(MatrixXcd *Pmat, MatrixXcd Tensor)</argsstring>
        <name>calHamiltonianSelfInt</name>
        <param>
          <type>MatrixXcd *</type>
          <declname>Pmat</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>Tensor</declname>
        </param>
        <briefdescription>
<para>Hamiltonian for self interaction. </para>        </briefdescription>
        <detaileddescription>
<para>The Hamiltonian is given by (Pmat * Tensor * Pmat) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Pmat</parametername>
</parameternamelist>
<parameterdescription>
<para>Spin operator vector for single spin </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>3x3 interaction tensor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Pmat format is the following : Pmat[0] = Pauli matrix I Pmat[1] = Pauli matrix X Pmat[2] = Pauli matrix Y Pmat[3] = Pauli matrix Z </para></simplesect>
<simplesect kind="return"><para>Hamiltonian for self interaction (Pmat * Tensor * Pmat) </para></simplesect>
<simplesect kind="note"><para>The dimension of Returned Hamiltonian is the same dimension as the single spin </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="315" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="315" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a6add2cc3544adcebe7f6c6215e6edb2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd Pauli_matrix_I</definition>
        <argsstring>(int mSize)</argsstring>
        <name>Pauli_matrix_I</name>
        <param>
          <type>int</type>
          <declname>mSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="331" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="331" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1ab89aaed2537a3a64c33bfd884a7cc151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd Pauli_matrix_X</definition>
        <argsstring>(int mSize)</argsstring>
        <name>Pauli_matrix_X</name>
        <param>
          <type>int</type>
          <declname>mSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="345" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="345" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1af46df9390cf168654ad3dbde8246a7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd Pauli_matrix_Y</definition>
        <argsstring>(int mSize)</argsstring>
        <name>Pauli_matrix_Y</name>
        <param>
          <type>int</type>
          <declname>mSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="359" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="359" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a4b924b2c4193ea814dfa9c3daaef6313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd Pauli_matrix_Z</definition>
        <argsstring>(int mSize)</argsstring>
        <name>Pauli_matrix_Z</name>
        <param>
          <type>int</type>
          <declname>mSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="375" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="375" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a7f2e348b06c637f01ad8dd96df04f7f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd *</type>
        <definition>MatrixXcd* getPauliOperators</definition>
        <argsstring>(int mSize)</argsstring>
        <name>getPauliOperators</name>
        <param>
          <type>int</type>
          <declname>mSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="389" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="389" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1aefa0a04f882701f9145227945bcc7e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd *</type>
        <definition>MatrixXcd* getGeneralPauliOperators</definition>
        <argsstring>(MatrixXcd alpha, MatrixXcd beta)</argsstring>
        <name>getGeneralPauliOperators</name>
        <param>
          <type>MatrixXcd</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="399" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="399" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1aef74b90578d55af688bb0f5623a0a18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isInvolutory</definition>
        <argsstring>(MatrixXcd A)</argsstring>
        <name>isInvolutory</name>
        <param>
          <type>MatrixXcd</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="440" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="440" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1ac9c76932926b82821bf0a3b8f854ef78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isSame</definition>
        <argsstring>(MatrixXcd A, MatrixXcd B)</argsstring>
        <name>isSame</name>
        <param>
          <type>MatrixXcd</type>
          <declname>A</declname>
        </param>
        <param>
          <type>MatrixXcd</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="461" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="461" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a736673e374275abc5e2121d6d58a3365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* getIndexInOrder</definition>
        <argsstring>(VectorXcd eigenValues)</argsstring>
        <name>getIndexInOrder</name>
        <param>
          <type>VectorXcd</type>
          <declname>eigenValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="478" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="478" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a6a5afd891b7cbf5044236d29d4c501b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorXcd</type>
        <definition>VectorXcd sortEigenValues</definition>
        <argsstring>(VectorXcd eigenValues, int *idx)</argsstring>
        <name>sortEigenValues</name>
        <param>
          <type>VectorXcd</type>
          <declname>eigenValues</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="500" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="500" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="hamiltonian_8cpp_1a6ca9fa8e295520b6f9feaf132d6e5aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXcd</type>
        <definition>MatrixXcd sortEigenVectors</definition>
        <argsstring>(MatrixXcd eigenVectors, int *idx)</argsstring>
        <name>sortEigenVectors</name>
        <param>
          <type>MatrixXcd</type>
          <declname>eigenVectors</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp" line="513" column="1" bodyfile="/home/huijin/git/CCEX/src/hamiltonian.cpp" bodystart="513" bodyend="527"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/hamiltonian.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/>Zeeman<sp/>Interaction<sp/>[rad<sp/>kHz]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">MatrixXcd<sp/>ZeemanInt(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>B0,<sp/>MatrixXcd*<sp/>Pmat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>H(m,m);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>=<sp/>MatrixXcd::Zero(m,m);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>=<sp/>-1.0<sp/>*<sp/>gamma<sp/>*<sp/>B0[0]<sp/>*<sp/>Pmat[1]<sp/>+<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.0<sp/>*<sp/>gamma<sp/>*<sp/>B0[1]<sp/>*<sp/>Pmat[2]<sp/>+<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.0<sp/>*<sp/>gamma<sp/>*<sp/>B0[2]<sp/>*<sp/>Pmat[3];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cf.<sp/>if<sp/>B0<sp/>=<sp/>(0,0,Bz),<sp/>H<sp/>=<sp/>-gamma*Bz*Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detuning<sp/>Interaction<sp/>[rad<sp/>kHz]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">MatrixXcd<sp/>DetuningInt(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detun,<sp/>MatrixXcd*<sp/>Pmat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detun<sp/>*<sp/>Pmat[3];</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">MatrixXcd<sp/>calZeemanVector(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>B0){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vector<sp/>=<sp/>MatrixXcd::Zero(1,3);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector(0,i)<sp/>=<sp/>-1.0<sp/>*<sp/>gamma<sp/>*<sp/>B0[i];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">MatrixXcd<sp/>calDetuningVector(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detun){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vector<sp/>=<sp/>MatrixXcd::Zero(1,3);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>vector(0,2)<sp/>=<sp/>detun;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">MatrixXcd<sp/>calOverhauserVector(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overhaus){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>vector<sp/>=<sp/>MatrixXcd::Zero(1,3);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>vector(0,2)<sp/>=<sp/>overhaus;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Interaction<sp/>tensor<sp/>by<sp/>asumming<sp/>Point-dipole<sp/>approximation<sp/>[rad<sp/>kHz]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">MatrixXcd<sp/>calPointDipoleTensor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xyz1[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xyz2[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma2){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Adip<sp/>=<sp/>MatrixXcd::Zero(3,3);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Adip&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>Adip<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>dist(xyz1,<sp/>xyz2);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ct<sp/>=<sp/>cosTheta(xyz1,xyz2,<sp/>r);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st<sp/>=<sp/>sinTheta(xyz1,xyz2,<sp/>r);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>cosPhi(xyz1,xyz2);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sp<sp/>=<sp/>sinPhi(xyz1,xyz2);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DS<sp/>=<sp/>H_BAR<sp/>*<sp/>gamma1<sp/>*<sp/>gamma2<sp/>/<sp/>pow(r,3);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(radkHz/G)<sp/>*<sp/>(radkHz/G)<sp/>/<sp/>(A^3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hbar<sp/>*<sp/>hbar<sp/>*<sp/>(radkHz/G)<sp/>*<sp/>(radkHz/G)<sp/>/<sp/>(A^3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//parameter<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;r<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>r<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;ct<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>ct<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;st<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>st<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;cp<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>cp<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;sp<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>sp<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;DS<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>DS<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Diag<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(0,0)<sp/>=<sp/>1<sp/>-<sp/>3<sp/>*<sp/>pow(st,2)<sp/>*<sp/>pow(cp,2);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(1,1)<sp/>=<sp/>1<sp/>-<sp/>3<sp/>*<sp/>pow(st,2)<sp/>*<sp/>pow(sp,2);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(2,2)<sp/>=<sp/>1<sp/>-<sp/>3<sp/>*<sp/>pow(ct,2);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xy,<sp/>yx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(0,1)<sp/>=<sp/>-3<sp/>*<sp/>pow(st,2)<sp/>*<sp/>cp<sp/>*<sp/>sp;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(1,0)<sp/>=<sp/>-3<sp/>*<sp/>pow(st,2)<sp/>*<sp/>cp<sp/>*<sp/>sp;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xz,<sp/>zx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(0,2)<sp/>=<sp/>-3<sp/>*<sp/>st<sp/>*<sp/>ct<sp/>*<sp/>cp;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(2,0)<sp/>=<sp/>-3<sp/>*<sp/>st<sp/>*<sp/>ct<sp/>*<sp/>cp;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//yz,<sp/>zy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(1,2)<sp/>=<sp/>-3<sp/>*<sp/>st<sp/>*<sp/>ct<sp/>*<sp/>sp;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip(2,1)<sp/>=<sp/>-3<sp/>*<sp/>st<sp/>*<sp/>ct<sp/>*<sp/>sp;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>Adip<sp/>=<sp/>DS<sp/>*<sp/>Adip;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Adip&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>Adip<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Adip;<sp/></highlight><highlight class="comment">//<sp/>H<sp/>=<sp/>S1<sp/>*<sp/>Adip<sp/>*<sp/>S2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">MatrixXcd<sp/>calHamiltonianHeteroInt(MatrixXcd**<sp/>Pmats,<sp/>MatrixXcd<sp/>Tensor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSpin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iSpin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jSpin){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>dimension<sp/>of<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimrow<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimcol<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nSpin;<sp/>i++){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;Pmats[%d][0]<sp/>:<sp/>(%d,<sp/>%d)\n&quot;,i,Pmats[i][0].rows(),Pmats[i][0].cols());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimrow<sp/>*=<sp/>Pmats[i][0].rows();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimcol<sp/>*=<sp/>Pmats[i][0].cols();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;dimrow<sp/>:<sp/>%d\n&quot;,dimrow);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;dimcol<sp/>:<sp/>%d\n&quot;,dimcol);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>expanded<sp/>Pauli<sp/>Operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>SixSjx,<sp/>SixSjy,<sp/>SixSjz;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>SiySjx,<sp/>SiySjy,<sp/>SiySjz;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>SizSjx,<sp/>SizSjy,<sp/>SizSjz;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nSpin;<sp/>i++){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>SixSjxTmp,<sp/>SixSjyTmp,<sp/>SixSjzTmp;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>SiySjxTmp,<sp/>SiySjyTmp,<sp/>SiySjzTmp;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>SizSjxTmp,<sp/>SizSjyTmp,<sp/>SizSjzTmp;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>iSpin){</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SixSjxTmp<sp/>=<sp/>Pmats[iSpin][1]<sp/>;<sp/>SixSjyTmp<sp/>=<sp/>Pmats[iSpin][1]<sp/>;<sp/>SixSjzTmp<sp/>=<sp/>Pmats[iSpin][1]<sp/>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SiySjxTmp<sp/>=<sp/>Pmats[iSpin][2]<sp/>;<sp/>SiySjyTmp<sp/>=<sp/>Pmats[iSpin][2]<sp/>;<sp/>SiySjzTmp<sp/>=<sp/>Pmats[iSpin][2]<sp/>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SizSjxTmp<sp/>=<sp/>Pmats[iSpin][3]<sp/>;<sp/>SizSjyTmp<sp/>=<sp/>Pmats[iSpin][3]<sp/>;<sp/>SizSjzTmp<sp/>=<sp/>Pmats[iSpin][3]<sp/>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>jSpin){</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SixSjxTmp<sp/>=<sp/>Pmats[jSpin][1]<sp/>;<sp/>SixSjyTmp<sp/>=<sp/>Pmats[jSpin][2]<sp/>;<sp/>SixSjzTmp<sp/>=<sp/>Pmats[jSpin][3]<sp/>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SiySjxTmp<sp/>=<sp/>Pmats[jSpin][1]<sp/>;<sp/>SiySjyTmp<sp/>=<sp/>Pmats[jSpin][2]<sp/>;<sp/>SiySjzTmp<sp/>=<sp/>Pmats[jSpin][3]<sp/>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SizSjxTmp<sp/>=<sp/>Pmats[jSpin][1]<sp/>;<sp/>SizSjyTmp<sp/>=<sp/>Pmats[jSpin][2]<sp/>;<sp/>SizSjzTmp<sp/>=<sp/>Pmats[jSpin][3]<sp/>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SixSjxTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;<sp/>SixSjyTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;<sp/>SixSjzTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SiySjxTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;<sp/>SiySjyTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;<sp/>SiySjzTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SizSjxTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;<sp/>SizSjyTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;<sp/>SizSjzTmp<sp/>=<sp/>Pmats[i][0]<sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0){</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SixSjx<sp/>=<sp/>SixSjxTmp;<sp/>SixSjy<sp/>=<sp/>SixSjyTmp;<sp/>SixSjz<sp/>=<sp/>SixSjzTmp;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SiySjx<sp/>=<sp/>SiySjxTmp;<sp/>SiySjy<sp/>=<sp/>SiySjyTmp;<sp/>SiySjz<sp/>=<sp/>SiySjzTmp;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SizSjx<sp/>=<sp/>SizSjxTmp;<sp/>SizSjy<sp/>=<sp/>SizSjyTmp;<sp/>SizSjz<sp/>=<sp/>SizSjzTmp;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SixSjx<sp/>=<sp/>kron(SixSjx,SixSjxTmp);<sp/>SixSjy<sp/>=<sp/>kron(SixSjy,SixSjyTmp);<sp/>SixSjz<sp/>=<sp/>kron(SixSjz,SixSjzTmp);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SiySjx<sp/>=<sp/>kron(SiySjx,SiySjxTmp);<sp/>SiySjy<sp/>=<sp/>kron(SiySjy,SiySjyTmp);<sp/>SiySjz<sp/>=<sp/>kron(SiySjz,SiySjzTmp);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SizSjx<sp/>=<sp/>kron(SizSjx,SizSjxTmp);<sp/>SizSjy<sp/>=<sp/>kron(SizSjy,SizSjyTmp);<sp/>SizSjz<sp/>=<sp/>kron(SizSjz,SizSjzTmp);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SixSjx.rows()<sp/>!=<sp/>dimrow<sp/>||<sp/>SixSjx.cols()<sp/>!=<sp/>dimcol){</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Error(calHamiltonianHeteroInt):<sp/>Dimension<sp/>of<sp/>SixSjx<sp/>is<sp/>not<sp/>matched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>H<sp/>=<sp/>MatrixXcd::Zero(dimrow,dimcol);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>=<sp/>Tensor(0,0)<sp/>*<sp/>SixSjx<sp/>+<sp/>Tensor(0,1)<sp/>*<sp/>SixSjy<sp/>+<sp/>Tensor(0,2)<sp/>*<sp/>SixSjz<sp/>+</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor(1,0)<sp/>*<sp/>SiySjx<sp/>+<sp/>Tensor(1,1)<sp/>*<sp/>SiySjy<sp/>+<sp/>Tensor(1,2)<sp/>*<sp/>SiySjz<sp/>+</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor(2,0)<sp/>*<sp/>SizSjx<sp/>+<sp/>Tensor(2,1)<sp/>*<sp/>SizSjy<sp/>+<sp/>Tensor(2,2)<sp/>*<sp/>SizSjz;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">MatrixXcd<sp/>expandHamiltonian(MatrixXcd**<sp/>Pmats,<sp/>MatrixXcd<sp/>Hi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSpin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iSpin){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>dimension<sp/>of<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimrow<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimcol<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nSpin;<sp/>i++){</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimrow<sp/>*=<sp/>Pmats[i][0].rows();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimcol<sp/>*=<sp/>Pmats[i][0].cols();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>Hamiltonian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>expandedHamiltonian;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nSpin;<sp/>i++){</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXcd<sp/>tmpMatrix;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>iSpin){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMatrix<sp/>=<sp/>Hi;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMatrix<sp/>=<sp/>Pmats[i][0];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expandedHamiltonian<sp/>=<sp/>tmpMatrix;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expandedHamiltonian<sp/>=<sp/>kron(expandedHamiltonian,tmpMatrix);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expandedHamiltonian.rows()<sp/>!=<sp/>dimrow<sp/>||<sp/>expandedHamiltonian.cols()<sp/>!=<sp/>dimcol){</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Error(expandHamiltonian):<sp/>Dimension<sp/>of<sp/>expandedHamiltonian<sp/>is<sp/>not<sp/>matched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expandedHamiltonian;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">MatrixXcd<sp/>calHamiltonianSingleInt(MatrixXcd<sp/>Vector,<sp/>MatrixXcd*<sp/>Pmat1){</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Vector.rows()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>Vector.cols()<sp/>==<sp/>3){</highlight><highlight class="comment">//1x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Vector.rows()<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>Vector.cols()<sp/>==<sp/>1){<sp/></highlight><highlight class="comment">//3x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector<sp/>=<sp/>Vector.transpose().eval();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Error(calHamiltonianSingleInt):<sp/>Dimension<sp/>of<sp/>Vector<sp/>is<sp/>not<sp/>matched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimrow<sp/>=<sp/>Pmat1[0].rows();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimcol<sp/>=<sp/>Pmat1[0].cols();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>H<sp/>=<sp/>MatrixXcd::Zero(dimrow,dimcol);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++){</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>+=<sp/>Vector(0,i)<sp/>*<sp/>Pmat1[i+1];<sp/></highlight><highlight class="comment">//Px,<sp/>Py,<sp/>Pz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">MatrixXcd<sp/>calHamiltonianSelfInt(MatrixXcd*<sp/>Pmat,<sp/>MatrixXcd<sp/>Tensor){</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimrow<sp/>=<sp/>Pmat[0].rows();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimcol<sp/>=<sp/>Pmat[0].cols();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>H<sp/>=<sp/>MatrixXcd::Zero(dimrow,dimcol);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++){</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++){</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>+=<sp/>Tensor(i,j)<sp/>*<sp/>Pmat[i+1]<sp/>*<sp/>Pmat[j+1];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">MatrixXcd<sp/>Pauli_matrix_I(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mSize){</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>II_h(mSize,mSize);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=0;<sp/>a&lt;mSize;<sp/>a++){</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=0;<sp/>b&lt;mSize;<sp/>b++){</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a==b){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>II_h(a,b)=1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>II_h(a,b)=0;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>II_h;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">MatrixXcd<sp/>Pauli_matrix_X(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mSize){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Ix_h(mSize,mSize);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=0;<sp/>a&lt;mSize;<sp/>a++){</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=0;<sp/>b&lt;mSize;<sp/>b++){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((a<sp/>==<sp/>(b+1))<sp/>||<sp/>((a+1)==b)){</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ix_h(a,b)=sqrt((((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mSize-1)/2+1)*((a+1)+(1+b)-1)-(a+1)*(b+1))/2;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ix_h(a,b)=0;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ix_h;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">MatrixXcd<sp/>Pauli_matrix_Y(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mSize){</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Iy_h(mSize,mSize);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=0;<sp/>a&lt;mSize;<sp/>a++){</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=0;<sp/>b&lt;mSize;<sp/>b++){</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>==<sp/>(b+1)){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iy_h(a,b)=doublec(0,sqrt((((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mSize-1)/2+1)*((a+1)+(1+b)-1)-(a+1)*(b+1))/2);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((a+1)==b){</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iy_h(a,b)=doublec(0,-sqrt((((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mSize-1)/2+1)*((a+1)+(1+b)-1)-(a+1)*(b+1))/2);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iy_h(a,b)=0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Iy_h;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">MatrixXcd<sp/>Pauli_matrix_Z(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mSize){</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>Iz_h(mSize,mSize);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=0;<sp/>a&lt;mSize;<sp/>a++){</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=0;<sp/>b&lt;mSize;<sp/>b++){</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a==b){</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iz_h(a,b)=(1-(a+1)+((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mSize-1)/2);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iz_h(a,b)=0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Iz_h;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">MatrixXcd*<sp/>getPauliOperators(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mSize){</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd*<sp/>spinVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd[4];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>spinVector[0]<sp/>=<sp/>Pauli_matrix_I(mSize);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>spinVector[1]<sp/>=<sp/>Pauli_matrix_X(mSize);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>spinVector[2]<sp/>=<sp/>Pauli_matrix_Y(mSize);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>spinVector[3]<sp/>=<sp/>Pauli_matrix_Z(mSize);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spinVector;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">MatrixXcd*<sp/>getGeneralPauliOperators(MatrixXcd<sp/>alpha,<sp/>MatrixXcd<sp/>beta){</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(alpha,&quot;alpha&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(beta,&quot;beta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimrow<sp/>=<sp/>alpha.rows()<sp/>*<sp/>beta.cols();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimcol<sp/>=<sp/>alpha.cols()<sp/>*<sp/>beta.rows();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd*<sp/>sigma<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatrixXcd[4];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MatrixXcd<sp/>gg<sp/>=<sp/>kron(alpha,alpha.adjoint());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>gg<sp/>=<sp/>alpha<sp/>*<sp/>alpha.adjoint();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>ge<sp/>=<sp/>alpha<sp/>*<sp/>beta.adjoint();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>ee<sp/>=<sp/>beta<sp/>*<sp/>beta.adjoint();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>eg<sp/>=<sp/>beta<sp/>*<sp/>alpha.adjoint();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma[0]<sp/>=<sp/>MatrixXcd::Identity(dimrow,dimcol);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma[1]<sp/>=<sp/>MatrixXcd::Zero(dimrow,dimcol);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma[2]<sp/>=<sp/>MatrixXcd::Zero(dimrow,dimcol);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma[3]<sp/>=<sp/>MatrixXcd::Zero(dimrow,dimcol);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma[1]<sp/>=<sp/>doublec(1.0,<sp/>0.0)<sp/>*<sp/>ge<sp/>+<sp/>doublec(1.0,0.0)<sp/>*<sp/>eg;<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|01&gt;&lt;10|<sp/>+<sp/><sp/>|10&gt;&lt;01|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma[2]<sp/>=<sp/>doublec(0.0,-1.0)<sp/>*<sp/>ge<sp/>+<sp/>doublec(0.0,1.0)<sp/>*<sp/>eg;<sp/></highlight><highlight class="comment">//<sp/>-i|01&gt;&lt;10|<sp/>+<sp/>i|10&gt;&lt;01|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma[3]<sp/>=<sp/>doublec(1.0,<sp/>0.0)<sp/>*<sp/>gg<sp/>-<sp/>doublec(1.0,0.0)<sp/>*<sp/>ee;<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|00&gt;&lt;00|<sp/>-<sp/><sp/>|11&gt;&lt;11|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(sigma[0]*sigma[0],&quot;sigma[0]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(sigma[1]*sigma[1],&quot;sigma[1]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(sigma[2]*sigma[2],&quot;sigma[2]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(sigma[3]*sigma[3],&quot;sigma[3]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isInvolutory(sigma[0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isInvolutory(sigma[1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isInvolutory(sigma[2]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isInvolutory(sigma[3]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigma;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//In<sp/>mathematics,<sp/>an<sp/>involutory<sp/>matrix<sp/>is<sp/>a<sp/>square<sp/>matrix<sp/>that<sp/>is<sp/>its<sp/>own<sp/>inverse.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mat<sp/>*<sp/><sp/>Mat<sp/>=<sp/>Identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInvolutory(MatrixXcd<sp/>A){</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((A.rows()<sp/>!=<sp/>A.cols())){</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Error(isInvolutory):<sp/>Matrix<sp/>is<sp/>not<sp/>square&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>B<sp/>=<sp/>A<sp/>*<sp/>A;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>I<sp/>=<sp/>MatrixXcd::Identity(A.rows(),A.cols());</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(B,&quot;B&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printMatrixXcd(I,&quot;I&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((isSame(B,I))){</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Error(isInvolutory):<sp/>Matrix<sp/>is<sp/>not<sp/>involutory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSame(MatrixXcd<sp/>A,<sp/>MatrixXcd<sp/>B){</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((A.rows()<sp/>==<sp/>B.rows())<sp/>&amp;&amp;<sp/>(A.cols()<sp/>==<sp/>B.cols())){</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;A.rows();<sp/>i++){</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;A.cols();<sp/>j++){</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A(i,j)<sp/>!=<sp/>B(i,j)){</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sort<sp/>in<sp/>desending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>getIndexInOrder(VectorXcd<sp/>eigenValues){</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>eigenValues.size();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>idx<sp/>=<sp/>allocInt1d(dim);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dim;<sp/>i++){</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dim;<sp/>i++){</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=i+1;<sp/>j&lt;dim;<sp/>j++){</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eigenValues(idx[i]).real()<sp/>&lt;<sp/>eigenValues(idx[j]).real()){</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>idx[i];</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[i]<sp/>=<sp/>idx[j];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[j]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal">VectorXcd<sp/>sortEigenValues(VectorXcd<sp/>eigenValues,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>idx){</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>eigenValues.size();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorXcd<sp/>sortedEigenValues<sp/>=<sp/>VectorXcd::Zero(dim);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dim;<sp/>i++){</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sortedEigenValues(i)<sp/>=<sp/>eigenValues(idx[i]);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sortedEigenValues;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">MatrixXcd<sp/>sortEigenVectors(MatrixXcd<sp/>eigenVectors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>idx){</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimrow<sp/>=<sp/>eigenVectors.rows();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimcol<sp/>=<sp/>eigenVectors.cols();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXcd<sp/>sortedEigenVectors<sp/>=<sp/>MatrixXcd::Zero(dimrow,dimcol);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dimcol;<sp/>i++){</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;dimrow;<sp/>j++){</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sortedEigenVectors(j,i)<sp/>=<sp/>eigenVectors(j,idx[i]);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sortedEigenVectors;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/huijin/git/CCEX/src/hamiltonian.cpp"/>
  </compounddef>
</doxygen>
