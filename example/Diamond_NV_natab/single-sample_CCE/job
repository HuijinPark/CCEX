#!/bin/sh
#SBATCH -J CCE2_Diamond_NV_natab
#SBATCH -p 64core
#SBATCH --nodes=2
#SBATCH --ntasks-per-node=64
#SBATCH --cpus-per-task=1
#SBATCH --out outfile
#SBATCH --time=2-00:00:00
#SBATCH --qos=small-2
#SBATCH --mem-per-cpu=0

module purge 
module load  intel-23.2/icc-23.2  intel-23.2/gsl-2.8  intel-23.2/eigen-3.4.0 

#NodeProcess=$(($SLURM_NTASKS_PER_NODE * $SLURM_JOB_NUM_NODES))
NodeProcess=5

CodePath="$(git rev-parse --show-toplevel)/bin/main.out"
InputFilePath="./ccein.js"

mkdir ./results

echo "Run calculation using codes $CodePath"

for i in $(seq 1 1 20)
do
    BathFile="../bath/bath_Diamond_NV_natab_${i}"
    OutputFile="./results/CCE2_Diamond_NV_natab_${i}"
    
    # [1] Method 1 : Using -I, -o options
    mpirun -n ${NodeProcess} ${CodePath} -f ${InputFilePath} -I ${BathFile} -o "${OutputFile}" > ./results/process_${i}

    # [2] Method 2 : Using -I options and outfile tag in ccein.js
    # mpirun -n ${NodeProcess} ${CodePath} -f ${InputFilePath} -I ${BathFile} -v > ./results/process_${i}

    # [3] Method 3 : Using input file only 
    # mpirun -n ${NodeProcess} ${CodePath} -f ${InputFilePath} -v > ./results/process_${i}
done
